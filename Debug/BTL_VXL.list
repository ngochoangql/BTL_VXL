
BTL_VXL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000475c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08004868  08004868  00014868  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080048e8  080048e8  00020118  2**0
                  CONTENTS
  4 .ARM          00000000  080048e8  080048e8  00020118  2**0
                  CONTENTS
  5 .preinit_array 00000000  080048e8  080048e8  00020118  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080048e8  080048e8  000148e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080048ec  080048ec  000148ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000118  20000000  080048f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000018c  20000118  08004a08  00020118  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002a4  08004a08  000202a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020118  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ea20  00000000  00000000  00020141  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023a0  00000000  00000000  0002eb61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cc8  00000000  00000000  00030f08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bd8  00000000  00000000  00031bd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001861d  00000000  00000000  000327a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e6dd  00000000  00000000  0004adc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008af32  00000000  00000000  000594a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e43d4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037f8  00000000  00000000  000e4428  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000118 	.word	0x20000118
 8000128:	00000000 	.word	0x00000000
 800012c:	08004850 	.word	0x08004850

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000011c 	.word	0x2000011c
 8000148:	08004850 	.word	0x08004850

0800014c <isButtonPress>:


int button_flag_press[NUM_BUTTONS] = {0,0,0,0};


int isButtonPress(int button_idx){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if(button_flag_press[button_idx]==1){
 8000154:	4a09      	ldr	r2, [pc, #36]	; (800017c <isButtonPress+0x30>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800015c:	2b01      	cmp	r3, #1
 800015e:	d106      	bne.n	800016e <isButtonPress+0x22>
		button_flag_press[button_idx]=0;
 8000160:	4a06      	ldr	r2, [pc, #24]	; (800017c <isButtonPress+0x30>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	2100      	movs	r1, #0
 8000166:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800016a:	2301      	movs	r3, #1
 800016c:	e000      	b.n	8000170 <isButtonPress+0x24>
	}
	return 0;
 800016e:	2300      	movs	r3, #0
}
 8000170:	4618      	mov	r0, r3
 8000172:	370c      	adds	r7, #12
 8000174:	46bd      	mov	sp, r7
 8000176:	bc80      	pop	{r7}
 8000178:	4770      	bx	lr
 800017a:	bf00      	nop
 800017c:	20000134 	.word	0x20000134

08000180 <getKeyInput>:

void getKeyInput(){
 8000180:	b580      	push	{r7, lr}
 8000182:	b082      	sub	sp, #8
 8000184:	af00      	add	r7, sp, #0
	for(int i=0;i<NUM_BUTTONS;i++){
 8000186:	2300      	movs	r3, #0
 8000188:	607b      	str	r3, [r7, #4]
 800018a:	e06a      	b.n	8000262 <getKeyInput+0xe2>
		KeyReg0[i] = KeyReg1[i];
 800018c:	4a39      	ldr	r2, [pc, #228]	; (8000274 <getKeyInput+0xf4>)
 800018e:	687b      	ldr	r3, [r7, #4]
 8000190:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000194:	4938      	ldr	r1, [pc, #224]	; (8000278 <getKeyInput+0xf8>)
 8000196:	687b      	ldr	r3, [r7, #4]
 8000198:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg1[i] = KeyReg2[i];
 800019c:	4a37      	ldr	r2, [pc, #220]	; (800027c <getKeyInput+0xfc>)
 800019e:	687b      	ldr	r3, [r7, #4]
 80001a0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001a4:	4933      	ldr	r1, [pc, #204]	; (8000274 <getKeyInput+0xf4>)
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg2[i] = HAL_GPIO_ReadPin(BUTTON_PORT[i], BUTTON_PIN[i]);
 80001ac:	4a34      	ldr	r2, [pc, #208]	; (8000280 <getKeyInput+0x100>)
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001b4:	4933      	ldr	r1, [pc, #204]	; (8000284 <getKeyInput+0x104>)
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80001bc:	4619      	mov	r1, r3
 80001be:	4610      	mov	r0, r2
 80001c0:	f001 ff60 	bl	8002084 <HAL_GPIO_ReadPin>
 80001c4:	4603      	mov	r3, r0
 80001c6:	4619      	mov	r1, r3
 80001c8:	4a2c      	ldr	r2, [pc, #176]	; (800027c <getKeyInput+0xfc>)
 80001ca:	687b      	ldr	r3, [r7, #4]
 80001cc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		if ((KeyReg1[i] == KeyReg0[i]) && (KeyReg1[i] == KeyReg2[i])){
 80001d0:	4a28      	ldr	r2, [pc, #160]	; (8000274 <getKeyInput+0xf4>)
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001d8:	4927      	ldr	r1, [pc, #156]	; (8000278 <getKeyInput+0xf8>)
 80001da:	687b      	ldr	r3, [r7, #4]
 80001dc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80001e0:	429a      	cmp	r2, r3
 80001e2:	d13b      	bne.n	800025c <getKeyInput+0xdc>
 80001e4:	4a23      	ldr	r2, [pc, #140]	; (8000274 <getKeyInput+0xf4>)
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001ec:	4923      	ldr	r1, [pc, #140]	; (800027c <getKeyInput+0xfc>)
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80001f4:	429a      	cmp	r2, r3
 80001f6:	d131      	bne.n	800025c <getKeyInput+0xdc>
			if(KeyReg3[i]!=KeyReg2[i]){
 80001f8:	4a23      	ldr	r2, [pc, #140]	; (8000288 <getKeyInput+0x108>)
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000200:	491e      	ldr	r1, [pc, #120]	; (800027c <getKeyInput+0xfc>)
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000208:	429a      	cmp	r2, r3
 800020a:	d013      	beq.n	8000234 <getKeyInput+0xb4>
				KeyReg3[i]=KeyReg2[i];
 800020c:	4a1b      	ldr	r2, [pc, #108]	; (800027c <getKeyInput+0xfc>)
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000214:	491c      	ldr	r1, [pc, #112]	; (8000288 <getKeyInput+0x108>)
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (KeyReg2[i]==PRESSED_STATE){
 800021c:	4a17      	ldr	r2, [pc, #92]	; (800027c <getKeyInput+0xfc>)
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000224:	2b00      	cmp	r3, #0
 8000226:	d119      	bne.n	800025c <getKeyInput+0xdc>
						button_flag_press[i]=1;
 8000228:	4a18      	ldr	r2, [pc, #96]	; (800028c <getKeyInput+0x10c>)
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	2101      	movs	r1, #1
 800022e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000232:	e013      	b.n	800025c <getKeyInput+0xdc>
				}
			}else{
				TimeOutForKeyPress[i]--;
 8000234:	4a16      	ldr	r2, [pc, #88]	; (8000290 <getKeyInput+0x110>)
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800023c:	1e5a      	subs	r2, r3, #1
 800023e:	4914      	ldr	r1, [pc, #80]	; (8000290 <getKeyInput+0x110>)
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if(TimeOutForKeyPress[i]==0){
 8000246:	4a12      	ldr	r2, [pc, #72]	; (8000290 <getKeyInput+0x110>)
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800024e:	2b00      	cmp	r3, #0
 8000250:	d104      	bne.n	800025c <getKeyInput+0xdc>
					KeyReg3[i]=NORMAL_STATE;
 8000252:	4a0d      	ldr	r2, [pc, #52]	; (8000288 <getKeyInput+0x108>)
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	2101      	movs	r1, #1
 8000258:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i=0;i<NUM_BUTTONS;i++){
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	3301      	adds	r3, #1
 8000260:	607b      	str	r3, [r7, #4]
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	2b03      	cmp	r3, #3
 8000266:	dd91      	ble.n	800018c <getKeyInput+0xc>
				}
			}
		}
	}
}
 8000268:	bf00      	nop
 800026a:	bf00      	nop
 800026c:	3708      	adds	r7, #8
 800026e:	46bd      	mov	sp, r7
 8000270:	bd80      	pop	{r7, pc}
 8000272:	bf00      	nop
 8000274:	20000010 	.word	0x20000010
 8000278:	20000000 	.word	0x20000000
 800027c:	20000020 	.word	0x20000020
 8000280:	20000048 	.word	0x20000048
 8000284:	20000040 	.word	0x20000040
 8000288:	20000030 	.word	0x20000030
 800028c:	20000134 	.word	0x20000134
 8000290:	20000080 	.word	0x20000080

08000294 <setPedestrianLight>:
#include "fsm.h"
#include "string.h"
#include <stdio.h>
UART_HandleTypeDef huart2;
int count;
void setPedestrianLight(int color){
 8000294:	b580      	push	{r7, lr}
 8000296:	b082      	sub	sp, #8
 8000298:	af00      	add	r7, sp, #0
 800029a:	6078      	str	r0, [r7, #4]
	switch (color) {
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	2b20      	cmp	r3, #32
 80002a0:	d02b      	beq.n	80002fa <setPedestrianLight+0x66>
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	2b20      	cmp	r3, #32
 80002a6:	dc39      	bgt.n	800031c <setPedestrianLight+0x88>
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	2b1e      	cmp	r3, #30
 80002ac:	d003      	beq.n	80002b6 <setPedestrianLight+0x22>
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	2b1f      	cmp	r3, #31
 80002b2:	d011      	beq.n	80002d8 <setPedestrianLight+0x44>
 80002b4:	e032      	b.n	800031c <setPedestrianLight+0x88>
	case RED:
		HAL_GPIO_WritePin(LED_PORT[4], LED_PIN[4], 1);
 80002b6:	4b24      	ldr	r3, [pc, #144]	; (8000348 <setPedestrianLight+0xb4>)
 80002b8:	691b      	ldr	r3, [r3, #16]
 80002ba:	4a24      	ldr	r2, [pc, #144]	; (800034c <setPedestrianLight+0xb8>)
 80002bc:	8911      	ldrh	r1, [r2, #8]
 80002be:	2201      	movs	r2, #1
 80002c0:	4618      	mov	r0, r3
 80002c2:	f001 fef6 	bl	80020b2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_PORT[5], LED_PIN[5], 0);
 80002c6:	4b20      	ldr	r3, [pc, #128]	; (8000348 <setPedestrianLight+0xb4>)
 80002c8:	695b      	ldr	r3, [r3, #20]
 80002ca:	4a20      	ldr	r2, [pc, #128]	; (800034c <setPedestrianLight+0xb8>)
 80002cc:	8951      	ldrh	r1, [r2, #10]
 80002ce:	2200      	movs	r2, #0
 80002d0:	4618      	mov	r0, r3
 80002d2:	f001 feee 	bl	80020b2 <HAL_GPIO_WritePin>
		break;
 80002d6:	e032      	b.n	800033e <setPedestrianLight+0xaa>
	case YELLOW:
		HAL_GPIO_WritePin(LED_PORT[4], LED_PIN[4], 1);
 80002d8:	4b1b      	ldr	r3, [pc, #108]	; (8000348 <setPedestrianLight+0xb4>)
 80002da:	691b      	ldr	r3, [r3, #16]
 80002dc:	4a1b      	ldr	r2, [pc, #108]	; (800034c <setPedestrianLight+0xb8>)
 80002de:	8911      	ldrh	r1, [r2, #8]
 80002e0:	2201      	movs	r2, #1
 80002e2:	4618      	mov	r0, r3
 80002e4:	f001 fee5 	bl	80020b2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_PORT[5], LED_PIN[5], 1);
 80002e8:	4b17      	ldr	r3, [pc, #92]	; (8000348 <setPedestrianLight+0xb4>)
 80002ea:	695b      	ldr	r3, [r3, #20]
 80002ec:	4a17      	ldr	r2, [pc, #92]	; (800034c <setPedestrianLight+0xb8>)
 80002ee:	8951      	ldrh	r1, [r2, #10]
 80002f0:	2201      	movs	r2, #1
 80002f2:	4618      	mov	r0, r3
 80002f4:	f001 fedd 	bl	80020b2 <HAL_GPIO_WritePin>
		break;
 80002f8:	e021      	b.n	800033e <setPedestrianLight+0xaa>
	case GREEN:
		HAL_GPIO_WritePin(LED_PORT[4], LED_PIN[4], 0);
 80002fa:	4b13      	ldr	r3, [pc, #76]	; (8000348 <setPedestrianLight+0xb4>)
 80002fc:	691b      	ldr	r3, [r3, #16]
 80002fe:	4a13      	ldr	r2, [pc, #76]	; (800034c <setPedestrianLight+0xb8>)
 8000300:	8911      	ldrh	r1, [r2, #8]
 8000302:	2200      	movs	r2, #0
 8000304:	4618      	mov	r0, r3
 8000306:	f001 fed4 	bl	80020b2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_PORT[5], LED_PIN[5], 1);
 800030a:	4b0f      	ldr	r3, [pc, #60]	; (8000348 <setPedestrianLight+0xb4>)
 800030c:	695b      	ldr	r3, [r3, #20]
 800030e:	4a0f      	ldr	r2, [pc, #60]	; (800034c <setPedestrianLight+0xb8>)
 8000310:	8951      	ldrh	r1, [r2, #10]
 8000312:	2201      	movs	r2, #1
 8000314:	4618      	mov	r0, r3
 8000316:	f001 fecc 	bl	80020b2 <HAL_GPIO_WritePin>
		break;
 800031a:	e010      	b.n	800033e <setPedestrianLight+0xaa>
	default:
		HAL_GPIO_WritePin(LED_PORT[4], LED_PIN[4], 0);
 800031c:	4b0a      	ldr	r3, [pc, #40]	; (8000348 <setPedestrianLight+0xb4>)
 800031e:	691b      	ldr	r3, [r3, #16]
 8000320:	4a0a      	ldr	r2, [pc, #40]	; (800034c <setPedestrianLight+0xb8>)
 8000322:	8911      	ldrh	r1, [r2, #8]
 8000324:	2200      	movs	r2, #0
 8000326:	4618      	mov	r0, r3
 8000328:	f001 fec3 	bl	80020b2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_PORT[5], LED_PIN[5], 0);
 800032c:	4b06      	ldr	r3, [pc, #24]	; (8000348 <setPedestrianLight+0xb4>)
 800032e:	695b      	ldr	r3, [r3, #20]
 8000330:	4a06      	ldr	r2, [pc, #24]	; (800034c <setPedestrianLight+0xb8>)
 8000332:	8951      	ldrh	r1, [r2, #10]
 8000334:	2200      	movs	r2, #0
 8000336:	4618      	mov	r0, r3
 8000338:	f001 febb 	bl	80020b2 <HAL_GPIO_WritePin>
		break;
 800033c:	bf00      	nop
	}
}
 800033e:	bf00      	nop
 8000340:	3708      	adds	r7, #8
 8000342:	46bd      	mov	sp, r7
 8000344:	bd80      	pop	{r7, pc}
 8000346:	bf00      	nop
 8000348:	20000064 	.word	0x20000064
 800034c:	20000058 	.word	0x20000058

08000350 <setT1>:
void setT1(int color) {
 8000350:	b580      	push	{r7, lr}
 8000352:	b082      	sub	sp, #8
 8000354:	af00      	add	r7, sp, #0
 8000356:	6078      	str	r0, [r7, #4]
	switch (color) {
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	2b20      	cmp	r3, #32
 800035c:	d02b      	beq.n	80003b6 <setT1+0x66>
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	2b20      	cmp	r3, #32
 8000362:	dc39      	bgt.n	80003d8 <setT1+0x88>
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	2b1e      	cmp	r3, #30
 8000368:	d003      	beq.n	8000372 <setT1+0x22>
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	2b1f      	cmp	r3, #31
 800036e:	d011      	beq.n	8000394 <setT1+0x44>
	case GREEN:
		HAL_GPIO_WritePin(LED_PORT[0], LED_PIN[0], 0);
		HAL_GPIO_WritePin(LED_PORT[1], LED_PIN[1], 1);
		break;
	default:
		break;
 8000370:	e032      	b.n	80003d8 <setT1+0x88>
		HAL_GPIO_WritePin(LED_PORT[0], LED_PIN[0], 1);
 8000372:	4b1c      	ldr	r3, [pc, #112]	; (80003e4 <setT1+0x94>)
 8000374:	681b      	ldr	r3, [r3, #0]
 8000376:	4a1c      	ldr	r2, [pc, #112]	; (80003e8 <setT1+0x98>)
 8000378:	8811      	ldrh	r1, [r2, #0]
 800037a:	2201      	movs	r2, #1
 800037c:	4618      	mov	r0, r3
 800037e:	f001 fe98 	bl	80020b2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_PORT[1], LED_PIN[1], 0);
 8000382:	4b18      	ldr	r3, [pc, #96]	; (80003e4 <setT1+0x94>)
 8000384:	685b      	ldr	r3, [r3, #4]
 8000386:	4a18      	ldr	r2, [pc, #96]	; (80003e8 <setT1+0x98>)
 8000388:	8851      	ldrh	r1, [r2, #2]
 800038a:	2200      	movs	r2, #0
 800038c:	4618      	mov	r0, r3
 800038e:	f001 fe90 	bl	80020b2 <HAL_GPIO_WritePin>
		break;
 8000392:	e022      	b.n	80003da <setT1+0x8a>
		HAL_GPIO_WritePin(LED_PORT[0], LED_PIN[0], 1);
 8000394:	4b13      	ldr	r3, [pc, #76]	; (80003e4 <setT1+0x94>)
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	4a13      	ldr	r2, [pc, #76]	; (80003e8 <setT1+0x98>)
 800039a:	8811      	ldrh	r1, [r2, #0]
 800039c:	2201      	movs	r2, #1
 800039e:	4618      	mov	r0, r3
 80003a0:	f001 fe87 	bl	80020b2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_PORT[1], LED_PIN[1], 1);
 80003a4:	4b0f      	ldr	r3, [pc, #60]	; (80003e4 <setT1+0x94>)
 80003a6:	685b      	ldr	r3, [r3, #4]
 80003a8:	4a0f      	ldr	r2, [pc, #60]	; (80003e8 <setT1+0x98>)
 80003aa:	8851      	ldrh	r1, [r2, #2]
 80003ac:	2201      	movs	r2, #1
 80003ae:	4618      	mov	r0, r3
 80003b0:	f001 fe7f 	bl	80020b2 <HAL_GPIO_WritePin>
		break;
 80003b4:	e011      	b.n	80003da <setT1+0x8a>
		HAL_GPIO_WritePin(LED_PORT[0], LED_PIN[0], 0);
 80003b6:	4b0b      	ldr	r3, [pc, #44]	; (80003e4 <setT1+0x94>)
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	4a0b      	ldr	r2, [pc, #44]	; (80003e8 <setT1+0x98>)
 80003bc:	8811      	ldrh	r1, [r2, #0]
 80003be:	2200      	movs	r2, #0
 80003c0:	4618      	mov	r0, r3
 80003c2:	f001 fe76 	bl	80020b2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_PORT[1], LED_PIN[1], 1);
 80003c6:	4b07      	ldr	r3, [pc, #28]	; (80003e4 <setT1+0x94>)
 80003c8:	685b      	ldr	r3, [r3, #4]
 80003ca:	4a07      	ldr	r2, [pc, #28]	; (80003e8 <setT1+0x98>)
 80003cc:	8851      	ldrh	r1, [r2, #2]
 80003ce:	2201      	movs	r2, #1
 80003d0:	4618      	mov	r0, r3
 80003d2:	f001 fe6e 	bl	80020b2 <HAL_GPIO_WritePin>
		break;
 80003d6:	e000      	b.n	80003da <setT1+0x8a>
		break;
 80003d8:	bf00      	nop
	}
}
 80003da:	bf00      	nop
 80003dc:	3708      	adds	r7, #8
 80003de:	46bd      	mov	sp, r7
 80003e0:	bd80      	pop	{r7, pc}
 80003e2:	bf00      	nop
 80003e4:	20000064 	.word	0x20000064
 80003e8:	20000058 	.word	0x20000058

080003ec <setT2>:
void setT2(int color) {
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b082      	sub	sp, #8
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	6078      	str	r0, [r7, #4]
	switch (color) {
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	2b20      	cmp	r3, #32
 80003f8:	d02b      	beq.n	8000452 <setT2+0x66>
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	2b20      	cmp	r3, #32
 80003fe:	dc39      	bgt.n	8000474 <setT2+0x88>
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	2b1e      	cmp	r3, #30
 8000404:	d003      	beq.n	800040e <setT2+0x22>
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	2b1f      	cmp	r3, #31
 800040a:	d011      	beq.n	8000430 <setT2+0x44>
	case GREEN:
		HAL_GPIO_WritePin(LED_PORT[2], LED_PIN[2], 0);
		HAL_GPIO_WritePin(LED_PORT[3], LED_PIN[3], 1);
		break;
	default:
		break;
 800040c:	e032      	b.n	8000474 <setT2+0x88>
		HAL_GPIO_WritePin(LED_PORT[2], LED_PIN[2], 1);
 800040e:	4b1c      	ldr	r3, [pc, #112]	; (8000480 <setT2+0x94>)
 8000410:	689b      	ldr	r3, [r3, #8]
 8000412:	4a1c      	ldr	r2, [pc, #112]	; (8000484 <setT2+0x98>)
 8000414:	8891      	ldrh	r1, [r2, #4]
 8000416:	2201      	movs	r2, #1
 8000418:	4618      	mov	r0, r3
 800041a:	f001 fe4a 	bl	80020b2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_PORT[3], LED_PIN[3], 0);
 800041e:	4b18      	ldr	r3, [pc, #96]	; (8000480 <setT2+0x94>)
 8000420:	68db      	ldr	r3, [r3, #12]
 8000422:	4a18      	ldr	r2, [pc, #96]	; (8000484 <setT2+0x98>)
 8000424:	88d1      	ldrh	r1, [r2, #6]
 8000426:	2200      	movs	r2, #0
 8000428:	4618      	mov	r0, r3
 800042a:	f001 fe42 	bl	80020b2 <HAL_GPIO_WritePin>
		break;
 800042e:	e022      	b.n	8000476 <setT2+0x8a>
		HAL_GPIO_WritePin(LED_PORT[2], LED_PIN[2], 1);
 8000430:	4b13      	ldr	r3, [pc, #76]	; (8000480 <setT2+0x94>)
 8000432:	689b      	ldr	r3, [r3, #8]
 8000434:	4a13      	ldr	r2, [pc, #76]	; (8000484 <setT2+0x98>)
 8000436:	8891      	ldrh	r1, [r2, #4]
 8000438:	2201      	movs	r2, #1
 800043a:	4618      	mov	r0, r3
 800043c:	f001 fe39 	bl	80020b2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_PORT[3], LED_PIN[3], 1);
 8000440:	4b0f      	ldr	r3, [pc, #60]	; (8000480 <setT2+0x94>)
 8000442:	68db      	ldr	r3, [r3, #12]
 8000444:	4a0f      	ldr	r2, [pc, #60]	; (8000484 <setT2+0x98>)
 8000446:	88d1      	ldrh	r1, [r2, #6]
 8000448:	2201      	movs	r2, #1
 800044a:	4618      	mov	r0, r3
 800044c:	f001 fe31 	bl	80020b2 <HAL_GPIO_WritePin>
		break;
 8000450:	e011      	b.n	8000476 <setT2+0x8a>
		HAL_GPIO_WritePin(LED_PORT[2], LED_PIN[2], 0);
 8000452:	4b0b      	ldr	r3, [pc, #44]	; (8000480 <setT2+0x94>)
 8000454:	689b      	ldr	r3, [r3, #8]
 8000456:	4a0b      	ldr	r2, [pc, #44]	; (8000484 <setT2+0x98>)
 8000458:	8891      	ldrh	r1, [r2, #4]
 800045a:	2200      	movs	r2, #0
 800045c:	4618      	mov	r0, r3
 800045e:	f001 fe28 	bl	80020b2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_PORT[3], LED_PIN[3], 1);
 8000462:	4b07      	ldr	r3, [pc, #28]	; (8000480 <setT2+0x94>)
 8000464:	68db      	ldr	r3, [r3, #12]
 8000466:	4a07      	ldr	r2, [pc, #28]	; (8000484 <setT2+0x98>)
 8000468:	88d1      	ldrh	r1, [r2, #6]
 800046a:	2201      	movs	r2, #1
 800046c:	4618      	mov	r0, r3
 800046e:	f001 fe20 	bl	80020b2 <HAL_GPIO_WritePin>
		break;
 8000472:	e000      	b.n	8000476 <setT2+0x8a>
		break;
 8000474:	bf00      	nop
	}
}
 8000476:	bf00      	nop
 8000478:	3708      	adds	r7, #8
 800047a:	46bd      	mov	sp, r7
 800047c:	bd80      	pop	{r7, pc}
 800047e:	bf00      	nop
 8000480:	20000064 	.word	0x20000064
 8000484:	20000058 	.word	0x20000058

08000488 <send7SEG>:

void send7SEG(int TIME,int color){
 8000488:	b580      	push	{r7, lr}
 800048a:	b082      	sub	sp, #8
 800048c:	af00      	add	r7, sp, #0
 800048e:	6078      	str	r0, [r7, #4]
 8000490:	6039      	str	r1, [r7, #0]
	if (color==RED){
 8000492:	683b      	ldr	r3, [r7, #0]
 8000494:	2b1e      	cmp	r3, #30
 8000496:	d10b      	bne.n	80004b0 <send7SEG+0x28>
		sprintf(st, "!R %d#\r\n", TIME/100);
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	4a19      	ldr	r2, [pc, #100]	; (8000500 <send7SEG+0x78>)
 800049c:	fb82 1203 	smull	r1, r2, r2, r3
 80004a0:	1152      	asrs	r2, r2, #5
 80004a2:	17db      	asrs	r3, r3, #31
 80004a4:	1ad3      	subs	r3, r2, r3
 80004a6:	461a      	mov	r2, r3
 80004a8:	4916      	ldr	r1, [pc, #88]	; (8000504 <send7SEG+0x7c>)
 80004aa:	4817      	ldr	r0, [pc, #92]	; (8000508 <send7SEG+0x80>)
 80004ac:	f003 fd96 	bl	8003fdc <siprintf>
	}
	if (color==GREEN){
 80004b0:	683b      	ldr	r3, [r7, #0]
 80004b2:	2b20      	cmp	r3, #32
 80004b4:	d10b      	bne.n	80004ce <send7SEG+0x46>
		sprintf(st, "!G %d#\r\n", TIME/100);
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	4a11      	ldr	r2, [pc, #68]	; (8000500 <send7SEG+0x78>)
 80004ba:	fb82 1203 	smull	r1, r2, r2, r3
 80004be:	1152      	asrs	r2, r2, #5
 80004c0:	17db      	asrs	r3, r3, #31
 80004c2:	1ad3      	subs	r3, r2, r3
 80004c4:	461a      	mov	r2, r3
 80004c6:	4911      	ldr	r1, [pc, #68]	; (800050c <send7SEG+0x84>)
 80004c8:	480f      	ldr	r0, [pc, #60]	; (8000508 <send7SEG+0x80>)
 80004ca:	f003 fd87 	bl	8003fdc <siprintf>
	}
	if (color==YELLOW){
 80004ce:	683b      	ldr	r3, [r7, #0]
 80004d0:	2b1f      	cmp	r3, #31
 80004d2:	d10b      	bne.n	80004ec <send7SEG+0x64>
		sprintf(st, "!Y %d#\r\n", TIME/100);
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	4a0a      	ldr	r2, [pc, #40]	; (8000500 <send7SEG+0x78>)
 80004d8:	fb82 1203 	smull	r1, r2, r2, r3
 80004dc:	1152      	asrs	r2, r2, #5
 80004de:	17db      	asrs	r3, r3, #31
 80004e0:	1ad3      	subs	r3, r2, r3
 80004e2:	461a      	mov	r2, r3
 80004e4:	490a      	ldr	r1, [pc, #40]	; (8000510 <send7SEG+0x88>)
 80004e6:	4808      	ldr	r0, [pc, #32]	; (8000508 <send7SEG+0x80>)
 80004e8:	f003 fd78 	bl	8003fdc <siprintf>
	}
	HAL_UART_Transmit_IT(&huart2, (void*)st, sizeof(st));
 80004ec:	2232      	movs	r2, #50	; 0x32
 80004ee:	4906      	ldr	r1, [pc, #24]	; (8000508 <send7SEG+0x80>)
 80004f0:	4808      	ldr	r0, [pc, #32]	; (8000514 <send7SEG+0x8c>)
 80004f2:	f003 f956 	bl	80037a2 <HAL_UART_Transmit_IT>

}
 80004f6:	bf00      	nop
 80004f8:	3708      	adds	r7, #8
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bd80      	pop	{r7, pc}
 80004fe:	bf00      	nop
 8000500:	51eb851f 	.word	0x51eb851f
 8000504:	08004868 	.word	0x08004868
 8000508:	200001cc 	.word	0x200001cc
 800050c:	08004874 	.word	0x08004874
 8000510:	08004880 	.word	0x08004880
 8000514:	20000184 	.word	0x20000184

08000518 <fsm_automatic_run>:
void fsm_automatic_run(){
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
	switch(status){
 800051c:	4bae      	ldr	r3, [pc, #696]	; (80007d8 <fsm_automatic_run+0x2c0>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	3b0a      	subs	r3, #10
 8000522:	2b06      	cmp	r3, #6
 8000524:	f200 8231 	bhi.w	800098a <fsm_automatic_run+0x472>
 8000528:	a201      	add	r2, pc, #4	; (adr r2, 8000530 <fsm_automatic_run+0x18>)
 800052a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800052e:	bf00      	nop
 8000530:	0800054d 	.word	0x0800054d
 8000534:	0800098b 	.word	0x0800098b
 8000538:	0800098b 	.word	0x0800098b
 800053c:	08000595 	.word	0x08000595
 8000540:	08000667 	.word	0x08000667
 8000544:	08000785 	.word	0x08000785
 8000548:	0800089f 	.word	0x0800089f
	case INIT_AUTO:
		setT1(RED);
 800054c:	201e      	movs	r0, #30
 800054e:	f7ff feff 	bl	8000350 <setT1>
		setT2(GREEN);
 8000552:	2020      	movs	r0, #32
 8000554:	f7ff ff4a 	bl	80003ec <setT2>
		setTimer(4, 100);
 8000558:	2164      	movs	r1, #100	; 0x64
 800055a:	2004      	movs	r0, #4
 800055c:	f001 f808 	bl	8001570 <setTimer>
		count=TIME_RED;
 8000560:	4b9e      	ldr	r3, [pc, #632]	; (80007dc <fsm_automatic_run+0x2c4>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	4a9e      	ldr	r2, [pc, #632]	; (80007e0 <fsm_automatic_run+0x2c8>)
 8000566:	6013      	str	r3, [r2, #0]
		send7SEG(TIME_RED,RED);
 8000568:	4b9c      	ldr	r3, [pc, #624]	; (80007dc <fsm_automatic_run+0x2c4>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	211e      	movs	r1, #30
 800056e:	4618      	mov	r0, r3
 8000570:	f7ff ff8a 	bl	8000488 <send7SEG>
		setTimer(0, TIME_RED);
 8000574:	4b99      	ldr	r3, [pc, #612]	; (80007dc <fsm_automatic_run+0x2c4>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	4619      	mov	r1, r3
 800057a:	2000      	movs	r0, #0
 800057c:	f000 fff8 	bl	8001570 <setTimer>
		setTimer(1, TIME_GREEN);
 8000580:	4b98      	ldr	r3, [pc, #608]	; (80007e4 <fsm_automatic_run+0x2cc>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4619      	mov	r1, r3
 8000586:	2001      	movs	r0, #1
 8000588:	f000 fff2 	bl	8001570 <setTimer>
		if(IS_PEDESTRIAN==1){
			//HAL_GPIO_WritePin(GPIOA,D12_Pin, RESET);
			//setTimer(3, time_Pedestrian_Buzzer);
		}
		status=RG;
 800058c:	4b92      	ldr	r3, [pc, #584]	; (80007d8 <fsm_automatic_run+0x2c0>)
 800058e:	220d      	movs	r2, #13
 8000590:	601a      	str	r2, [r3, #0]
		break;
 8000592:	e203      	b.n	800099c <fsm_automatic_run+0x484>
	case RG:
		if(timer_flag[4]==1){
 8000594:	4b94      	ldr	r3, [pc, #592]	; (80007e8 <fsm_automatic_run+0x2d0>)
 8000596:	691b      	ldr	r3, [r3, #16]
 8000598:	2b01      	cmp	r3, #1
 800059a:	d10e      	bne.n	80005ba <fsm_automatic_run+0xa2>
			count-=100;
 800059c:	4b90      	ldr	r3, [pc, #576]	; (80007e0 <fsm_automatic_run+0x2c8>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	3b64      	subs	r3, #100	; 0x64
 80005a2:	4a8f      	ldr	r2, [pc, #572]	; (80007e0 <fsm_automatic_run+0x2c8>)
 80005a4:	6013      	str	r3, [r2, #0]
			send7SEG(count,RED);
 80005a6:	4b8e      	ldr	r3, [pc, #568]	; (80007e0 <fsm_automatic_run+0x2c8>)
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	211e      	movs	r1, #30
 80005ac:	4618      	mov	r0, r3
 80005ae:	f7ff ff6b 	bl	8000488 <send7SEG>
			setTimer(4, 100);
 80005b2:	2164      	movs	r1, #100	; 0x64
 80005b4:	2004      	movs	r0, #4
 80005b6:	f000 ffdb 	bl	8001570 <setTimer>
		}
		if(timer_flag[3]==1)
 80005ba:	4b8b      	ldr	r3, [pc, #556]	; (80007e8 <fsm_automatic_run+0x2d0>)
 80005bc:	68db      	ldr	r3, [r3, #12]
 80005be:	2b01      	cmp	r3, #1
 80005c0:	d106      	bne.n	80005d0 <fsm_automatic_run+0xb8>
			//HAL_GPIO_WritePin(GPIOA	,D12_Pin, SET);
		if(timer_flag[2]==1)
 80005c2:	4b89      	ldr	r3, [pc, #548]	; (80007e8 <fsm_automatic_run+0x2d0>)
 80005c4:	689b      	ldr	r3, [r3, #8]
 80005c6:	2b01      	cmp	r3, #1
 80005c8:	d102      	bne.n	80005d0 <fsm_automatic_run+0xb8>
			IS_PEDESTRIAN=0;
 80005ca:	4b88      	ldr	r3, [pc, #544]	; (80007ec <fsm_automatic_run+0x2d4>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	601a      	str	r2, [r3, #0]
		if(IS_PEDESTRIAN==1){
 80005d0:	4b86      	ldr	r3, [pc, #536]	; (80007ec <fsm_automatic_run+0x2d4>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	2b01      	cmp	r3, #1
 80005d6:	d103      	bne.n	80005e0 <fsm_automatic_run+0xc8>
			setPedestrianLight(GREEN);
 80005d8:	2020      	movs	r0, #32
 80005da:	f7ff fe5b 	bl	8000294 <setPedestrianLight>
 80005de:	e002      	b.n	80005e6 <fsm_automatic_run+0xce>
		}else
			setPedestrianLight(0);
 80005e0:	2000      	movs	r0, #0
 80005e2:	f7ff fe57 	bl	8000294 <setPedestrianLight>
		if(timer_flag[1]==1){
 80005e6:	4b80      	ldr	r3, [pc, #512]	; (80007e8 <fsm_automatic_run+0x2d0>)
 80005e8:	685b      	ldr	r3, [r3, #4]
 80005ea:	2b01      	cmp	r3, #1
 80005ec:	d10c      	bne.n	8000608 <fsm_automatic_run+0xf0>
			setTimer(1, TIME_YELLOW);
 80005ee:	4b80      	ldr	r3, [pc, #512]	; (80007f0 <fsm_automatic_run+0x2d8>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	4619      	mov	r1, r3
 80005f4:	2001      	movs	r0, #1
 80005f6:	f000 ffbb 	bl	8001570 <setTimer>
			setTimer(4, 100);
 80005fa:	2164      	movs	r1, #100	; 0x64
 80005fc:	2004      	movs	r0, #4
 80005fe:	f000 ffb7 	bl	8001570 <setTimer>
			status=RY;
 8000602:	4b75      	ldr	r3, [pc, #468]	; (80007d8 <fsm_automatic_run+0x2c0>)
 8000604:	220e      	movs	r2, #14
 8000606:	601a      	str	r2, [r3, #0]
		}
		if(isButtonPress(0)==1){
 8000608:	2000      	movs	r0, #0
 800060a:	f7ff fd9f 	bl	800014c <isButtonPress>
 800060e:	4603      	mov	r3, r0
 8000610:	2b01      	cmp	r3, #1
 8000612:	d108      	bne.n	8000626 <fsm_automatic_run+0x10e>
			IS_PEDESTRIAN=1;
 8000614:	4b75      	ldr	r3, [pc, #468]	; (80007ec <fsm_automatic_run+0x2d4>)
 8000616:	2201      	movs	r2, #1
 8000618:	601a      	str	r2, [r3, #0]
			setTimer(2, time_Pedestrian);
 800061a:	4b76      	ldr	r3, [pc, #472]	; (80007f4 <fsm_automatic_run+0x2dc>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	4619      	mov	r1, r3
 8000620:	2002      	movs	r0, #2
 8000622:	f000 ffa5 	bl	8001570 <setTimer>
		}
		if(isButtonPress(2)==1){
 8000626:	2002      	movs	r0, #2
 8000628:	f7ff fd90 	bl	800014c <isButtonPress>
 800062c:	4603      	mov	r3, r0
 800062e:	2b01      	cmp	r3, #1
 8000630:	d105      	bne.n	800063e <fsm_automatic_run+0x126>
			status=INIT_MANUAL;
 8000632:	4b69      	ldr	r3, [pc, #420]	; (80007d8 <fsm_automatic_run+0x2c0>)
 8000634:	220b      	movs	r2, #11
 8000636:	601a      	str	r2, [r3, #0]
			setPedestrianLight(0);
 8000638:	2000      	movs	r0, #0
 800063a:	f7ff fe2b 	bl	8000294 <setPedestrianLight>
		}
		if(isButtonPress(3)==1){
 800063e:	2003      	movs	r0, #3
 8000640:	f7ff fd84 	bl	800014c <isButtonPress>
 8000644:	4603      	mov	r3, r0
 8000646:	2b01      	cmp	r3, #1
 8000648:	f040 81a1 	bne.w	800098e <fsm_automatic_run+0x476>
			status=INIT_TUNING;
 800064c:	4b62      	ldr	r3, [pc, #392]	; (80007d8 <fsm_automatic_run+0x2c0>)
 800064e:	220c      	movs	r2, #12
 8000650:	601a      	str	r2, [r3, #0]
			setTimer(5, time_Tuning_mode);
 8000652:	4b69      	ldr	r3, [pc, #420]	; (80007f8 <fsm_automatic_run+0x2e0>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	4619      	mov	r1, r3
 8000658:	2005      	movs	r0, #5
 800065a:	f000 ff89 	bl	8001570 <setTimer>
			setPedestrianLight(0);
 800065e:	2000      	movs	r0, #0
 8000660:	f7ff fe18 	bl	8000294 <setPedestrianLight>
		}
		break;
 8000664:	e193      	b.n	800098e <fsm_automatic_run+0x476>
	case RY:
		if(timer_flag[4]==1){
 8000666:	4b60      	ldr	r3, [pc, #384]	; (80007e8 <fsm_automatic_run+0x2d0>)
 8000668:	691b      	ldr	r3, [r3, #16]
 800066a:	2b01      	cmp	r3, #1
 800066c:	d116      	bne.n	800069c <fsm_automatic_run+0x184>
			count-=100;
 800066e:	4b5c      	ldr	r3, [pc, #368]	; (80007e0 <fsm_automatic_run+0x2c8>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	3b64      	subs	r3, #100	; 0x64
 8000674:	4a5a      	ldr	r2, [pc, #360]	; (80007e0 <fsm_automatic_run+0x2c8>)
 8000676:	6013      	str	r3, [r2, #0]
			if(count==0)
 8000678:	4b59      	ldr	r3, [pc, #356]	; (80007e0 <fsm_automatic_run+0x2c8>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	2b00      	cmp	r3, #0
 800067e:	d103      	bne.n	8000688 <fsm_automatic_run+0x170>
				count=TIME_GREEN;
 8000680:	4b58      	ldr	r3, [pc, #352]	; (80007e4 <fsm_automatic_run+0x2cc>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a56      	ldr	r2, [pc, #344]	; (80007e0 <fsm_automatic_run+0x2c8>)
 8000686:	6013      	str	r3, [r2, #0]
			send7SEG(count,RED);
 8000688:	4b55      	ldr	r3, [pc, #340]	; (80007e0 <fsm_automatic_run+0x2c8>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	211e      	movs	r1, #30
 800068e:	4618      	mov	r0, r3
 8000690:	f7ff fefa 	bl	8000488 <send7SEG>
			setTimer(4, 100);
 8000694:	2164      	movs	r1, #100	; 0x64
 8000696:	2004      	movs	r0, #4
 8000698:	f000 ff6a 	bl	8001570 <setTimer>
		}
		setT1(RED);
 800069c:	201e      	movs	r0, #30
 800069e:	f7ff fe57 	bl	8000350 <setT1>
		setT2(YELLOW);
 80006a2:	201f      	movs	r0, #31
 80006a4:	f7ff fea2 	bl	80003ec <setT2>
		if(timer_flag[2]==1)
 80006a8:	4b4f      	ldr	r3, [pc, #316]	; (80007e8 <fsm_automatic_run+0x2d0>)
 80006aa:	689b      	ldr	r3, [r3, #8]
 80006ac:	2b01      	cmp	r3, #1
 80006ae:	d102      	bne.n	80006b6 <fsm_automatic_run+0x19e>
			IS_PEDESTRIAN=0;
 80006b0:	4b4e      	ldr	r3, [pc, #312]	; (80007ec <fsm_automatic_run+0x2d4>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	601a      	str	r2, [r3, #0]
		if(IS_PEDESTRIAN==1){
 80006b6:	4b4d      	ldr	r3, [pc, #308]	; (80007ec <fsm_automatic_run+0x2d4>)
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	2b01      	cmp	r3, #1
 80006bc:	d103      	bne.n	80006c6 <fsm_automatic_run+0x1ae>
			setPedestrianLight(YELLOW);
 80006be:	201f      	movs	r0, #31
 80006c0:	f7ff fde8 	bl	8000294 <setPedestrianLight>
 80006c4:	e002      	b.n	80006cc <fsm_automatic_run+0x1b4>
		}else
			setPedestrianLight(0);
 80006c6:	2000      	movs	r0, #0
 80006c8:	f7ff fde4 	bl	8000294 <setPedestrianLight>
		if(timer_flag[0]==1 && timer_flag[1]==1){
 80006cc:	4b46      	ldr	r3, [pc, #280]	; (80007e8 <fsm_automatic_run+0x2d0>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	2b01      	cmp	r3, #1
 80006d2:	d122      	bne.n	800071a <fsm_automatic_run+0x202>
 80006d4:	4b44      	ldr	r3, [pc, #272]	; (80007e8 <fsm_automatic_run+0x2d0>)
 80006d6:	685b      	ldr	r3, [r3, #4]
 80006d8:	2b01      	cmp	r3, #1
 80006da:	d11e      	bne.n	800071a <fsm_automatic_run+0x202>
			setT1(GREEN);
 80006dc:	2020      	movs	r0, #32
 80006de:	f7ff fe37 	bl	8000350 <setT1>
			setT2(RED);
 80006e2:	201e      	movs	r0, #30
 80006e4:	f7ff fe82 	bl	80003ec <setT2>
			setTimer(0, TIME_GREEN);
 80006e8:	4b3e      	ldr	r3, [pc, #248]	; (80007e4 <fsm_automatic_run+0x2cc>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	4619      	mov	r1, r3
 80006ee:	2000      	movs	r0, #0
 80006f0:	f000 ff3e 	bl	8001570 <setTimer>
			setTimer(1, TIME_RED);
 80006f4:	4b39      	ldr	r3, [pc, #228]	; (80007dc <fsm_automatic_run+0x2c4>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	4619      	mov	r1, r3
 80006fa:	2001      	movs	r0, #1
 80006fc:	f000 ff38 	bl	8001570 <setTimer>
			send7SEG(TIME_GREEN,GREEN);
 8000700:	4b38      	ldr	r3, [pc, #224]	; (80007e4 <fsm_automatic_run+0x2cc>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	2120      	movs	r1, #32
 8000706:	4618      	mov	r0, r3
 8000708:	f7ff febe 	bl	8000488 <send7SEG>
			setTimer(4, 100);
 800070c:	2164      	movs	r1, #100	; 0x64
 800070e:	2004      	movs	r0, #4
 8000710:	f000 ff2e 	bl	8001570 <setTimer>
			status=GR;
 8000714:	4b30      	ldr	r3, [pc, #192]	; (80007d8 <fsm_automatic_run+0x2c0>)
 8000716:	220f      	movs	r2, #15
 8000718:	601a      	str	r2, [r3, #0]
		}
		if(isButtonPress(0)==1){
 800071a:	2000      	movs	r0, #0
 800071c:	f7ff fd16 	bl	800014c <isButtonPress>
 8000720:	4603      	mov	r3, r0
 8000722:	2b01      	cmp	r3, #1
 8000724:	d108      	bne.n	8000738 <fsm_automatic_run+0x220>
			IS_PEDESTRIAN=1;
 8000726:	4b31      	ldr	r3, [pc, #196]	; (80007ec <fsm_automatic_run+0x2d4>)
 8000728:	2201      	movs	r2, #1
 800072a:	601a      	str	r2, [r3, #0]
			setTimer(2, time_Pedestrian);
 800072c:	4b31      	ldr	r3, [pc, #196]	; (80007f4 <fsm_automatic_run+0x2dc>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	4619      	mov	r1, r3
 8000732:	2002      	movs	r0, #2
 8000734:	f000 ff1c 	bl	8001570 <setTimer>
		}
		if(isButtonPress(2)==1){
 8000738:	2002      	movs	r0, #2
 800073a:	f7ff fd07 	bl	800014c <isButtonPress>
 800073e:	4603      	mov	r3, r0
 8000740:	2b01      	cmp	r3, #1
 8000742:	d10b      	bne.n	800075c <fsm_automatic_run+0x244>
			status=INIT_MANUAL;
 8000744:	4b24      	ldr	r3, [pc, #144]	; (80007d8 <fsm_automatic_run+0x2c0>)
 8000746:	220b      	movs	r2, #11
 8000748:	601a      	str	r2, [r3, #0]
			setPedestrianLight(0);
 800074a:	2000      	movs	r0, #0
 800074c:	f7ff fda2 	bl	8000294 <setPedestrianLight>
			setTimer(0, time_Manual_mode);
 8000750:	4b2a      	ldr	r3, [pc, #168]	; (80007fc <fsm_automatic_run+0x2e4>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	4619      	mov	r1, r3
 8000756:	2000      	movs	r0, #0
 8000758:	f000 ff0a 	bl	8001570 <setTimer>
		}
		if(isButtonPress(3)==1){
 800075c:	2003      	movs	r0, #3
 800075e:	f7ff fcf5 	bl	800014c <isButtonPress>
 8000762:	4603      	mov	r3, r0
 8000764:	2b01      	cmp	r3, #1
 8000766:	f040 8114 	bne.w	8000992 <fsm_automatic_run+0x47a>
			status=INIT_TUNING;
 800076a:	4b1b      	ldr	r3, [pc, #108]	; (80007d8 <fsm_automatic_run+0x2c0>)
 800076c:	220c      	movs	r2, #12
 800076e:	601a      	str	r2, [r3, #0]
			setTimer(5, time_Tuning_mode);
 8000770:	4b21      	ldr	r3, [pc, #132]	; (80007f8 <fsm_automatic_run+0x2e0>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	4619      	mov	r1, r3
 8000776:	2005      	movs	r0, #5
 8000778:	f000 fefa 	bl	8001570 <setTimer>
			setPedestrianLight(0);
 800077c:	2000      	movs	r0, #0
 800077e:	f7ff fd89 	bl	8000294 <setPedestrianLight>
		}
		break;
 8000782:	e106      	b.n	8000992 <fsm_automatic_run+0x47a>
	case GR:
		if(timer_flag[4]==1){
 8000784:	4b18      	ldr	r3, [pc, #96]	; (80007e8 <fsm_automatic_run+0x2d0>)
 8000786:	691b      	ldr	r3, [r3, #16]
 8000788:	2b01      	cmp	r3, #1
 800078a:	d116      	bne.n	80007ba <fsm_automatic_run+0x2a2>
			count-=100;
 800078c:	4b14      	ldr	r3, [pc, #80]	; (80007e0 <fsm_automatic_run+0x2c8>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	3b64      	subs	r3, #100	; 0x64
 8000792:	4a13      	ldr	r2, [pc, #76]	; (80007e0 <fsm_automatic_run+0x2c8>)
 8000794:	6013      	str	r3, [r2, #0]
			if(count==0)
 8000796:	4b12      	ldr	r3, [pc, #72]	; (80007e0 <fsm_automatic_run+0x2c8>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	2b00      	cmp	r3, #0
 800079c:	d103      	bne.n	80007a6 <fsm_automatic_run+0x28e>
				count=TIME_YELLOW;
 800079e:	4b14      	ldr	r3, [pc, #80]	; (80007f0 <fsm_automatic_run+0x2d8>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	4a0f      	ldr	r2, [pc, #60]	; (80007e0 <fsm_automatic_run+0x2c8>)
 80007a4:	6013      	str	r3, [r2, #0]
			send7SEG(count,GREEN);
 80007a6:	4b0e      	ldr	r3, [pc, #56]	; (80007e0 <fsm_automatic_run+0x2c8>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	2120      	movs	r1, #32
 80007ac:	4618      	mov	r0, r3
 80007ae:	f7ff fe6b 	bl	8000488 <send7SEG>
			setTimer(4, 100);
 80007b2:	2164      	movs	r1, #100	; 0x64
 80007b4:	2004      	movs	r0, #4
 80007b6:	f000 fedb 	bl	8001570 <setTimer>
		}
		if(timer_flag[2]==1)
 80007ba:	4b0b      	ldr	r3, [pc, #44]	; (80007e8 <fsm_automatic_run+0x2d0>)
 80007bc:	689b      	ldr	r3, [r3, #8]
 80007be:	2b01      	cmp	r3, #1
 80007c0:	d102      	bne.n	80007c8 <fsm_automatic_run+0x2b0>
			IS_PEDESTRIAN=0;
 80007c2:	4b0a      	ldr	r3, [pc, #40]	; (80007ec <fsm_automatic_run+0x2d4>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	601a      	str	r2, [r3, #0]
		if(IS_PEDESTRIAN==1){
 80007c8:	4b08      	ldr	r3, [pc, #32]	; (80007ec <fsm_automatic_run+0x2d4>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	2b01      	cmp	r3, #1
 80007ce:	d117      	bne.n	8000800 <fsm_automatic_run+0x2e8>
			setPedestrianLight(RED);
 80007d0:	201e      	movs	r0, #30
 80007d2:	f7ff fd5f 	bl	8000294 <setPedestrianLight>
 80007d6:	e016      	b.n	8000806 <fsm_automatic_run+0x2ee>
 80007d8:	2000007c 	.word	0x2000007c
 80007dc:	20000090 	.word	0x20000090
 80007e0:	200001c8 	.word	0x200001c8
 80007e4:	20000098 	.word	0x20000098
 80007e8:	20000148 	.word	0x20000148
 80007ec:	20000144 	.word	0x20000144
 80007f0:	20000094 	.word	0x20000094
 80007f4:	2000009c 	.word	0x2000009c
 80007f8:	200000a4 	.word	0x200000a4
 80007fc:	200000a0 	.word	0x200000a0
		}else
			setPedestrianLight(0);
 8000800:	2000      	movs	r0, #0
 8000802:	f7ff fd47 	bl	8000294 <setPedestrianLight>
		if(timer_flag[0]==1){
 8000806:	4b66      	ldr	r3, [pc, #408]	; (80009a0 <fsm_automatic_run+0x488>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	2b01      	cmp	r3, #1
 800080c:	d112      	bne.n	8000834 <fsm_automatic_run+0x31c>
			setTimer(0, TIME_YELLOW);
 800080e:	4b65      	ldr	r3, [pc, #404]	; (80009a4 <fsm_automatic_run+0x48c>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	4619      	mov	r1, r3
 8000814:	2000      	movs	r0, #0
 8000816:	f000 feab 	bl	8001570 <setTimer>
			send7SEG(TIME_YELLOW,YELLOW);
 800081a:	4b62      	ldr	r3, [pc, #392]	; (80009a4 <fsm_automatic_run+0x48c>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	211f      	movs	r1, #31
 8000820:	4618      	mov	r0, r3
 8000822:	f7ff fe31 	bl	8000488 <send7SEG>
			setTimer(4, 100);
 8000826:	2164      	movs	r1, #100	; 0x64
 8000828:	2004      	movs	r0, #4
 800082a:	f000 fea1 	bl	8001570 <setTimer>
			status=YR;
 800082e:	4b5e      	ldr	r3, [pc, #376]	; (80009a8 <fsm_automatic_run+0x490>)
 8000830:	2210      	movs	r2, #16
 8000832:	601a      	str	r2, [r3, #0]

		}
		if(isButtonPress(0)==1){
 8000834:	2000      	movs	r0, #0
 8000836:	f7ff fc89 	bl	800014c <isButtonPress>
 800083a:	4603      	mov	r3, r0
 800083c:	2b01      	cmp	r3, #1
 800083e:	d108      	bne.n	8000852 <fsm_automatic_run+0x33a>
			IS_PEDESTRIAN=1;
 8000840:	4b5a      	ldr	r3, [pc, #360]	; (80009ac <fsm_automatic_run+0x494>)
 8000842:	2201      	movs	r2, #1
 8000844:	601a      	str	r2, [r3, #0]
			setTimer(2, time_Pedestrian);
 8000846:	4b5a      	ldr	r3, [pc, #360]	; (80009b0 <fsm_automatic_run+0x498>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	4619      	mov	r1, r3
 800084c:	2002      	movs	r0, #2
 800084e:	f000 fe8f 	bl	8001570 <setTimer>
		}
		if(isButtonPress(2)==1){
 8000852:	2002      	movs	r0, #2
 8000854:	f7ff fc7a 	bl	800014c <isButtonPress>
 8000858:	4603      	mov	r3, r0
 800085a:	2b01      	cmp	r3, #1
 800085c:	d10b      	bne.n	8000876 <fsm_automatic_run+0x35e>
			status=INIT_MANUAL;
 800085e:	4b52      	ldr	r3, [pc, #328]	; (80009a8 <fsm_automatic_run+0x490>)
 8000860:	220b      	movs	r2, #11
 8000862:	601a      	str	r2, [r3, #0]
			setPedestrianLight(0);
 8000864:	2000      	movs	r0, #0
 8000866:	f7ff fd15 	bl	8000294 <setPedestrianLight>
			setTimer(0, time_Manual_mode);
 800086a:	4b52      	ldr	r3, [pc, #328]	; (80009b4 <fsm_automatic_run+0x49c>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	4619      	mov	r1, r3
 8000870:	2000      	movs	r0, #0
 8000872:	f000 fe7d 	bl	8001570 <setTimer>
		}
		if(isButtonPress(3)==1){
 8000876:	2003      	movs	r0, #3
 8000878:	f7ff fc68 	bl	800014c <isButtonPress>
 800087c:	4603      	mov	r3, r0
 800087e:	2b01      	cmp	r3, #1
 8000880:	f040 8089 	bne.w	8000996 <fsm_automatic_run+0x47e>
			status=INIT_TUNING;
 8000884:	4b48      	ldr	r3, [pc, #288]	; (80009a8 <fsm_automatic_run+0x490>)
 8000886:	220c      	movs	r2, #12
 8000888:	601a      	str	r2, [r3, #0]
			setTimer(5, time_Tuning_mode);
 800088a:	4b4b      	ldr	r3, [pc, #300]	; (80009b8 <fsm_automatic_run+0x4a0>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	4619      	mov	r1, r3
 8000890:	2005      	movs	r0, #5
 8000892:	f000 fe6d 	bl	8001570 <setTimer>
			setPedestrianLight(0);
 8000896:	2000      	movs	r0, #0
 8000898:	f7ff fcfc 	bl	8000294 <setPedestrianLight>
		}
		break;
 800089c:	e07b      	b.n	8000996 <fsm_automatic_run+0x47e>
	case YR:
		if(timer_flag[4]==1){
 800089e:	4b40      	ldr	r3, [pc, #256]	; (80009a0 <fsm_automatic_run+0x488>)
 80008a0:	691b      	ldr	r3, [r3, #16]
 80008a2:	2b01      	cmp	r3, #1
 80008a4:	d116      	bne.n	80008d4 <fsm_automatic_run+0x3bc>
			count-=100;
 80008a6:	4b45      	ldr	r3, [pc, #276]	; (80009bc <fsm_automatic_run+0x4a4>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	3b64      	subs	r3, #100	; 0x64
 80008ac:	4a43      	ldr	r2, [pc, #268]	; (80009bc <fsm_automatic_run+0x4a4>)
 80008ae:	6013      	str	r3, [r2, #0]
			if(count==0)
 80008b0:	4b42      	ldr	r3, [pc, #264]	; (80009bc <fsm_automatic_run+0x4a4>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d103      	bne.n	80008c0 <fsm_automatic_run+0x3a8>
				count=TIME_RED;
 80008b8:	4b41      	ldr	r3, [pc, #260]	; (80009c0 <fsm_automatic_run+0x4a8>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	4a3f      	ldr	r2, [pc, #252]	; (80009bc <fsm_automatic_run+0x4a4>)
 80008be:	6013      	str	r3, [r2, #0]
			send7SEG(count,YELLOW);
 80008c0:	4b3e      	ldr	r3, [pc, #248]	; (80009bc <fsm_automatic_run+0x4a4>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	211f      	movs	r1, #31
 80008c6:	4618      	mov	r0, r3
 80008c8:	f7ff fdde 	bl	8000488 <send7SEG>
			setTimer(4, 100);
 80008cc:	2164      	movs	r1, #100	; 0x64
 80008ce:	2004      	movs	r0, #4
 80008d0:	f000 fe4e 	bl	8001570 <setTimer>
		}
		setT1(YELLOW);
 80008d4:	201f      	movs	r0, #31
 80008d6:	f7ff fd3b 	bl	8000350 <setT1>
		setT2(RED);
 80008da:	201e      	movs	r0, #30
 80008dc:	f7ff fd86 	bl	80003ec <setT2>
		if(timer_flag[2]==1)
 80008e0:	4b2f      	ldr	r3, [pc, #188]	; (80009a0 <fsm_automatic_run+0x488>)
 80008e2:	689b      	ldr	r3, [r3, #8]
 80008e4:	2b01      	cmp	r3, #1
 80008e6:	d102      	bne.n	80008ee <fsm_automatic_run+0x3d6>
			IS_PEDESTRIAN=0;
 80008e8:	4b30      	ldr	r3, [pc, #192]	; (80009ac <fsm_automatic_run+0x494>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	601a      	str	r2, [r3, #0]
		if(IS_PEDESTRIAN==1){
 80008ee:	4b2f      	ldr	r3, [pc, #188]	; (80009ac <fsm_automatic_run+0x494>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	2b01      	cmp	r3, #1
 80008f4:	d103      	bne.n	80008fe <fsm_automatic_run+0x3e6>
			setPedestrianLight(RED);
 80008f6:	201e      	movs	r0, #30
 80008f8:	f7ff fccc 	bl	8000294 <setPedestrianLight>
 80008fc:	e002      	b.n	8000904 <fsm_automatic_run+0x3ec>
		}else
			setPedestrianLight(0);
 80008fe:	2000      	movs	r0, #0
 8000900:	f7ff fcc8 	bl	8000294 <setPedestrianLight>
		if(timer_flag[0]==1 && timer_flag[1]==1){
 8000904:	4b26      	ldr	r3, [pc, #152]	; (80009a0 <fsm_automatic_run+0x488>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	2b01      	cmp	r3, #1
 800090a:	d10a      	bne.n	8000922 <fsm_automatic_run+0x40a>
 800090c:	4b24      	ldr	r3, [pc, #144]	; (80009a0 <fsm_automatic_run+0x488>)
 800090e:	685b      	ldr	r3, [r3, #4]
 8000910:	2b01      	cmp	r3, #1
 8000912:	d106      	bne.n	8000922 <fsm_automatic_run+0x40a>
			status=INIT_AUTO;
 8000914:	4b24      	ldr	r3, [pc, #144]	; (80009a8 <fsm_automatic_run+0x490>)
 8000916:	220a      	movs	r2, #10
 8000918:	601a      	str	r2, [r3, #0]
			setTimer(4, 100);
 800091a:	2164      	movs	r1, #100	; 0x64
 800091c:	2004      	movs	r0, #4
 800091e:	f000 fe27 	bl	8001570 <setTimer>
		}
		if(isButtonPress(0)==1){
 8000922:	2000      	movs	r0, #0
 8000924:	f7ff fc12 	bl	800014c <isButtonPress>
 8000928:	4603      	mov	r3, r0
 800092a:	2b01      	cmp	r3, #1
 800092c:	d108      	bne.n	8000940 <fsm_automatic_run+0x428>
			IS_PEDESTRIAN=1;
 800092e:	4b1f      	ldr	r3, [pc, #124]	; (80009ac <fsm_automatic_run+0x494>)
 8000930:	2201      	movs	r2, #1
 8000932:	601a      	str	r2, [r3, #0]
			setTimer(2, time_Pedestrian);
 8000934:	4b1e      	ldr	r3, [pc, #120]	; (80009b0 <fsm_automatic_run+0x498>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4619      	mov	r1, r3
 800093a:	2002      	movs	r0, #2
 800093c:	f000 fe18 	bl	8001570 <setTimer>
		}
		if(isButtonPress(2)==1){
 8000940:	2002      	movs	r0, #2
 8000942:	f7ff fc03 	bl	800014c <isButtonPress>
 8000946:	4603      	mov	r3, r0
 8000948:	2b01      	cmp	r3, #1
 800094a:	d10b      	bne.n	8000964 <fsm_automatic_run+0x44c>
			status=INIT_MANUAL;
 800094c:	4b16      	ldr	r3, [pc, #88]	; (80009a8 <fsm_automatic_run+0x490>)
 800094e:	220b      	movs	r2, #11
 8000950:	601a      	str	r2, [r3, #0]
			setPedestrianLight(0);
 8000952:	2000      	movs	r0, #0
 8000954:	f7ff fc9e 	bl	8000294 <setPedestrianLight>
			setTimer(0, time_Manual_mode);
 8000958:	4b16      	ldr	r3, [pc, #88]	; (80009b4 <fsm_automatic_run+0x49c>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	4619      	mov	r1, r3
 800095e:	2000      	movs	r0, #0
 8000960:	f000 fe06 	bl	8001570 <setTimer>
		}
		if(isButtonPress(3)==1){
 8000964:	2003      	movs	r0, #3
 8000966:	f7ff fbf1 	bl	800014c <isButtonPress>
 800096a:	4603      	mov	r3, r0
 800096c:	2b01      	cmp	r3, #1
 800096e:	d114      	bne.n	800099a <fsm_automatic_run+0x482>
			status=INIT_TUNING;
 8000970:	4b0d      	ldr	r3, [pc, #52]	; (80009a8 <fsm_automatic_run+0x490>)
 8000972:	220c      	movs	r2, #12
 8000974:	601a      	str	r2, [r3, #0]
			setTimer(5, time_Tuning_mode);
 8000976:	4b10      	ldr	r3, [pc, #64]	; (80009b8 <fsm_automatic_run+0x4a0>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	4619      	mov	r1, r3
 800097c:	2005      	movs	r0, #5
 800097e:	f000 fdf7 	bl	8001570 <setTimer>
			setPedestrianLight(0);
 8000982:	2000      	movs	r0, #0
 8000984:	f7ff fc86 	bl	8000294 <setPedestrianLight>
		}
		break;
 8000988:	e007      	b.n	800099a <fsm_automatic_run+0x482>
	default:
		break;
 800098a:	bf00      	nop
 800098c:	e006      	b.n	800099c <fsm_automatic_run+0x484>
		break;
 800098e:	bf00      	nop
 8000990:	e004      	b.n	800099c <fsm_automatic_run+0x484>
		break;
 8000992:	bf00      	nop
 8000994:	e002      	b.n	800099c <fsm_automatic_run+0x484>
		break;
 8000996:	bf00      	nop
 8000998:	e000      	b.n	800099c <fsm_automatic_run+0x484>
		break;
 800099a:	bf00      	nop
	}
}
 800099c:	bf00      	nop
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	20000148 	.word	0x20000148
 80009a4:	20000094 	.word	0x20000094
 80009a8:	2000007c 	.word	0x2000007c
 80009ac:	20000144 	.word	0x20000144
 80009b0:	2000009c 	.word	0x2000009c
 80009b4:	200000a0 	.word	0x200000a0
 80009b8:	200000a4 	.word	0x200000a4
 80009bc:	200001c8 	.word	0x200001c8
 80009c0:	20000090 	.word	0x20000090

080009c4 <fsm_manual_run>:
void fsm_manual_run(){
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
	switch(status){
 80009c8:	4bba      	ldr	r3, [pc, #744]	; (8000cb4 <fsm_manual_run+0x2f0>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	3b0b      	subs	r3, #11
 80009ce:	2b0e      	cmp	r3, #14
 80009d0:	f200 827e 	bhi.w	8000ed0 <fsm_manual_run+0x50c>
 80009d4:	a201      	add	r2, pc, #4	; (adr r2, 80009dc <fsm_manual_run+0x18>)
 80009d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009da:	bf00      	nop
 80009dc:	08000a19 	.word	0x08000a19
 80009e0:	08000ed1 	.word	0x08000ed1
 80009e4:	08000ed1 	.word	0x08000ed1
 80009e8:	08000ed1 	.word	0x08000ed1
 80009ec:	08000ed1 	.word	0x08000ed1
 80009f0:	08000ed1 	.word	0x08000ed1
 80009f4:	08000a21 	.word	0x08000a21
 80009f8:	08000aa5 	.word	0x08000aa5
 80009fc:	08000b29 	.word	0x08000b29
 8000a00:	08000c31 	.word	0x08000c31
 8000a04:	08000cc5 	.word	0x08000cc5
 8000a08:	08000bad 	.word	0x08000bad
 8000a0c:	08000d49 	.word	0x08000d49
 8000a10:	08000dcd 	.word	0x08000dcd
 8000a14:	08000e4f 	.word	0x08000e4f
	case INIT_MANUAL:
		status=M_RR;
 8000a18:	4ba6      	ldr	r3, [pc, #664]	; (8000cb4 <fsm_manual_run+0x2f0>)
 8000a1a:	2211      	movs	r2, #17
 8000a1c:	601a      	str	r2, [r3, #0]
		break;
 8000a1e:	e26a      	b.n	8000ef6 <fsm_manual_run+0x532>
	case M_RR:
		if(timer_flag[0]==1 || isButtonPress(2)==1)
 8000a20:	4ba5      	ldr	r3, [pc, #660]	; (8000cb8 <fsm_manual_run+0x2f4>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	2b01      	cmp	r3, #1
 8000a26:	d005      	beq.n	8000a34 <fsm_manual_run+0x70>
 8000a28:	2002      	movs	r0, #2
 8000a2a:	f7ff fb8f 	bl	800014c <isButtonPress>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b01      	cmp	r3, #1
 8000a32:	d102      	bne.n	8000a3a <fsm_manual_run+0x76>
			status=INIT_AUTO;
 8000a34:	4b9f      	ldr	r3, [pc, #636]	; (8000cb4 <fsm_manual_run+0x2f0>)
 8000a36:	220a      	movs	r2, #10
 8000a38:	601a      	str	r2, [r3, #0]
		setT1(RED);
 8000a3a:	201e      	movs	r0, #30
 8000a3c:	f7ff fc88 	bl	8000350 <setT1>
		setT2(RED);
 8000a40:	201e      	movs	r0, #30
 8000a42:	f7ff fcd3 	bl	80003ec <setT2>
		if (isButtonPress(0)==1){
 8000a46:	2000      	movs	r0, #0
 8000a48:	f7ff fb80 	bl	800014c <isButtonPress>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b01      	cmp	r3, #1
 8000a50:	d108      	bne.n	8000a64 <fsm_manual_run+0xa0>
			status=M_GR;
 8000a52:	4b98      	ldr	r3, [pc, #608]	; (8000cb4 <fsm_manual_run+0x2f0>)
 8000a54:	2212      	movs	r2, #18
 8000a56:	601a      	str	r2, [r3, #0]
			setTimer(0, time_Manual_mode);
 8000a58:	4b98      	ldr	r3, [pc, #608]	; (8000cbc <fsm_manual_run+0x2f8>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	2000      	movs	r0, #0
 8000a60:	f000 fd86 	bl	8001570 <setTimer>
		}
		if (isButtonPress(1)==1){
 8000a64:	2001      	movs	r0, #1
 8000a66:	f7ff fb71 	bl	800014c <isButtonPress>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b01      	cmp	r3, #1
 8000a6e:	d108      	bne.n	8000a82 <fsm_manual_run+0xbe>
			status=M_RG;
 8000a70:	4b90      	ldr	r3, [pc, #576]	; (8000cb4 <fsm_manual_run+0x2f0>)
 8000a72:	2216      	movs	r2, #22
 8000a74:	601a      	str	r2, [r3, #0]
			setTimer(0, time_Manual_mode);
 8000a76:	4b91      	ldr	r3, [pc, #580]	; (8000cbc <fsm_manual_run+0x2f8>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	2000      	movs	r0, #0
 8000a7e:	f000 fd77 	bl	8001570 <setTimer>
		}
		if(isButtonPress(3)==1){
 8000a82:	2003      	movs	r0, #3
 8000a84:	f7ff fb62 	bl	800014c <isButtonPress>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b01      	cmp	r3, #1
 8000a8c:	f040 8222 	bne.w	8000ed4 <fsm_manual_run+0x510>
			status=INIT_TUNING;
 8000a90:	4b88      	ldr	r3, [pc, #544]	; (8000cb4 <fsm_manual_run+0x2f0>)
 8000a92:	220c      	movs	r2, #12
 8000a94:	601a      	str	r2, [r3, #0]
			setTimer(5, time_Tuning_mode);
 8000a96:	4b8a      	ldr	r3, [pc, #552]	; (8000cc0 <fsm_manual_run+0x2fc>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	2005      	movs	r0, #5
 8000a9e:	f000 fd67 	bl	8001570 <setTimer>
		}
		break;
 8000aa2:	e217      	b.n	8000ed4 <fsm_manual_run+0x510>
	case M_GR:
		if(timer_flag[0]==1 || isButtonPress(2)==1)
 8000aa4:	4b84      	ldr	r3, [pc, #528]	; (8000cb8 <fsm_manual_run+0x2f4>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	2b01      	cmp	r3, #1
 8000aaa:	d005      	beq.n	8000ab8 <fsm_manual_run+0xf4>
 8000aac:	2002      	movs	r0, #2
 8000aae:	f7ff fb4d 	bl	800014c <isButtonPress>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b01      	cmp	r3, #1
 8000ab6:	d102      	bne.n	8000abe <fsm_manual_run+0xfa>
			status=INIT_AUTO;
 8000ab8:	4b7e      	ldr	r3, [pc, #504]	; (8000cb4 <fsm_manual_run+0x2f0>)
 8000aba:	220a      	movs	r2, #10
 8000abc:	601a      	str	r2, [r3, #0]
		setT1(GREEN);
 8000abe:	2020      	movs	r0, #32
 8000ac0:	f7ff fc46 	bl	8000350 <setT1>
		setT2(RED);
 8000ac4:	201e      	movs	r0, #30
 8000ac6:	f7ff fc91 	bl	80003ec <setT2>
		if (isButtonPress(0)==1){
 8000aca:	2000      	movs	r0, #0
 8000acc:	f7ff fb3e 	bl	800014c <isButtonPress>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b01      	cmp	r3, #1
 8000ad4:	d108      	bne.n	8000ae8 <fsm_manual_run+0x124>
			status=M_YR;
 8000ad6:	4b77      	ldr	r3, [pc, #476]	; (8000cb4 <fsm_manual_run+0x2f0>)
 8000ad8:	2213      	movs	r2, #19
 8000ada:	601a      	str	r2, [r3, #0]
			setTimer(0, time_Manual_mode);
 8000adc:	4b77      	ldr	r3, [pc, #476]	; (8000cbc <fsm_manual_run+0x2f8>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	2000      	movs	r0, #0
 8000ae4:	f000 fd44 	bl	8001570 <setTimer>
		}
		if (isButtonPress(1)==1){
 8000ae8:	2001      	movs	r0, #1
 8000aea:	f7ff fb2f 	bl	800014c <isButtonPress>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b01      	cmp	r3, #1
 8000af2:	d108      	bne.n	8000b06 <fsm_manual_run+0x142>
			status=M_GG;
 8000af4:	4b6f      	ldr	r3, [pc, #444]	; (8000cb4 <fsm_manual_run+0x2f0>)
 8000af6:	2214      	movs	r2, #20
 8000af8:	601a      	str	r2, [r3, #0]
			setTimer(0, time_Manual_mode);
 8000afa:	4b70      	ldr	r3, [pc, #448]	; (8000cbc <fsm_manual_run+0x2f8>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	4619      	mov	r1, r3
 8000b00:	2000      	movs	r0, #0
 8000b02:	f000 fd35 	bl	8001570 <setTimer>
		}
		if(isButtonPress(3)==1){
 8000b06:	2003      	movs	r0, #3
 8000b08:	f7ff fb20 	bl	800014c <isButtonPress>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b01      	cmp	r3, #1
 8000b10:	f040 81e2 	bne.w	8000ed8 <fsm_manual_run+0x514>
			status=INIT_TUNING;
 8000b14:	4b67      	ldr	r3, [pc, #412]	; (8000cb4 <fsm_manual_run+0x2f0>)
 8000b16:	220c      	movs	r2, #12
 8000b18:	601a      	str	r2, [r3, #0]
			setTimer(5, time_Tuning_mode);
 8000b1a:	4b69      	ldr	r3, [pc, #420]	; (8000cc0 <fsm_manual_run+0x2fc>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	4619      	mov	r1, r3
 8000b20:	2005      	movs	r0, #5
 8000b22:	f000 fd25 	bl	8001570 <setTimer>
		}
		break;
 8000b26:	e1d7      	b.n	8000ed8 <fsm_manual_run+0x514>
	case M_YR:
		if(timer_flag[0]==1 || isButtonPress(2)==1)
 8000b28:	4b63      	ldr	r3, [pc, #396]	; (8000cb8 <fsm_manual_run+0x2f4>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	2b01      	cmp	r3, #1
 8000b2e:	d005      	beq.n	8000b3c <fsm_manual_run+0x178>
 8000b30:	2002      	movs	r0, #2
 8000b32:	f7ff fb0b 	bl	800014c <isButtonPress>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b01      	cmp	r3, #1
 8000b3a:	d102      	bne.n	8000b42 <fsm_manual_run+0x17e>
			status=INIT_AUTO;
 8000b3c:	4b5d      	ldr	r3, [pc, #372]	; (8000cb4 <fsm_manual_run+0x2f0>)
 8000b3e:	220a      	movs	r2, #10
 8000b40:	601a      	str	r2, [r3, #0]
		setT1(YELLOW);
 8000b42:	201f      	movs	r0, #31
 8000b44:	f7ff fc04 	bl	8000350 <setT1>
		setT2(RED);
 8000b48:	201e      	movs	r0, #30
 8000b4a:	f7ff fc4f 	bl	80003ec <setT2>
		if (isButtonPress(0)==1){
 8000b4e:	2000      	movs	r0, #0
 8000b50:	f7ff fafc 	bl	800014c <isButtonPress>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b01      	cmp	r3, #1
 8000b58:	d108      	bne.n	8000b6c <fsm_manual_run+0x1a8>
			status=M_RR;
 8000b5a:	4b56      	ldr	r3, [pc, #344]	; (8000cb4 <fsm_manual_run+0x2f0>)
 8000b5c:	2211      	movs	r2, #17
 8000b5e:	601a      	str	r2, [r3, #0]
			setTimer(0, time_Manual_mode);
 8000b60:	4b56      	ldr	r3, [pc, #344]	; (8000cbc <fsm_manual_run+0x2f8>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	4619      	mov	r1, r3
 8000b66:	2000      	movs	r0, #0
 8000b68:	f000 fd02 	bl	8001570 <setTimer>
		}
		if (isButtonPress(1)==1){
 8000b6c:	2001      	movs	r0, #1
 8000b6e:	f7ff faed 	bl	800014c <isButtonPress>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b01      	cmp	r3, #1
 8000b76:	d108      	bne.n	8000b8a <fsm_manual_run+0x1c6>
			status=M_YG;
 8000b78:	4b4e      	ldr	r3, [pc, #312]	; (8000cb4 <fsm_manual_run+0x2f0>)
 8000b7a:	2215      	movs	r2, #21
 8000b7c:	601a      	str	r2, [r3, #0]
			setTimer(0, time_Manual_mode);
 8000b7e:	4b4f      	ldr	r3, [pc, #316]	; (8000cbc <fsm_manual_run+0x2f8>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	4619      	mov	r1, r3
 8000b84:	2000      	movs	r0, #0
 8000b86:	f000 fcf3 	bl	8001570 <setTimer>
		}
		if(isButtonPress(3)==1){
 8000b8a:	2003      	movs	r0, #3
 8000b8c:	f7ff fade 	bl	800014c <isButtonPress>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b01      	cmp	r3, #1
 8000b94:	f040 81a2 	bne.w	8000edc <fsm_manual_run+0x518>
			status=INIT_TUNING;
 8000b98:	4b46      	ldr	r3, [pc, #280]	; (8000cb4 <fsm_manual_run+0x2f0>)
 8000b9a:	220c      	movs	r2, #12
 8000b9c:	601a      	str	r2, [r3, #0]
			setTimer(5, time_Tuning_mode);
 8000b9e:	4b48      	ldr	r3, [pc, #288]	; (8000cc0 <fsm_manual_run+0x2fc>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	2005      	movs	r0, #5
 8000ba6:	f000 fce3 	bl	8001570 <setTimer>
		}
		break;
 8000baa:	e197      	b.n	8000edc <fsm_manual_run+0x518>
	case M_RG:
		if(timer_flag[0]==1 || isButtonPress(2)==1)
 8000bac:	4b42      	ldr	r3, [pc, #264]	; (8000cb8 <fsm_manual_run+0x2f4>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	2b01      	cmp	r3, #1
 8000bb2:	d005      	beq.n	8000bc0 <fsm_manual_run+0x1fc>
 8000bb4:	2002      	movs	r0, #2
 8000bb6:	f7ff fac9 	bl	800014c <isButtonPress>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b01      	cmp	r3, #1
 8000bbe:	d102      	bne.n	8000bc6 <fsm_manual_run+0x202>
			status=INIT_AUTO;
 8000bc0:	4b3c      	ldr	r3, [pc, #240]	; (8000cb4 <fsm_manual_run+0x2f0>)
 8000bc2:	220a      	movs	r2, #10
 8000bc4:	601a      	str	r2, [r3, #0]
		setT1(RED);
 8000bc6:	201e      	movs	r0, #30
 8000bc8:	f7ff fbc2 	bl	8000350 <setT1>
		setT2(GREEN);
 8000bcc:	2020      	movs	r0, #32
 8000bce:	f7ff fc0d 	bl	80003ec <setT2>
		if (isButtonPress(0)==1){
 8000bd2:	2000      	movs	r0, #0
 8000bd4:	f7ff faba 	bl	800014c <isButtonPress>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b01      	cmp	r3, #1
 8000bdc:	d108      	bne.n	8000bf0 <fsm_manual_run+0x22c>
			status=M_GG;
 8000bde:	4b35      	ldr	r3, [pc, #212]	; (8000cb4 <fsm_manual_run+0x2f0>)
 8000be0:	2214      	movs	r2, #20
 8000be2:	601a      	str	r2, [r3, #0]
			setTimer(0, time_Manual_mode);
 8000be4:	4b35      	ldr	r3, [pc, #212]	; (8000cbc <fsm_manual_run+0x2f8>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4619      	mov	r1, r3
 8000bea:	2000      	movs	r0, #0
 8000bec:	f000 fcc0 	bl	8001570 <setTimer>
		}
		if (isButtonPress(1)==1){
 8000bf0:	2001      	movs	r0, #1
 8000bf2:	f7ff faab 	bl	800014c <isButtonPress>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b01      	cmp	r3, #1
 8000bfa:	d108      	bne.n	8000c0e <fsm_manual_run+0x24a>
			status=M_RY;
 8000bfc:	4b2d      	ldr	r3, [pc, #180]	; (8000cb4 <fsm_manual_run+0x2f0>)
 8000bfe:	2218      	movs	r2, #24
 8000c00:	601a      	str	r2, [r3, #0]
			setTimer(0, time_Manual_mode);
 8000c02:	4b2e      	ldr	r3, [pc, #184]	; (8000cbc <fsm_manual_run+0x2f8>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	4619      	mov	r1, r3
 8000c08:	2000      	movs	r0, #0
 8000c0a:	f000 fcb1 	bl	8001570 <setTimer>
		}
		if(isButtonPress(3)==1){
 8000c0e:	2003      	movs	r0, #3
 8000c10:	f7ff fa9c 	bl	800014c <isButtonPress>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b01      	cmp	r3, #1
 8000c18:	f040 8162 	bne.w	8000ee0 <fsm_manual_run+0x51c>
			status=INIT_TUNING;
 8000c1c:	4b25      	ldr	r3, [pc, #148]	; (8000cb4 <fsm_manual_run+0x2f0>)
 8000c1e:	220c      	movs	r2, #12
 8000c20:	601a      	str	r2, [r3, #0]
			setTimer(5, time_Tuning_mode);
 8000c22:	4b27      	ldr	r3, [pc, #156]	; (8000cc0 <fsm_manual_run+0x2fc>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	4619      	mov	r1, r3
 8000c28:	2005      	movs	r0, #5
 8000c2a:	f000 fca1 	bl	8001570 <setTimer>
		}
		break;
 8000c2e:	e157      	b.n	8000ee0 <fsm_manual_run+0x51c>
	case M_GG:
		if(timer_flag[0]==1 || isButtonPress(2)==1)
 8000c30:	4b21      	ldr	r3, [pc, #132]	; (8000cb8 <fsm_manual_run+0x2f4>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	2b01      	cmp	r3, #1
 8000c36:	d005      	beq.n	8000c44 <fsm_manual_run+0x280>
 8000c38:	2002      	movs	r0, #2
 8000c3a:	f7ff fa87 	bl	800014c <isButtonPress>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b01      	cmp	r3, #1
 8000c42:	d102      	bne.n	8000c4a <fsm_manual_run+0x286>
			status=INIT_AUTO;
 8000c44:	4b1b      	ldr	r3, [pc, #108]	; (8000cb4 <fsm_manual_run+0x2f0>)
 8000c46:	220a      	movs	r2, #10
 8000c48:	601a      	str	r2, [r3, #0]
		setT1(GREEN);
 8000c4a:	2020      	movs	r0, #32
 8000c4c:	f7ff fb80 	bl	8000350 <setT1>
		setT2(GREEN);
 8000c50:	2020      	movs	r0, #32
 8000c52:	f7ff fbcb 	bl	80003ec <setT2>
		if (isButtonPress(0)==1){
 8000c56:	2000      	movs	r0, #0
 8000c58:	f7ff fa78 	bl	800014c <isButtonPress>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b01      	cmp	r3, #1
 8000c60:	d108      	bne.n	8000c74 <fsm_manual_run+0x2b0>
			status=M_YG;
 8000c62:	4b14      	ldr	r3, [pc, #80]	; (8000cb4 <fsm_manual_run+0x2f0>)
 8000c64:	2215      	movs	r2, #21
 8000c66:	601a      	str	r2, [r3, #0]
			setTimer(0, time_Manual_mode);
 8000c68:	4b14      	ldr	r3, [pc, #80]	; (8000cbc <fsm_manual_run+0x2f8>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	2000      	movs	r0, #0
 8000c70:	f000 fc7e 	bl	8001570 <setTimer>
		}
		if (isButtonPress(1)==1){
 8000c74:	2001      	movs	r0, #1
 8000c76:	f7ff fa69 	bl	800014c <isButtonPress>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b01      	cmp	r3, #1
 8000c7e:	d108      	bne.n	8000c92 <fsm_manual_run+0x2ce>
			status=M_GY;
 8000c80:	4b0c      	ldr	r3, [pc, #48]	; (8000cb4 <fsm_manual_run+0x2f0>)
 8000c82:	2219      	movs	r2, #25
 8000c84:	601a      	str	r2, [r3, #0]
			setTimer(0, time_Manual_mode);
 8000c86:	4b0d      	ldr	r3, [pc, #52]	; (8000cbc <fsm_manual_run+0x2f8>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	2000      	movs	r0, #0
 8000c8e:	f000 fc6f 	bl	8001570 <setTimer>
		}
		if(isButtonPress(3)==1){
 8000c92:	2003      	movs	r0, #3
 8000c94:	f7ff fa5a 	bl	800014c <isButtonPress>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b01      	cmp	r3, #1
 8000c9c:	f040 8122 	bne.w	8000ee4 <fsm_manual_run+0x520>
			status=INIT_TUNING;
 8000ca0:	4b04      	ldr	r3, [pc, #16]	; (8000cb4 <fsm_manual_run+0x2f0>)
 8000ca2:	220c      	movs	r2, #12
 8000ca4:	601a      	str	r2, [r3, #0]
			setTimer(5, time_Tuning_mode);
 8000ca6:	4b06      	ldr	r3, [pc, #24]	; (8000cc0 <fsm_manual_run+0x2fc>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	4619      	mov	r1, r3
 8000cac:	2005      	movs	r0, #5
 8000cae:	f000 fc5f 	bl	8001570 <setTimer>
		}
		break;
 8000cb2:	e117      	b.n	8000ee4 <fsm_manual_run+0x520>
 8000cb4:	2000007c 	.word	0x2000007c
 8000cb8:	20000148 	.word	0x20000148
 8000cbc:	200000a0 	.word	0x200000a0
 8000cc0:	200000a4 	.word	0x200000a4
	case M_YG:
		if(timer_flag[0]==1 || isButtonPress(2)==1)
 8000cc4:	4b8d      	ldr	r3, [pc, #564]	; (8000efc <fsm_manual_run+0x538>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	2b01      	cmp	r3, #1
 8000cca:	d005      	beq.n	8000cd8 <fsm_manual_run+0x314>
 8000ccc:	2002      	movs	r0, #2
 8000cce:	f7ff fa3d 	bl	800014c <isButtonPress>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b01      	cmp	r3, #1
 8000cd6:	d102      	bne.n	8000cde <fsm_manual_run+0x31a>
			status=INIT_AUTO;
 8000cd8:	4b89      	ldr	r3, [pc, #548]	; (8000f00 <fsm_manual_run+0x53c>)
 8000cda:	220a      	movs	r2, #10
 8000cdc:	601a      	str	r2, [r3, #0]
		setT1(YELLOW);
 8000cde:	201f      	movs	r0, #31
 8000ce0:	f7ff fb36 	bl	8000350 <setT1>
		setT2(GREEN);
 8000ce4:	2020      	movs	r0, #32
 8000ce6:	f7ff fb81 	bl	80003ec <setT2>
		if (isButtonPress(0)==1){
 8000cea:	2000      	movs	r0, #0
 8000cec:	f7ff fa2e 	bl	800014c <isButtonPress>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b01      	cmp	r3, #1
 8000cf4:	d108      	bne.n	8000d08 <fsm_manual_run+0x344>
			status=M_RG;
 8000cf6:	4b82      	ldr	r3, [pc, #520]	; (8000f00 <fsm_manual_run+0x53c>)
 8000cf8:	2216      	movs	r2, #22
 8000cfa:	601a      	str	r2, [r3, #0]
			setTimer(0, time_Manual_mode);
 8000cfc:	4b81      	ldr	r3, [pc, #516]	; (8000f04 <fsm_manual_run+0x540>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4619      	mov	r1, r3
 8000d02:	2000      	movs	r0, #0
 8000d04:	f000 fc34 	bl	8001570 <setTimer>
		}
		if (isButtonPress(1)==1){
 8000d08:	2001      	movs	r0, #1
 8000d0a:	f7ff fa1f 	bl	800014c <isButtonPress>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b01      	cmp	r3, #1
 8000d12:	d108      	bne.n	8000d26 <fsm_manual_run+0x362>
			status=M_YY;
 8000d14:	4b7a      	ldr	r3, [pc, #488]	; (8000f00 <fsm_manual_run+0x53c>)
 8000d16:	2217      	movs	r2, #23
 8000d18:	601a      	str	r2, [r3, #0]
			setTimer(0, time_Manual_mode);
 8000d1a:	4b7a      	ldr	r3, [pc, #488]	; (8000f04 <fsm_manual_run+0x540>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	4619      	mov	r1, r3
 8000d20:	2000      	movs	r0, #0
 8000d22:	f000 fc25 	bl	8001570 <setTimer>
		}
		if(isButtonPress(3)==1){
 8000d26:	2003      	movs	r0, #3
 8000d28:	f7ff fa10 	bl	800014c <isButtonPress>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b01      	cmp	r3, #1
 8000d30:	f040 80da 	bne.w	8000ee8 <fsm_manual_run+0x524>
			status=INIT_TUNING;
 8000d34:	4b72      	ldr	r3, [pc, #456]	; (8000f00 <fsm_manual_run+0x53c>)
 8000d36:	220c      	movs	r2, #12
 8000d38:	601a      	str	r2, [r3, #0]
			setTimer(5, time_Tuning_mode);
 8000d3a:	4b73      	ldr	r3, [pc, #460]	; (8000f08 <fsm_manual_run+0x544>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	4619      	mov	r1, r3
 8000d40:	2005      	movs	r0, #5
 8000d42:	f000 fc15 	bl	8001570 <setTimer>
		}
		break;
 8000d46:	e0cf      	b.n	8000ee8 <fsm_manual_run+0x524>
	case M_YY:
		if(timer_flag[0]==1 || isButtonPress(2)==1)
 8000d48:	4b6c      	ldr	r3, [pc, #432]	; (8000efc <fsm_manual_run+0x538>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	2b01      	cmp	r3, #1
 8000d4e:	d005      	beq.n	8000d5c <fsm_manual_run+0x398>
 8000d50:	2002      	movs	r0, #2
 8000d52:	f7ff f9fb 	bl	800014c <isButtonPress>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b01      	cmp	r3, #1
 8000d5a:	d102      	bne.n	8000d62 <fsm_manual_run+0x39e>
			status=INIT_AUTO;
 8000d5c:	4b68      	ldr	r3, [pc, #416]	; (8000f00 <fsm_manual_run+0x53c>)
 8000d5e:	220a      	movs	r2, #10
 8000d60:	601a      	str	r2, [r3, #0]
		setT1(YELLOW);
 8000d62:	201f      	movs	r0, #31
 8000d64:	f7ff faf4 	bl	8000350 <setT1>
		setT2(YELLOW);
 8000d68:	201f      	movs	r0, #31
 8000d6a:	f7ff fb3f 	bl	80003ec <setT2>
		if (isButtonPress(0)==1){
 8000d6e:	2000      	movs	r0, #0
 8000d70:	f7ff f9ec 	bl	800014c <isButtonPress>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b01      	cmp	r3, #1
 8000d78:	d108      	bne.n	8000d8c <fsm_manual_run+0x3c8>
			status=M_RY;
 8000d7a:	4b61      	ldr	r3, [pc, #388]	; (8000f00 <fsm_manual_run+0x53c>)
 8000d7c:	2218      	movs	r2, #24
 8000d7e:	601a      	str	r2, [r3, #0]
			setTimer(0, time_Manual_mode);
 8000d80:	4b60      	ldr	r3, [pc, #384]	; (8000f04 <fsm_manual_run+0x540>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4619      	mov	r1, r3
 8000d86:	2000      	movs	r0, #0
 8000d88:	f000 fbf2 	bl	8001570 <setTimer>
		}
		if (isButtonPress(1)==1){
 8000d8c:	2001      	movs	r0, #1
 8000d8e:	f7ff f9dd 	bl	800014c <isButtonPress>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b01      	cmp	r3, #1
 8000d96:	d108      	bne.n	8000daa <fsm_manual_run+0x3e6>
			status=M_YR;
 8000d98:	4b59      	ldr	r3, [pc, #356]	; (8000f00 <fsm_manual_run+0x53c>)
 8000d9a:	2213      	movs	r2, #19
 8000d9c:	601a      	str	r2, [r3, #0]
			setTimer(0, time_Manual_mode);
 8000d9e:	4b59      	ldr	r3, [pc, #356]	; (8000f04 <fsm_manual_run+0x540>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	4619      	mov	r1, r3
 8000da4:	2000      	movs	r0, #0
 8000da6:	f000 fbe3 	bl	8001570 <setTimer>
		}
		if(isButtonPress(3)==1){
 8000daa:	2003      	movs	r0, #3
 8000dac:	f7ff f9ce 	bl	800014c <isButtonPress>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b01      	cmp	r3, #1
 8000db4:	f040 809a 	bne.w	8000eec <fsm_manual_run+0x528>
			status=INIT_TUNING;
 8000db8:	4b51      	ldr	r3, [pc, #324]	; (8000f00 <fsm_manual_run+0x53c>)
 8000dba:	220c      	movs	r2, #12
 8000dbc:	601a      	str	r2, [r3, #0]
			setTimer(5, time_Tuning_mode);
 8000dbe:	4b52      	ldr	r3, [pc, #328]	; (8000f08 <fsm_manual_run+0x544>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	2005      	movs	r0, #5
 8000dc6:	f000 fbd3 	bl	8001570 <setTimer>
		}
		break;
 8000dca:	e08f      	b.n	8000eec <fsm_manual_run+0x528>
	case M_RY:
		if(timer_flag[0]==1 || isButtonPress(2)==1)
 8000dcc:	4b4b      	ldr	r3, [pc, #300]	; (8000efc <fsm_manual_run+0x538>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	2b01      	cmp	r3, #1
 8000dd2:	d005      	beq.n	8000de0 <fsm_manual_run+0x41c>
 8000dd4:	2002      	movs	r0, #2
 8000dd6:	f7ff f9b9 	bl	800014c <isButtonPress>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b01      	cmp	r3, #1
 8000dde:	d102      	bne.n	8000de6 <fsm_manual_run+0x422>
			status=INIT_AUTO;
 8000de0:	4b47      	ldr	r3, [pc, #284]	; (8000f00 <fsm_manual_run+0x53c>)
 8000de2:	220a      	movs	r2, #10
 8000de4:	601a      	str	r2, [r3, #0]
		setT1(RED);
 8000de6:	201e      	movs	r0, #30
 8000de8:	f7ff fab2 	bl	8000350 <setT1>
		setT2(YELLOW);
 8000dec:	201f      	movs	r0, #31
 8000dee:	f7ff fafd 	bl	80003ec <setT2>
		if (isButtonPress(0)==1){
 8000df2:	2000      	movs	r0, #0
 8000df4:	f7ff f9aa 	bl	800014c <isButtonPress>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b01      	cmp	r3, #1
 8000dfc:	d108      	bne.n	8000e10 <fsm_manual_run+0x44c>
			status=M_GY;
 8000dfe:	4b40      	ldr	r3, [pc, #256]	; (8000f00 <fsm_manual_run+0x53c>)
 8000e00:	2219      	movs	r2, #25
 8000e02:	601a      	str	r2, [r3, #0]
			setTimer(0, time_Manual_mode);
 8000e04:	4b3f      	ldr	r3, [pc, #252]	; (8000f04 <fsm_manual_run+0x540>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4619      	mov	r1, r3
 8000e0a:	2000      	movs	r0, #0
 8000e0c:	f000 fbb0 	bl	8001570 <setTimer>
		}
		if (isButtonPress(1)==1){
 8000e10:	2001      	movs	r0, #1
 8000e12:	f7ff f99b 	bl	800014c <isButtonPress>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b01      	cmp	r3, #1
 8000e1a:	d108      	bne.n	8000e2e <fsm_manual_run+0x46a>
			status=M_RR;
 8000e1c:	4b38      	ldr	r3, [pc, #224]	; (8000f00 <fsm_manual_run+0x53c>)
 8000e1e:	2211      	movs	r2, #17
 8000e20:	601a      	str	r2, [r3, #0]
			setTimer(0, time_Manual_mode);
 8000e22:	4b38      	ldr	r3, [pc, #224]	; (8000f04 <fsm_manual_run+0x540>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	4619      	mov	r1, r3
 8000e28:	2000      	movs	r0, #0
 8000e2a:	f000 fba1 	bl	8001570 <setTimer>
		}
		if(isButtonPress(3)==1){
 8000e2e:	2003      	movs	r0, #3
 8000e30:	f7ff f98c 	bl	800014c <isButtonPress>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b01      	cmp	r3, #1
 8000e38:	d15a      	bne.n	8000ef0 <fsm_manual_run+0x52c>
			status=INIT_TUNING;
 8000e3a:	4b31      	ldr	r3, [pc, #196]	; (8000f00 <fsm_manual_run+0x53c>)
 8000e3c:	220c      	movs	r2, #12
 8000e3e:	601a      	str	r2, [r3, #0]
			setTimer(5, time_Tuning_mode);
 8000e40:	4b31      	ldr	r3, [pc, #196]	; (8000f08 <fsm_manual_run+0x544>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4619      	mov	r1, r3
 8000e46:	2005      	movs	r0, #5
 8000e48:	f000 fb92 	bl	8001570 <setTimer>
		}
		break;
 8000e4c:	e050      	b.n	8000ef0 <fsm_manual_run+0x52c>
	case M_GY:
		if(timer_flag[0]==1 || isButtonPress(2)==1)
 8000e4e:	4b2b      	ldr	r3, [pc, #172]	; (8000efc <fsm_manual_run+0x538>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	2b01      	cmp	r3, #1
 8000e54:	d005      	beq.n	8000e62 <fsm_manual_run+0x49e>
 8000e56:	2002      	movs	r0, #2
 8000e58:	f7ff f978 	bl	800014c <isButtonPress>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b01      	cmp	r3, #1
 8000e60:	d102      	bne.n	8000e68 <fsm_manual_run+0x4a4>
			status=INIT_AUTO;
 8000e62:	4b27      	ldr	r3, [pc, #156]	; (8000f00 <fsm_manual_run+0x53c>)
 8000e64:	220a      	movs	r2, #10
 8000e66:	601a      	str	r2, [r3, #0]
		setT1(GREEN);
 8000e68:	2020      	movs	r0, #32
 8000e6a:	f7ff fa71 	bl	8000350 <setT1>
		setT2(YELLOW);
 8000e6e:	201f      	movs	r0, #31
 8000e70:	f7ff fabc 	bl	80003ec <setT2>
		if (isButtonPress(0)==1){
 8000e74:	2000      	movs	r0, #0
 8000e76:	f7ff f969 	bl	800014c <isButtonPress>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b01      	cmp	r3, #1
 8000e7e:	d108      	bne.n	8000e92 <fsm_manual_run+0x4ce>
			status=M_YY;
 8000e80:	4b1f      	ldr	r3, [pc, #124]	; (8000f00 <fsm_manual_run+0x53c>)
 8000e82:	2217      	movs	r2, #23
 8000e84:	601a      	str	r2, [r3, #0]
			setTimer(0, time_Manual_mode);
 8000e86:	4b1f      	ldr	r3, [pc, #124]	; (8000f04 <fsm_manual_run+0x540>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	2000      	movs	r0, #0
 8000e8e:	f000 fb6f 	bl	8001570 <setTimer>
		}
		if (isButtonPress(1)==1){
 8000e92:	2001      	movs	r0, #1
 8000e94:	f7ff f95a 	bl	800014c <isButtonPress>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b01      	cmp	r3, #1
 8000e9c:	d108      	bne.n	8000eb0 <fsm_manual_run+0x4ec>
			status=M_GR;
 8000e9e:	4b18      	ldr	r3, [pc, #96]	; (8000f00 <fsm_manual_run+0x53c>)
 8000ea0:	2212      	movs	r2, #18
 8000ea2:	601a      	str	r2, [r3, #0]
			setTimer(0, time_Manual_mode);
 8000ea4:	4b17      	ldr	r3, [pc, #92]	; (8000f04 <fsm_manual_run+0x540>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	2000      	movs	r0, #0
 8000eac:	f000 fb60 	bl	8001570 <setTimer>
		}
		if(isButtonPress(3)==1){
 8000eb0:	2003      	movs	r0, #3
 8000eb2:	f7ff f94b 	bl	800014c <isButtonPress>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b01      	cmp	r3, #1
 8000eba:	d11b      	bne.n	8000ef4 <fsm_manual_run+0x530>
			status=INIT_TUNING;
 8000ebc:	4b10      	ldr	r3, [pc, #64]	; (8000f00 <fsm_manual_run+0x53c>)
 8000ebe:	220c      	movs	r2, #12
 8000ec0:	601a      	str	r2, [r3, #0]
			setTimer(5, time_Tuning_mode);
 8000ec2:	4b11      	ldr	r3, [pc, #68]	; (8000f08 <fsm_manual_run+0x544>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	2005      	movs	r0, #5
 8000eca:	f000 fb51 	bl	8001570 <setTimer>
		}
		break;
 8000ece:	e011      	b.n	8000ef4 <fsm_manual_run+0x530>
	default:
		break;
 8000ed0:	bf00      	nop
 8000ed2:	e010      	b.n	8000ef6 <fsm_manual_run+0x532>
		break;
 8000ed4:	bf00      	nop
 8000ed6:	e00e      	b.n	8000ef6 <fsm_manual_run+0x532>
		break;
 8000ed8:	bf00      	nop
 8000eda:	e00c      	b.n	8000ef6 <fsm_manual_run+0x532>
		break;
 8000edc:	bf00      	nop
 8000ede:	e00a      	b.n	8000ef6 <fsm_manual_run+0x532>
		break;
 8000ee0:	bf00      	nop
 8000ee2:	e008      	b.n	8000ef6 <fsm_manual_run+0x532>
		break;
 8000ee4:	bf00      	nop
 8000ee6:	e006      	b.n	8000ef6 <fsm_manual_run+0x532>
		break;
 8000ee8:	bf00      	nop
 8000eea:	e004      	b.n	8000ef6 <fsm_manual_run+0x532>
		break;
 8000eec:	bf00      	nop
 8000eee:	e002      	b.n	8000ef6 <fsm_manual_run+0x532>
		break;
 8000ef0:	bf00      	nop
 8000ef2:	e000      	b.n	8000ef6 <fsm_manual_run+0x532>
		break;
 8000ef4:	bf00      	nop
	}
}
 8000ef6:	bf00      	nop
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	20000148 	.word	0x20000148
 8000f00:	2000007c 	.word	0x2000007c
 8000f04:	200000a0 	.word	0x200000a0
 8000f08:	200000a4 	.word	0x200000a4

08000f0c <fsm_tuning_run>:
void fsm_tuning_run(){
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
	switch(status){
 8000f10:	4ba4      	ldr	r3, [pc, #656]	; (80011a4 <fsm_tuning_run+0x298>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	3b0c      	subs	r3, #12
 8000f16:	2b10      	cmp	r3, #16
 8000f18:	f200 813a 	bhi.w	8001190 <fsm_tuning_run+0x284>
 8000f1c:	a201      	add	r2, pc, #4	; (adr r2, 8000f24 <fsm_tuning_run+0x18>)
 8000f1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f22:	bf00      	nop
 8000f24:	08000f69 	.word	0x08000f69
 8000f28:	08001191 	.word	0x08001191
 8000f2c:	08001191 	.word	0x08001191
 8000f30:	08001191 	.word	0x08001191
 8000f34:	08001191 	.word	0x08001191
 8000f38:	08001191 	.word	0x08001191
 8000f3c:	08001191 	.word	0x08001191
 8000f40:	08001191 	.word	0x08001191
 8000f44:	08001191 	.word	0x08001191
 8000f48:	08001191 	.word	0x08001191
 8000f4c:	08001191 	.word	0x08001191
 8000f50:	08001191 	.word	0x08001191
 8000f54:	08001191 	.word	0x08001191
 8000f58:	08001191 	.word	0x08001191
 8000f5c:	08000f7d 	.word	0x08000f7d
 8000f60:	0800102d 	.word	0x0800102d
 8000f64:	080010e3 	.word	0x080010e3
	case INIT_TUNING:
		setT1(RED);
 8000f68:	201e      	movs	r0, #30
 8000f6a:	f7ff f9f1 	bl	8000350 <setT1>
		setT2(RED);
 8000f6e:	201e      	movs	r0, #30
 8000f70:	f7ff fa3c 	bl	80003ec <setT2>
		status=T_R;
 8000f74:	4b8b      	ldr	r3, [pc, #556]	; (80011a4 <fsm_tuning_run+0x298>)
 8000f76:	221a      	movs	r2, #26
 8000f78:	601a      	str	r2, [r3, #0]
		break;
 8000f7a:	e110      	b.n	800119e <fsm_tuning_run+0x292>
	case T_R:
		setT1(RED);
 8000f7c:	201e      	movs	r0, #30
 8000f7e:	f7ff f9e7 	bl	8000350 <setT1>
		setT2(RED);
 8000f82:	201e      	movs	r0, #30
 8000f84:	f7ff fa32 	bl	80003ec <setT2>
		if(isButtonPress(0)==1){
 8000f88:	2000      	movs	r0, #0
 8000f8a:	f7ff f8df 	bl	800014c <isButtonPress>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b01      	cmp	r3, #1
 8000f92:	d113      	bne.n	8000fbc <fsm_tuning_run+0xb0>
			TIME_RED+=100;
 8000f94:	4b84      	ldr	r3, [pc, #528]	; (80011a8 <fsm_tuning_run+0x29c>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	3364      	adds	r3, #100	; 0x64
 8000f9a:	4a83      	ldr	r2, [pc, #524]	; (80011a8 <fsm_tuning_run+0x29c>)
 8000f9c:	6013      	str	r3, [r2, #0]
			if(TIME_RED/100>99)
 8000f9e:	4b82      	ldr	r3, [pc, #520]	; (80011a8 <fsm_tuning_run+0x29c>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	f242 720f 	movw	r2, #9999	; 0x270f
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	dd02      	ble.n	8000fb0 <fsm_tuning_run+0xa4>
				TIME_RED=100;
 8000faa:	4b7f      	ldr	r3, [pc, #508]	; (80011a8 <fsm_tuning_run+0x29c>)
 8000fac:	2264      	movs	r2, #100	; 0x64
 8000fae:	601a      	str	r2, [r3, #0]
			send7SEG(TIME_RED, RED);
 8000fb0:	4b7d      	ldr	r3, [pc, #500]	; (80011a8 <fsm_tuning_run+0x29c>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	211e      	movs	r1, #30
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f7ff fa66 	bl	8000488 <send7SEG>
		}
		if(isButtonPress(1)==1){
 8000fbc:	2001      	movs	r0, #1
 8000fbe:	f7ff f8c5 	bl	800014c <isButtonPress>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b01      	cmp	r3, #1
 8000fc6:	d113      	bne.n	8000ff0 <fsm_tuning_run+0xe4>
			TIME_RED-=100;
 8000fc8:	4b77      	ldr	r3, [pc, #476]	; (80011a8 <fsm_tuning_run+0x29c>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	3b64      	subs	r3, #100	; 0x64
 8000fce:	4a76      	ldr	r2, [pc, #472]	; (80011a8 <fsm_tuning_run+0x29c>)
 8000fd0:	6013      	str	r3, [r2, #0]
			if(TIME_RED/100==0)
 8000fd2:	4b75      	ldr	r3, [pc, #468]	; (80011a8 <fsm_tuning_run+0x29c>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	3363      	adds	r3, #99	; 0x63
 8000fd8:	2bc6      	cmp	r3, #198	; 0xc6
 8000fda:	d803      	bhi.n	8000fe4 <fsm_tuning_run+0xd8>
				TIME_RED=9900;
 8000fdc:	4b72      	ldr	r3, [pc, #456]	; (80011a8 <fsm_tuning_run+0x29c>)
 8000fde:	f242 62ac 	movw	r2, #9900	; 0x26ac
 8000fe2:	601a      	str	r2, [r3, #0]
			send7SEG(TIME_RED, RED);
 8000fe4:	4b70      	ldr	r3, [pc, #448]	; (80011a8 <fsm_tuning_run+0x29c>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	211e      	movs	r1, #30
 8000fea:	4618      	mov	r0, r3
 8000fec:	f7ff fa4c 	bl	8000488 <send7SEG>
		}
		if(isButtonPress(2)==1 || timer_flag[5]==1)
 8000ff0:	2002      	movs	r0, #2
 8000ff2:	f7ff f8ab 	bl	800014c <isButtonPress>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b01      	cmp	r3, #1
 8000ffa:	d003      	beq.n	8001004 <fsm_tuning_run+0xf8>
 8000ffc:	4b6b      	ldr	r3, [pc, #428]	; (80011ac <fsm_tuning_run+0x2a0>)
 8000ffe:	695b      	ldr	r3, [r3, #20]
 8001000:	2b01      	cmp	r3, #1
 8001002:	d102      	bne.n	800100a <fsm_tuning_run+0xfe>
			status=INIT_AUTO;
 8001004:	4b67      	ldr	r3, [pc, #412]	; (80011a4 <fsm_tuning_run+0x298>)
 8001006:	220a      	movs	r2, #10
 8001008:	601a      	str	r2, [r3, #0]
		if(isButtonPress(3)==1){
 800100a:	2003      	movs	r0, #3
 800100c:	f7ff f89e 	bl	800014c <isButtonPress>
 8001010:	4603      	mov	r3, r0
 8001012:	2b01      	cmp	r3, #1
 8001014:	f040 80be 	bne.w	8001194 <fsm_tuning_run+0x288>
			status=T_G;
 8001018:	4b62      	ldr	r3, [pc, #392]	; (80011a4 <fsm_tuning_run+0x298>)
 800101a:	221b      	movs	r2, #27
 800101c:	601a      	str	r2, [r3, #0]
			setTimer(5, time_Tuning_mode);
 800101e:	4b64      	ldr	r3, [pc, #400]	; (80011b0 <fsm_tuning_run+0x2a4>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4619      	mov	r1, r3
 8001024:	2005      	movs	r0, #5
 8001026:	f000 faa3 	bl	8001570 <setTimer>
		}
		break;
 800102a:	e0b3      	b.n	8001194 <fsm_tuning_run+0x288>
	case T_G:
		setT1(GREEN);
 800102c:	2020      	movs	r0, #32
 800102e:	f7ff f98f 	bl	8000350 <setT1>
		setT2(GREEN);
 8001032:	2020      	movs	r0, #32
 8001034:	f7ff f9da 	bl	80003ec <setT2>
		if(isButtonPress(0)==1){
 8001038:	2000      	movs	r0, #0
 800103a:	f7ff f887 	bl	800014c <isButtonPress>
 800103e:	4603      	mov	r3, r0
 8001040:	2b01      	cmp	r3, #1
 8001042:	d113      	bne.n	800106c <fsm_tuning_run+0x160>
			TIME_GREEN+=100;
 8001044:	4b5b      	ldr	r3, [pc, #364]	; (80011b4 <fsm_tuning_run+0x2a8>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	3364      	adds	r3, #100	; 0x64
 800104a:	4a5a      	ldr	r2, [pc, #360]	; (80011b4 <fsm_tuning_run+0x2a8>)
 800104c:	6013      	str	r3, [r2, #0]
			if(TIME_GREEN/100>99)
 800104e:	4b59      	ldr	r3, [pc, #356]	; (80011b4 <fsm_tuning_run+0x2a8>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f242 720f 	movw	r2, #9999	; 0x270f
 8001056:	4293      	cmp	r3, r2
 8001058:	dd02      	ble.n	8001060 <fsm_tuning_run+0x154>
				TIME_GREEN=100;
 800105a:	4b56      	ldr	r3, [pc, #344]	; (80011b4 <fsm_tuning_run+0x2a8>)
 800105c:	2264      	movs	r2, #100	; 0x64
 800105e:	601a      	str	r2, [r3, #0]
			send7SEG(TIME_GREEN, GREEN);
 8001060:	4b54      	ldr	r3, [pc, #336]	; (80011b4 <fsm_tuning_run+0x2a8>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	2120      	movs	r1, #32
 8001066:	4618      	mov	r0, r3
 8001068:	f7ff fa0e 	bl	8000488 <send7SEG>
		}
		if(isButtonPress(1)==1){
 800106c:	2001      	movs	r0, #1
 800106e:	f7ff f86d 	bl	800014c <isButtonPress>
 8001072:	4603      	mov	r3, r0
 8001074:	2b01      	cmp	r3, #1
 8001076:	d113      	bne.n	80010a0 <fsm_tuning_run+0x194>
			TIME_GREEN-=100;
 8001078:	4b4e      	ldr	r3, [pc, #312]	; (80011b4 <fsm_tuning_run+0x2a8>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	3b64      	subs	r3, #100	; 0x64
 800107e:	4a4d      	ldr	r2, [pc, #308]	; (80011b4 <fsm_tuning_run+0x2a8>)
 8001080:	6013      	str	r3, [r2, #0]
			if(TIME_GREEN/100==0)
 8001082:	4b4c      	ldr	r3, [pc, #304]	; (80011b4 <fsm_tuning_run+0x2a8>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	3363      	adds	r3, #99	; 0x63
 8001088:	2bc6      	cmp	r3, #198	; 0xc6
 800108a:	d803      	bhi.n	8001094 <fsm_tuning_run+0x188>
				TIME_GREEN=9900;
 800108c:	4b49      	ldr	r3, [pc, #292]	; (80011b4 <fsm_tuning_run+0x2a8>)
 800108e:	f242 62ac 	movw	r2, #9900	; 0x26ac
 8001092:	601a      	str	r2, [r3, #0]
			send7SEG(TIME_GREEN, GREEN);
 8001094:	4b47      	ldr	r3, [pc, #284]	; (80011b4 <fsm_tuning_run+0x2a8>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	2120      	movs	r1, #32
 800109a:	4618      	mov	r0, r3
 800109c:	f7ff f9f4 	bl	8000488 <send7SEG>
		}
		if(isButtonPress(2)==1 || timer_flag[5]==1 || timer_flag[5]==1)
 80010a0:	2002      	movs	r0, #2
 80010a2:	f7ff f853 	bl	800014c <isButtonPress>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b01      	cmp	r3, #1
 80010aa:	d007      	beq.n	80010bc <fsm_tuning_run+0x1b0>
 80010ac:	4b3f      	ldr	r3, [pc, #252]	; (80011ac <fsm_tuning_run+0x2a0>)
 80010ae:	695b      	ldr	r3, [r3, #20]
 80010b0:	2b01      	cmp	r3, #1
 80010b2:	d003      	beq.n	80010bc <fsm_tuning_run+0x1b0>
 80010b4:	4b3d      	ldr	r3, [pc, #244]	; (80011ac <fsm_tuning_run+0x2a0>)
 80010b6:	695b      	ldr	r3, [r3, #20]
 80010b8:	2b01      	cmp	r3, #1
 80010ba:	d102      	bne.n	80010c2 <fsm_tuning_run+0x1b6>
			status=INIT_AUTO;
 80010bc:	4b39      	ldr	r3, [pc, #228]	; (80011a4 <fsm_tuning_run+0x298>)
 80010be:	220a      	movs	r2, #10
 80010c0:	601a      	str	r2, [r3, #0]
		if(isButtonPress(3)==1){
 80010c2:	2003      	movs	r0, #3
 80010c4:	f7ff f842 	bl	800014c <isButtonPress>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b01      	cmp	r3, #1
 80010cc:	d164      	bne.n	8001198 <fsm_tuning_run+0x28c>
			status=T_Y;
 80010ce:	4b35      	ldr	r3, [pc, #212]	; (80011a4 <fsm_tuning_run+0x298>)
 80010d0:	221c      	movs	r2, #28
 80010d2:	601a      	str	r2, [r3, #0]
			setTimer(5, time_Tuning_mode);
 80010d4:	4b36      	ldr	r3, [pc, #216]	; (80011b0 <fsm_tuning_run+0x2a4>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4619      	mov	r1, r3
 80010da:	2005      	movs	r0, #5
 80010dc:	f000 fa48 	bl	8001570 <setTimer>
		}
		break;
 80010e0:	e05a      	b.n	8001198 <fsm_tuning_run+0x28c>
	case T_Y:

		setT1(YELLOW);
 80010e2:	201f      	movs	r0, #31
 80010e4:	f7ff f934 	bl	8000350 <setT1>
		setT2(YELLOW);
 80010e8:	201f      	movs	r0, #31
 80010ea:	f7ff f97f 	bl	80003ec <setT2>
		if(isButtonPress(0)==1){
 80010ee:	2000      	movs	r0, #0
 80010f0:	f7ff f82c 	bl	800014c <isButtonPress>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b01      	cmp	r3, #1
 80010f8:	d113      	bne.n	8001122 <fsm_tuning_run+0x216>
			TIME_YELLOW+=100;
 80010fa:	4b2f      	ldr	r3, [pc, #188]	; (80011b8 <fsm_tuning_run+0x2ac>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	3364      	adds	r3, #100	; 0x64
 8001100:	4a2d      	ldr	r2, [pc, #180]	; (80011b8 <fsm_tuning_run+0x2ac>)
 8001102:	6013      	str	r3, [r2, #0]
			if(TIME_YELLOW/100>99)
 8001104:	4b2c      	ldr	r3, [pc, #176]	; (80011b8 <fsm_tuning_run+0x2ac>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f242 720f 	movw	r2, #9999	; 0x270f
 800110c:	4293      	cmp	r3, r2
 800110e:	dd02      	ble.n	8001116 <fsm_tuning_run+0x20a>
				TIME_YELLOW=100;
 8001110:	4b29      	ldr	r3, [pc, #164]	; (80011b8 <fsm_tuning_run+0x2ac>)
 8001112:	2264      	movs	r2, #100	; 0x64
 8001114:	601a      	str	r2, [r3, #0]
			send7SEG(TIME_YELLOW, YELLOW);
 8001116:	4b28      	ldr	r3, [pc, #160]	; (80011b8 <fsm_tuning_run+0x2ac>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	211f      	movs	r1, #31
 800111c:	4618      	mov	r0, r3
 800111e:	f7ff f9b3 	bl	8000488 <send7SEG>
		}
		if(isButtonPress(1)==1){
 8001122:	2001      	movs	r0, #1
 8001124:	f7ff f812 	bl	800014c <isButtonPress>
 8001128:	4603      	mov	r3, r0
 800112a:	2b01      	cmp	r3, #1
 800112c:	d113      	bne.n	8001156 <fsm_tuning_run+0x24a>
			TIME_YELLOW-=100;
 800112e:	4b22      	ldr	r3, [pc, #136]	; (80011b8 <fsm_tuning_run+0x2ac>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	3b64      	subs	r3, #100	; 0x64
 8001134:	4a20      	ldr	r2, [pc, #128]	; (80011b8 <fsm_tuning_run+0x2ac>)
 8001136:	6013      	str	r3, [r2, #0]
			if(TIME_YELLOW/100==0)
 8001138:	4b1f      	ldr	r3, [pc, #124]	; (80011b8 <fsm_tuning_run+0x2ac>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	3363      	adds	r3, #99	; 0x63
 800113e:	2bc6      	cmp	r3, #198	; 0xc6
 8001140:	d803      	bhi.n	800114a <fsm_tuning_run+0x23e>
				TIME_YELLOW=9900;
 8001142:	4b1d      	ldr	r3, [pc, #116]	; (80011b8 <fsm_tuning_run+0x2ac>)
 8001144:	f242 62ac 	movw	r2, #9900	; 0x26ac
 8001148:	601a      	str	r2, [r3, #0]
			send7SEG(TIME_YELLOW, YELLOW);
 800114a:	4b1b      	ldr	r3, [pc, #108]	; (80011b8 <fsm_tuning_run+0x2ac>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	211f      	movs	r1, #31
 8001150:	4618      	mov	r0, r3
 8001152:	f7ff f999 	bl	8000488 <send7SEG>
		}
		if(isButtonPress(2)==1 || timer_flag[5]==1)
 8001156:	2002      	movs	r0, #2
 8001158:	f7fe fff8 	bl	800014c <isButtonPress>
 800115c:	4603      	mov	r3, r0
 800115e:	2b01      	cmp	r3, #1
 8001160:	d003      	beq.n	800116a <fsm_tuning_run+0x25e>
 8001162:	4b12      	ldr	r3, [pc, #72]	; (80011ac <fsm_tuning_run+0x2a0>)
 8001164:	695b      	ldr	r3, [r3, #20]
 8001166:	2b01      	cmp	r3, #1
 8001168:	d102      	bne.n	8001170 <fsm_tuning_run+0x264>
			status=INIT_AUTO;
 800116a:	4b0e      	ldr	r3, [pc, #56]	; (80011a4 <fsm_tuning_run+0x298>)
 800116c:	220a      	movs	r2, #10
 800116e:	601a      	str	r2, [r3, #0]
		if(isButtonPress(3)==1){
 8001170:	2003      	movs	r0, #3
 8001172:	f7fe ffeb 	bl	800014c <isButtonPress>
 8001176:	4603      	mov	r3, r0
 8001178:	2b01      	cmp	r3, #1
 800117a:	d10f      	bne.n	800119c <fsm_tuning_run+0x290>
			status=T_R;
 800117c:	4b09      	ldr	r3, [pc, #36]	; (80011a4 <fsm_tuning_run+0x298>)
 800117e:	221a      	movs	r2, #26
 8001180:	601a      	str	r2, [r3, #0]
			setTimer(5, time_Tuning_mode);
 8001182:	4b0b      	ldr	r3, [pc, #44]	; (80011b0 <fsm_tuning_run+0x2a4>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4619      	mov	r1, r3
 8001188:	2005      	movs	r0, #5
 800118a:	f000 f9f1 	bl	8001570 <setTimer>
		}
		break;
 800118e:	e005      	b.n	800119c <fsm_tuning_run+0x290>
	default:
		break;
 8001190:	bf00      	nop
 8001192:	e004      	b.n	800119e <fsm_tuning_run+0x292>
		break;
 8001194:	bf00      	nop
 8001196:	e002      	b.n	800119e <fsm_tuning_run+0x292>
		break;
 8001198:	bf00      	nop
 800119a:	e000      	b.n	800119e <fsm_tuning_run+0x292>
		break;
 800119c:	bf00      	nop
	}
}
 800119e:	bf00      	nop
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	2000007c 	.word	0x2000007c
 80011a8:	20000090 	.word	0x20000090
 80011ac:	20000148 	.word	0x20000148
 80011b0:	200000a4 	.word	0x200000a4
 80011b4:	20000098 	.word	0x20000098
 80011b8:	20000094 	.word	0x20000094

080011bc <HAL_UART_RxCpltCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) {}
}
 80011c4:	bf00      	nop
 80011c6:	370c      	adds	r7, #12
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bc80      	pop	{r7}
 80011cc:	4770      	bx	lr
	...

080011d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011d4:	f000 fbb2 	bl	800193c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011d8:	f000 f81e 	bl	8001218 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011dc:	f000 f944 	bl	8001468 <MX_GPIO_Init>
  MX_TIM2_Init();
 80011e0:	f000 f856 	bl	8001290 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80011e4:	f000 f916 	bl	8001414 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80011e8:	f000 f89e 	bl	8001328 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80011ec:	4808      	ldr	r0, [pc, #32]	; (8001210 <main+0x40>)
 80011ee:	f001 fbe3 	bl	80029b8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 80011f2:	4808      	ldr	r0, [pc, #32]	; (8001214 <main+0x44>)
 80011f4:	f001 fbe0 	bl	80029b8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80011f8:	2100      	movs	r1, #0
 80011fa:	4806      	ldr	r0, [pc, #24]	; (8001214 <main+0x44>)
 80011fc:	f001 fc86 	bl	8002b0c <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  fsm_automatic_run();
 8001200:	f7ff f98a 	bl	8000518 <fsm_automatic_run>
	  fsm_manual_run();
 8001204:	f7ff fbde 	bl	80009c4 <fsm_manual_run>
	  fsm_tuning_run();
 8001208:	f7ff fe80 	bl	8000f0c <fsm_tuning_run>
	  fsm_automatic_run();
 800120c:	e7f8      	b.n	8001200 <main+0x30>
 800120e:	bf00      	nop
 8001210:	20000248 	.word	0x20000248
 8001214:	20000200 	.word	0x20000200

08001218 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b090      	sub	sp, #64	; 0x40
 800121c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800121e:	f107 0318 	add.w	r3, r7, #24
 8001222:	2228      	movs	r2, #40	; 0x28
 8001224:	2100      	movs	r1, #0
 8001226:	4618      	mov	r0, r3
 8001228:	f002 fed0 	bl	8003fcc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800122c:	1d3b      	adds	r3, r7, #4
 800122e:	2200      	movs	r2, #0
 8001230:	601a      	str	r2, [r3, #0]
 8001232:	605a      	str	r2, [r3, #4]
 8001234:	609a      	str	r2, [r3, #8]
 8001236:	60da      	str	r2, [r3, #12]
 8001238:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800123a:	2302      	movs	r3, #2
 800123c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800123e:	2301      	movs	r3, #1
 8001240:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001242:	2310      	movs	r3, #16
 8001244:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001246:	2300      	movs	r3, #0
 8001248:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800124a:	f107 0318 	add.w	r3, r7, #24
 800124e:	4618      	mov	r0, r3
 8001250:	f000 ff48 	bl	80020e4 <HAL_RCC_OscConfig>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800125a:	f000 f984 	bl	8001566 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800125e:	230f      	movs	r3, #15
 8001260:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001262:	2300      	movs	r3, #0
 8001264:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001266:	2300      	movs	r3, #0
 8001268:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800126a:	2300      	movs	r3, #0
 800126c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800126e:	2300      	movs	r3, #0
 8001270:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001272:	1d3b      	adds	r3, r7, #4
 8001274:	2100      	movs	r1, #0
 8001276:	4618      	mov	r0, r3
 8001278:	f001 f9b4 	bl	80025e4 <HAL_RCC_ClockConfig>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001282:	f000 f970 	bl	8001566 <Error_Handler>
  }
}
 8001286:	bf00      	nop
 8001288:	3740      	adds	r7, #64	; 0x40
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
	...

08001290 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b086      	sub	sp, #24
 8001294:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001296:	f107 0308 	add.w	r3, r7, #8
 800129a:	2200      	movs	r2, #0
 800129c:	601a      	str	r2, [r3, #0]
 800129e:	605a      	str	r2, [r3, #4]
 80012a0:	609a      	str	r2, [r3, #8]
 80012a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012a4:	463b      	mov	r3, r7
 80012a6:	2200      	movs	r2, #0
 80012a8:	601a      	str	r2, [r3, #0]
 80012aa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012ac:	4b1d      	ldr	r3, [pc, #116]	; (8001324 <MX_TIM2_Init+0x94>)
 80012ae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012b2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63;
 80012b4:	4b1b      	ldr	r3, [pc, #108]	; (8001324 <MX_TIM2_Init+0x94>)
 80012b6:	223f      	movs	r2, #63	; 0x3f
 80012b8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012ba:	4b1a      	ldr	r3, [pc, #104]	; (8001324 <MX_TIM2_Init+0x94>)
 80012bc:	2200      	movs	r2, #0
 80012be:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10;
 80012c0:	4b18      	ldr	r3, [pc, #96]	; (8001324 <MX_TIM2_Init+0x94>)
 80012c2:	220a      	movs	r2, #10
 80012c4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012c6:	4b17      	ldr	r3, [pc, #92]	; (8001324 <MX_TIM2_Init+0x94>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012cc:	4b15      	ldr	r3, [pc, #84]	; (8001324 <MX_TIM2_Init+0x94>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80012d2:	4814      	ldr	r0, [pc, #80]	; (8001324 <MX_TIM2_Init+0x94>)
 80012d4:	f001 fb20 	bl	8002918 <HAL_TIM_Base_Init>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 80012de:	f000 f942 	bl	8001566 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012e6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80012e8:	f107 0308 	add.w	r3, r7, #8
 80012ec:	4619      	mov	r1, r3
 80012ee:	480d      	ldr	r0, [pc, #52]	; (8001324 <MX_TIM2_Init+0x94>)
 80012f0:	f001 fe0e 	bl	8002f10 <HAL_TIM_ConfigClockSource>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 80012fa:	f000 f934 	bl	8001566 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012fe:	2300      	movs	r3, #0
 8001300:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001302:	2300      	movs	r3, #0
 8001304:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001306:	463b      	mov	r3, r7
 8001308:	4619      	mov	r1, r3
 800130a:	4806      	ldr	r0, [pc, #24]	; (8001324 <MX_TIM2_Init+0x94>)
 800130c:	f002 f98c 	bl	8003628 <HAL_TIMEx_MasterConfigSynchronization>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8001316:	f000 f926 	bl	8001566 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800131a:	bf00      	nop
 800131c:	3718      	adds	r7, #24
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	20000248 	.word	0x20000248

08001328 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b08e      	sub	sp, #56	; 0x38
 800132c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800132e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001332:	2200      	movs	r2, #0
 8001334:	601a      	str	r2, [r3, #0]
 8001336:	605a      	str	r2, [r3, #4]
 8001338:	609a      	str	r2, [r3, #8]
 800133a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800133c:	f107 0320 	add.w	r3, r7, #32
 8001340:	2200      	movs	r2, #0
 8001342:	601a      	str	r2, [r3, #0]
 8001344:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001346:	1d3b      	adds	r3, r7, #4
 8001348:	2200      	movs	r2, #0
 800134a:	601a      	str	r2, [r3, #0]
 800134c:	605a      	str	r2, [r3, #4]
 800134e:	609a      	str	r2, [r3, #8]
 8001350:	60da      	str	r2, [r3, #12]
 8001352:	611a      	str	r2, [r3, #16]
 8001354:	615a      	str	r2, [r3, #20]
 8001356:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001358:	4b2c      	ldr	r3, [pc, #176]	; (800140c <MX_TIM3_Init+0xe4>)
 800135a:	4a2d      	ldr	r2, [pc, #180]	; (8001410 <MX_TIM3_Init+0xe8>)
 800135c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800135e:	4b2b      	ldr	r3, [pc, #172]	; (800140c <MX_TIM3_Init+0xe4>)
 8001360:	2200      	movs	r2, #0
 8001362:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001364:	4b29      	ldr	r3, [pc, #164]	; (800140c <MX_TIM3_Init+0xe4>)
 8001366:	2200      	movs	r2, #0
 8001368:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800136a:	4b28      	ldr	r3, [pc, #160]	; (800140c <MX_TIM3_Init+0xe4>)
 800136c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001370:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001372:	4b26      	ldr	r3, [pc, #152]	; (800140c <MX_TIM3_Init+0xe4>)
 8001374:	2200      	movs	r2, #0
 8001376:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001378:	4b24      	ldr	r3, [pc, #144]	; (800140c <MX_TIM3_Init+0xe4>)
 800137a:	2200      	movs	r2, #0
 800137c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800137e:	4823      	ldr	r0, [pc, #140]	; (800140c <MX_TIM3_Init+0xe4>)
 8001380:	f001 faca 	bl	8002918 <HAL_TIM_Base_Init>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800138a:	f000 f8ec 	bl	8001566 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800138e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001392:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001394:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001398:	4619      	mov	r1, r3
 800139a:	481c      	ldr	r0, [pc, #112]	; (800140c <MX_TIM3_Init+0xe4>)
 800139c:	f001 fdb8 	bl	8002f10 <HAL_TIM_ConfigClockSource>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80013a6:	f000 f8de 	bl	8001566 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 80013aa:	4818      	ldr	r0, [pc, #96]	; (800140c <MX_TIM3_Init+0xe4>)
 80013ac:	f001 fb56 	bl	8002a5c <HAL_TIM_OC_Init>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80013b6:	f000 f8d6 	bl	8001566 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013ba:	2300      	movs	r3, #0
 80013bc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013be:	2300      	movs	r3, #0
 80013c0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80013c2:	f107 0320 	add.w	r3, r7, #32
 80013c6:	4619      	mov	r1, r3
 80013c8:	4810      	ldr	r0, [pc, #64]	; (800140c <MX_TIM3_Init+0xe4>)
 80013ca:	f002 f92d 	bl	8003628 <HAL_TIMEx_MasterConfigSynchronization>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d001      	beq.n	80013d8 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80013d4:	f000 f8c7 	bl	8001566 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80013d8:	2300      	movs	r3, #0
 80013da:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80013dc:	2300      	movs	r3, #0
 80013de:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013e0:	2300      	movs	r3, #0
 80013e2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013e4:	2300      	movs	r3, #0
 80013e6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013e8:	1d3b      	adds	r3, r7, #4
 80013ea:	2200      	movs	r2, #0
 80013ec:	4619      	mov	r1, r3
 80013ee:	4807      	ldr	r0, [pc, #28]	; (800140c <MX_TIM3_Init+0xe4>)
 80013f0:	f001 fd36 	bl	8002e60 <HAL_TIM_OC_ConfigChannel>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80013fa:	f000 f8b4 	bl	8001566 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80013fe:	4803      	ldr	r0, [pc, #12]	; (800140c <MX_TIM3_Init+0xe4>)
 8001400:	f000 f970 	bl	80016e4 <HAL_TIM_MspPostInit>

}
 8001404:	bf00      	nop
 8001406:	3738      	adds	r7, #56	; 0x38
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	20000200 	.word	0x20000200
 8001410:	40000400 	.word	0x40000400

08001414 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001418:	4b11      	ldr	r3, [pc, #68]	; (8001460 <MX_USART2_UART_Init+0x4c>)
 800141a:	4a12      	ldr	r2, [pc, #72]	; (8001464 <MX_USART2_UART_Init+0x50>)
 800141c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800141e:	4b10      	ldr	r3, [pc, #64]	; (8001460 <MX_USART2_UART_Init+0x4c>)
 8001420:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001424:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001426:	4b0e      	ldr	r3, [pc, #56]	; (8001460 <MX_USART2_UART_Init+0x4c>)
 8001428:	2200      	movs	r2, #0
 800142a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800142c:	4b0c      	ldr	r3, [pc, #48]	; (8001460 <MX_USART2_UART_Init+0x4c>)
 800142e:	2200      	movs	r2, #0
 8001430:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001432:	4b0b      	ldr	r3, [pc, #44]	; (8001460 <MX_USART2_UART_Init+0x4c>)
 8001434:	2200      	movs	r2, #0
 8001436:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001438:	4b09      	ldr	r3, [pc, #36]	; (8001460 <MX_USART2_UART_Init+0x4c>)
 800143a:	220c      	movs	r2, #12
 800143c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800143e:	4b08      	ldr	r3, [pc, #32]	; (8001460 <MX_USART2_UART_Init+0x4c>)
 8001440:	2200      	movs	r2, #0
 8001442:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001444:	4b06      	ldr	r3, [pc, #24]	; (8001460 <MX_USART2_UART_Init+0x4c>)
 8001446:	2200      	movs	r2, #0
 8001448:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800144a:	4805      	ldr	r0, [pc, #20]	; (8001460 <MX_USART2_UART_Init+0x4c>)
 800144c:	f002 f95c 	bl	8003708 <HAL_UART_Init>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001456:	f000 f886 	bl	8001566 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800145a:	bf00      	nop
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	20000184 	.word	0x20000184
 8001464:	40004400 	.word	0x40004400

08001468 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b086      	sub	sp, #24
 800146c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800146e:	f107 0308 	add.w	r3, r7, #8
 8001472:	2200      	movs	r2, #0
 8001474:	601a      	str	r2, [r3, #0]
 8001476:	605a      	str	r2, [r3, #4]
 8001478:	609a      	str	r2, [r3, #8]
 800147a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800147c:	4b2e      	ldr	r3, [pc, #184]	; (8001538 <MX_GPIO_Init+0xd0>)
 800147e:	699b      	ldr	r3, [r3, #24]
 8001480:	4a2d      	ldr	r2, [pc, #180]	; (8001538 <MX_GPIO_Init+0xd0>)
 8001482:	f043 0304 	orr.w	r3, r3, #4
 8001486:	6193      	str	r3, [r2, #24]
 8001488:	4b2b      	ldr	r3, [pc, #172]	; (8001538 <MX_GPIO_Init+0xd0>)
 800148a:	699b      	ldr	r3, [r3, #24]
 800148c:	f003 0304 	and.w	r3, r3, #4
 8001490:	607b      	str	r3, [r7, #4]
 8001492:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001494:	4b28      	ldr	r3, [pc, #160]	; (8001538 <MX_GPIO_Init+0xd0>)
 8001496:	699b      	ldr	r3, [r3, #24]
 8001498:	4a27      	ldr	r2, [pc, #156]	; (8001538 <MX_GPIO_Init+0xd0>)
 800149a:	f043 0308 	orr.w	r3, r3, #8
 800149e:	6193      	str	r3, [r2, #24]
 80014a0:	4b25      	ldr	r3, [pc, #148]	; (8001538 <MX_GPIO_Init+0xd0>)
 80014a2:	699b      	ldr	r3, [r3, #24]
 80014a4:	f003 0308 	and.w	r3, r3, #8
 80014a8:	603b      	str	r3, [r7, #0]
 80014aa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D6_Pin|D3_Pin|D5_Pin|D4_Pin, GPIO_PIN_RESET);
 80014ac:	2200      	movs	r2, #0
 80014ae:	f44f 6187 	mov.w	r1, #1080	; 0x438
 80014b2:	4822      	ldr	r0, [pc, #136]	; (800153c <MX_GPIO_Init+0xd4>)
 80014b4:	f000 fdfd 	bl	80020b2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, D7_Pin|D2_Pin, GPIO_PIN_RESET);
 80014b8:	2200      	movs	r2, #0
 80014ba:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 80014be:	4820      	ldr	r0, [pc, #128]	; (8001540 <MX_GPIO_Init+0xd8>)
 80014c0:	f000 fdf7 	bl	80020b2 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin;
 80014c4:	2323      	movs	r3, #35	; 0x23
 80014c6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014c8:	2300      	movs	r3, #0
 80014ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014cc:	2300      	movs	r3, #0
 80014ce:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014d0:	f107 0308 	add.w	r3, r7, #8
 80014d4:	4619      	mov	r1, r3
 80014d6:	481a      	ldr	r0, [pc, #104]	; (8001540 <MX_GPIO_Init+0xd8>)
 80014d8:	f000 fc50 	bl	8001d7c <HAL_GPIO_Init>

  /*Configure GPIO pin : A3_Pin */
  GPIO_InitStruct.Pin = A3_Pin;
 80014dc:	2301      	movs	r3, #1
 80014de:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014e0:	2300      	movs	r3, #0
 80014e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e4:	2300      	movs	r3, #0
 80014e6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(A3_GPIO_Port, &GPIO_InitStruct);
 80014e8:	f107 0308 	add.w	r3, r7, #8
 80014ec:	4619      	mov	r1, r3
 80014ee:	4813      	ldr	r0, [pc, #76]	; (800153c <MX_GPIO_Init+0xd4>)
 80014f0:	f000 fc44 	bl	8001d7c <HAL_GPIO_Init>

  /*Configure GPIO pins : D6_Pin D3_Pin D5_Pin D4_Pin */
  GPIO_InitStruct.Pin = D6_Pin|D3_Pin|D5_Pin|D4_Pin;
 80014f4:	f44f 6387 	mov.w	r3, #1080	; 0x438
 80014f8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014fa:	2301      	movs	r3, #1
 80014fc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fe:	2300      	movs	r3, #0
 8001500:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001502:	2302      	movs	r3, #2
 8001504:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001506:	f107 0308 	add.w	r3, r7, #8
 800150a:	4619      	mov	r1, r3
 800150c:	480b      	ldr	r0, [pc, #44]	; (800153c <MX_GPIO_Init+0xd4>)
 800150e:	f000 fc35 	bl	8001d7c <HAL_GPIO_Init>

  /*Configure GPIO pins : D7_Pin D2_Pin */
  GPIO_InitStruct.Pin = D7_Pin|D2_Pin;
 8001512:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8001516:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001518:	2301      	movs	r3, #1
 800151a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151c:	2300      	movs	r3, #0
 800151e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001520:	2302      	movs	r3, #2
 8001522:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001524:	f107 0308 	add.w	r3, r7, #8
 8001528:	4619      	mov	r1, r3
 800152a:	4805      	ldr	r0, [pc, #20]	; (8001540 <MX_GPIO_Init+0xd8>)
 800152c:	f000 fc26 	bl	8001d7c <HAL_GPIO_Init>

}
 8001530:	bf00      	nop
 8001532:	3718      	adds	r7, #24
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	40021000 	.word	0x40021000
 800153c:	40010c00 	.word	0x40010c00
 8001540:	40010800 	.word	0x40010800

08001544 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001554:	d103      	bne.n	800155e <HAL_TIM_PeriodElapsedCallback+0x1a>
		timerRun();
 8001556:	f000 f823 	bl	80015a0 <timerRun>
		getKeyInput();
 800155a:	f7fe fe11 	bl	8000180 <getKeyInput>
	}
}
 800155e:	bf00      	nop
 8001560:	3708      	adds	r7, #8
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}

08001566 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001566:	b480      	push	{r7}
 8001568:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800156a:	b672      	cpsid	i
}
 800156c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800156e:	e7fe      	b.n	800156e <Error_Handler+0x8>

08001570 <setTimer>:
#include "software_timer.h"

int timer_flag[NUM_TIMERS]= { 0 };
int timer_counter[NUM_TIMERS] = { 0 };

void setTimer(int index, int duration) {
 8001570:	b480      	push	{r7}
 8001572:	b083      	sub	sp, #12
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
 8001578:	6039      	str	r1, [r7, #0]
	timer_flag[index] = 0;
 800157a:	4a07      	ldr	r2, [pc, #28]	; (8001598 <setTimer+0x28>)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2100      	movs	r1, #0
 8001580:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	timer_counter[index] = duration;
 8001584:	4905      	ldr	r1, [pc, #20]	; (800159c <setTimer+0x2c>)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	683a      	ldr	r2, [r7, #0]
 800158a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800158e:	bf00      	nop
 8001590:	370c      	adds	r7, #12
 8001592:	46bd      	mov	sp, r7
 8001594:	bc80      	pop	{r7}
 8001596:	4770      	bx	lr
 8001598:	20000148 	.word	0x20000148
 800159c:	20000160 	.word	0x20000160

080015a0 <timerRun>:


void timerRun() {
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_TIMERS; i++) {
 80015a6:	2300      	movs	r3, #0
 80015a8:	607b      	str	r3, [r7, #4]
 80015aa:	e01c      	b.n	80015e6 <timerRun+0x46>
		if (timer_counter[i] > 0) {
 80015ac:	4a12      	ldr	r2, [pc, #72]	; (80015f8 <timerRun+0x58>)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	dd13      	ble.n	80015e0 <timerRun+0x40>
			timer_counter[i]--;
 80015b8:	4a0f      	ldr	r2, [pc, #60]	; (80015f8 <timerRun+0x58>)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015c0:	1e5a      	subs	r2, r3, #1
 80015c2:	490d      	ldr	r1, [pc, #52]	; (80015f8 <timerRun+0x58>)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (timer_counter[i] == 0) {
 80015ca:	4a0b      	ldr	r2, [pc, #44]	; (80015f8 <timerRun+0x58>)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d104      	bne.n	80015e0 <timerRun+0x40>
				timer_flag[i] = 1;
 80015d6:	4a09      	ldr	r2, [pc, #36]	; (80015fc <timerRun+0x5c>)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2101      	movs	r1, #1
 80015dc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < NUM_TIMERS; i++) {
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	3301      	adds	r3, #1
 80015e4:	607b      	str	r3, [r7, #4]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2b05      	cmp	r3, #5
 80015ea:	dddf      	ble.n	80015ac <timerRun+0xc>
			}
		}
	}
}
 80015ec:	bf00      	nop
 80015ee:	bf00      	nop
 80015f0:	370c      	adds	r7, #12
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bc80      	pop	{r7}
 80015f6:	4770      	bx	lr
 80015f8:	20000160 	.word	0x20000160
 80015fc:	20000148 	.word	0x20000148

08001600 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001600:	b480      	push	{r7}
 8001602:	b085      	sub	sp, #20
 8001604:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001606:	4b15      	ldr	r3, [pc, #84]	; (800165c <HAL_MspInit+0x5c>)
 8001608:	699b      	ldr	r3, [r3, #24]
 800160a:	4a14      	ldr	r2, [pc, #80]	; (800165c <HAL_MspInit+0x5c>)
 800160c:	f043 0301 	orr.w	r3, r3, #1
 8001610:	6193      	str	r3, [r2, #24]
 8001612:	4b12      	ldr	r3, [pc, #72]	; (800165c <HAL_MspInit+0x5c>)
 8001614:	699b      	ldr	r3, [r3, #24]
 8001616:	f003 0301 	and.w	r3, r3, #1
 800161a:	60bb      	str	r3, [r7, #8]
 800161c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800161e:	4b0f      	ldr	r3, [pc, #60]	; (800165c <HAL_MspInit+0x5c>)
 8001620:	69db      	ldr	r3, [r3, #28]
 8001622:	4a0e      	ldr	r2, [pc, #56]	; (800165c <HAL_MspInit+0x5c>)
 8001624:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001628:	61d3      	str	r3, [r2, #28]
 800162a:	4b0c      	ldr	r3, [pc, #48]	; (800165c <HAL_MspInit+0x5c>)
 800162c:	69db      	ldr	r3, [r3, #28]
 800162e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001632:	607b      	str	r3, [r7, #4]
 8001634:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001636:	4b0a      	ldr	r3, [pc, #40]	; (8001660 <HAL_MspInit+0x60>)
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	60fb      	str	r3, [r7, #12]
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001642:	60fb      	str	r3, [r7, #12]
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800164a:	60fb      	str	r3, [r7, #12]
 800164c:	4a04      	ldr	r2, [pc, #16]	; (8001660 <HAL_MspInit+0x60>)
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001652:	bf00      	nop
 8001654:	3714      	adds	r7, #20
 8001656:	46bd      	mov	sp, r7
 8001658:	bc80      	pop	{r7}
 800165a:	4770      	bx	lr
 800165c:	40021000 	.word	0x40021000
 8001660:	40010000 	.word	0x40010000

08001664 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b084      	sub	sp, #16
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001674:	d114      	bne.n	80016a0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001676:	4b19      	ldr	r3, [pc, #100]	; (80016dc <HAL_TIM_Base_MspInit+0x78>)
 8001678:	69db      	ldr	r3, [r3, #28]
 800167a:	4a18      	ldr	r2, [pc, #96]	; (80016dc <HAL_TIM_Base_MspInit+0x78>)
 800167c:	f043 0301 	orr.w	r3, r3, #1
 8001680:	61d3      	str	r3, [r2, #28]
 8001682:	4b16      	ldr	r3, [pc, #88]	; (80016dc <HAL_TIM_Base_MspInit+0x78>)
 8001684:	69db      	ldr	r3, [r3, #28]
 8001686:	f003 0301 	and.w	r3, r3, #1
 800168a:	60fb      	str	r3, [r7, #12]
 800168c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800168e:	2200      	movs	r2, #0
 8001690:	2100      	movs	r1, #0
 8001692:	201c      	movs	r0, #28
 8001694:	f000 fa8b 	bl	8001bae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001698:	201c      	movs	r0, #28
 800169a:	f000 faa4 	bl	8001be6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800169e:	e018      	b.n	80016d2 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a0e      	ldr	r2, [pc, #56]	; (80016e0 <HAL_TIM_Base_MspInit+0x7c>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d113      	bne.n	80016d2 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80016aa:	4b0c      	ldr	r3, [pc, #48]	; (80016dc <HAL_TIM_Base_MspInit+0x78>)
 80016ac:	69db      	ldr	r3, [r3, #28]
 80016ae:	4a0b      	ldr	r2, [pc, #44]	; (80016dc <HAL_TIM_Base_MspInit+0x78>)
 80016b0:	f043 0302 	orr.w	r3, r3, #2
 80016b4:	61d3      	str	r3, [r2, #28]
 80016b6:	4b09      	ldr	r3, [pc, #36]	; (80016dc <HAL_TIM_Base_MspInit+0x78>)
 80016b8:	69db      	ldr	r3, [r3, #28]
 80016ba:	f003 0302 	and.w	r3, r3, #2
 80016be:	60bb      	str	r3, [r7, #8]
 80016c0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80016c2:	2200      	movs	r2, #0
 80016c4:	2100      	movs	r1, #0
 80016c6:	201d      	movs	r0, #29
 80016c8:	f000 fa71 	bl	8001bae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80016cc:	201d      	movs	r0, #29
 80016ce:	f000 fa8a 	bl	8001be6 <HAL_NVIC_EnableIRQ>
}
 80016d2:	bf00      	nop
 80016d4:	3710      	adds	r7, #16
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	40021000 	.word	0x40021000
 80016e0:	40000400 	.word	0x40000400

080016e4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b088      	sub	sp, #32
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ec:	f107 0310 	add.w	r3, r7, #16
 80016f0:	2200      	movs	r2, #0
 80016f2:	601a      	str	r2, [r3, #0]
 80016f4:	605a      	str	r2, [r3, #4]
 80016f6:	609a      	str	r2, [r3, #8]
 80016f8:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4a0f      	ldr	r2, [pc, #60]	; (800173c <HAL_TIM_MspPostInit+0x58>)
 8001700:	4293      	cmp	r3, r2
 8001702:	d117      	bne.n	8001734 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001704:	4b0e      	ldr	r3, [pc, #56]	; (8001740 <HAL_TIM_MspPostInit+0x5c>)
 8001706:	699b      	ldr	r3, [r3, #24]
 8001708:	4a0d      	ldr	r2, [pc, #52]	; (8001740 <HAL_TIM_MspPostInit+0x5c>)
 800170a:	f043 0304 	orr.w	r3, r3, #4
 800170e:	6193      	str	r3, [r2, #24]
 8001710:	4b0b      	ldr	r3, [pc, #44]	; (8001740 <HAL_TIM_MspPostInit+0x5c>)
 8001712:	699b      	ldr	r3, [r3, #24]
 8001714:	f003 0304 	and.w	r3, r3, #4
 8001718:	60fb      	str	r3, [r7, #12]
 800171a:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = D12_Pin;
 800171c:	2340      	movs	r3, #64	; 0x40
 800171e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001720:	2302      	movs	r3, #2
 8001722:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001724:	2302      	movs	r3, #2
 8001726:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(D12_GPIO_Port, &GPIO_InitStruct);
 8001728:	f107 0310 	add.w	r3, r7, #16
 800172c:	4619      	mov	r1, r3
 800172e:	4805      	ldr	r0, [pc, #20]	; (8001744 <HAL_TIM_MspPostInit+0x60>)
 8001730:	f000 fb24 	bl	8001d7c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001734:	bf00      	nop
 8001736:	3720      	adds	r7, #32
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	40000400 	.word	0x40000400
 8001740:	40021000 	.word	0x40021000
 8001744:	40010800 	.word	0x40010800

08001748 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b088      	sub	sp, #32
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001750:	f107 0310 	add.w	r3, r7, #16
 8001754:	2200      	movs	r2, #0
 8001756:	601a      	str	r2, [r3, #0]
 8001758:	605a      	str	r2, [r3, #4]
 800175a:	609a      	str	r2, [r3, #8]
 800175c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4a1f      	ldr	r2, [pc, #124]	; (80017e0 <HAL_UART_MspInit+0x98>)
 8001764:	4293      	cmp	r3, r2
 8001766:	d137      	bne.n	80017d8 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001768:	4b1e      	ldr	r3, [pc, #120]	; (80017e4 <HAL_UART_MspInit+0x9c>)
 800176a:	69db      	ldr	r3, [r3, #28]
 800176c:	4a1d      	ldr	r2, [pc, #116]	; (80017e4 <HAL_UART_MspInit+0x9c>)
 800176e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001772:	61d3      	str	r3, [r2, #28]
 8001774:	4b1b      	ldr	r3, [pc, #108]	; (80017e4 <HAL_UART_MspInit+0x9c>)
 8001776:	69db      	ldr	r3, [r3, #28]
 8001778:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800177c:	60fb      	str	r3, [r7, #12]
 800177e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001780:	4b18      	ldr	r3, [pc, #96]	; (80017e4 <HAL_UART_MspInit+0x9c>)
 8001782:	699b      	ldr	r3, [r3, #24]
 8001784:	4a17      	ldr	r2, [pc, #92]	; (80017e4 <HAL_UART_MspInit+0x9c>)
 8001786:	f043 0304 	orr.w	r3, r3, #4
 800178a:	6193      	str	r3, [r2, #24]
 800178c:	4b15      	ldr	r3, [pc, #84]	; (80017e4 <HAL_UART_MspInit+0x9c>)
 800178e:	699b      	ldr	r3, [r3, #24]
 8001790:	f003 0304 	and.w	r3, r3, #4
 8001794:	60bb      	str	r3, [r7, #8]
 8001796:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001798:	2304      	movs	r3, #4
 800179a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800179c:	2302      	movs	r3, #2
 800179e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017a0:	2303      	movs	r3, #3
 80017a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017a4:	f107 0310 	add.w	r3, r7, #16
 80017a8:	4619      	mov	r1, r3
 80017aa:	480f      	ldr	r0, [pc, #60]	; (80017e8 <HAL_UART_MspInit+0xa0>)
 80017ac:	f000 fae6 	bl	8001d7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80017b0:	2308      	movs	r3, #8
 80017b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017b4:	2300      	movs	r3, #0
 80017b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b8:	2300      	movs	r3, #0
 80017ba:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017bc:	f107 0310 	add.w	r3, r7, #16
 80017c0:	4619      	mov	r1, r3
 80017c2:	4809      	ldr	r0, [pc, #36]	; (80017e8 <HAL_UART_MspInit+0xa0>)
 80017c4:	f000 fada 	bl	8001d7c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80017c8:	2200      	movs	r2, #0
 80017ca:	2100      	movs	r1, #0
 80017cc:	2026      	movs	r0, #38	; 0x26
 80017ce:	f000 f9ee 	bl	8001bae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80017d2:	2026      	movs	r0, #38	; 0x26
 80017d4:	f000 fa07 	bl	8001be6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80017d8:	bf00      	nop
 80017da:	3720      	adds	r7, #32
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	40004400 	.word	0x40004400
 80017e4:	40021000 	.word	0x40021000
 80017e8:	40010800 	.word	0x40010800

080017ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017f0:	e7fe      	b.n	80017f0 <NMI_Handler+0x4>

080017f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017f2:	b480      	push	{r7}
 80017f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017f6:	e7fe      	b.n	80017f6 <HardFault_Handler+0x4>

080017f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017fc:	e7fe      	b.n	80017fc <MemManage_Handler+0x4>

080017fe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017fe:	b480      	push	{r7}
 8001800:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001802:	e7fe      	b.n	8001802 <BusFault_Handler+0x4>

08001804 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001808:	e7fe      	b.n	8001808 <UsageFault_Handler+0x4>

0800180a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800180a:	b480      	push	{r7}
 800180c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800180e:	bf00      	nop
 8001810:	46bd      	mov	sp, r7
 8001812:	bc80      	pop	{r7}
 8001814:	4770      	bx	lr

08001816 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001816:	b480      	push	{r7}
 8001818:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800181a:	bf00      	nop
 800181c:	46bd      	mov	sp, r7
 800181e:	bc80      	pop	{r7}
 8001820:	4770      	bx	lr

08001822 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001822:	b480      	push	{r7}
 8001824:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001826:	bf00      	nop
 8001828:	46bd      	mov	sp, r7
 800182a:	bc80      	pop	{r7}
 800182c:	4770      	bx	lr

0800182e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800182e:	b580      	push	{r7, lr}
 8001830:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001832:	f000 f8c9 	bl	80019c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001836:	bf00      	nop
 8001838:	bd80      	pop	{r7, pc}
	...

0800183c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001840:	4802      	ldr	r0, [pc, #8]	; (800184c <TIM2_IRQHandler+0x10>)
 8001842:	f001 fa05 	bl	8002c50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001846:	bf00      	nop
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	20000248 	.word	0x20000248

08001850 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001854:	4802      	ldr	r0, [pc, #8]	; (8001860 <TIM3_IRQHandler+0x10>)
 8001856:	f001 f9fb 	bl	8002c50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800185a:	bf00      	nop
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	20000200 	.word	0x20000200

08001864 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001868:	4802      	ldr	r0, [pc, #8]	; (8001874 <USART2_IRQHandler+0x10>)
 800186a:	f001 ffdf 	bl	800382c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800186e:	bf00      	nop
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	20000184 	.word	0x20000184

08001878 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b086      	sub	sp, #24
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001880:	4a14      	ldr	r2, [pc, #80]	; (80018d4 <_sbrk+0x5c>)
 8001882:	4b15      	ldr	r3, [pc, #84]	; (80018d8 <_sbrk+0x60>)
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800188c:	4b13      	ldr	r3, [pc, #76]	; (80018dc <_sbrk+0x64>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d102      	bne.n	800189a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001894:	4b11      	ldr	r3, [pc, #68]	; (80018dc <_sbrk+0x64>)
 8001896:	4a12      	ldr	r2, [pc, #72]	; (80018e0 <_sbrk+0x68>)
 8001898:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800189a:	4b10      	ldr	r3, [pc, #64]	; (80018dc <_sbrk+0x64>)
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	4413      	add	r3, r2
 80018a2:	693a      	ldr	r2, [r7, #16]
 80018a4:	429a      	cmp	r2, r3
 80018a6:	d207      	bcs.n	80018b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018a8:	f002 fb66 	bl	8003f78 <__errno>
 80018ac:	4603      	mov	r3, r0
 80018ae:	220c      	movs	r2, #12
 80018b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018b2:	f04f 33ff 	mov.w	r3, #4294967295
 80018b6:	e009      	b.n	80018cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018b8:	4b08      	ldr	r3, [pc, #32]	; (80018dc <_sbrk+0x64>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018be:	4b07      	ldr	r3, [pc, #28]	; (80018dc <_sbrk+0x64>)
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	4413      	add	r3, r2
 80018c6:	4a05      	ldr	r2, [pc, #20]	; (80018dc <_sbrk+0x64>)
 80018c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018ca:	68fb      	ldr	r3, [r7, #12]
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	3718      	adds	r7, #24
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	20005000 	.word	0x20005000
 80018d8:	00000400 	.word	0x00000400
 80018dc:	20000178 	.word	0x20000178
 80018e0:	200002a8 	.word	0x200002a8

080018e4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018e8:	bf00      	nop
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bc80      	pop	{r7}
 80018ee:	4770      	bx	lr

080018f0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018f0:	480c      	ldr	r0, [pc, #48]	; (8001924 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80018f2:	490d      	ldr	r1, [pc, #52]	; (8001928 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80018f4:	4a0d      	ldr	r2, [pc, #52]	; (800192c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80018f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018f8:	e002      	b.n	8001900 <LoopCopyDataInit>

080018fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018fe:	3304      	adds	r3, #4

08001900 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001900:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001902:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001904:	d3f9      	bcc.n	80018fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001906:	4a0a      	ldr	r2, [pc, #40]	; (8001930 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001908:	4c0a      	ldr	r4, [pc, #40]	; (8001934 <LoopFillZerobss+0x22>)
  movs r3, #0
 800190a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800190c:	e001      	b.n	8001912 <LoopFillZerobss>

0800190e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800190e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001910:	3204      	adds	r2, #4

08001912 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001912:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001914:	d3fb      	bcc.n	800190e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001916:	f7ff ffe5 	bl	80018e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800191a:	f002 fb33 	bl	8003f84 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800191e:	f7ff fc57 	bl	80011d0 <main>
  bx lr
 8001922:	4770      	bx	lr
  ldr r0, =_sdata
 8001924:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001928:	20000118 	.word	0x20000118
  ldr r2, =_sidata
 800192c:	080048f0 	.word	0x080048f0
  ldr r2, =_sbss
 8001930:	20000118 	.word	0x20000118
  ldr r4, =_ebss
 8001934:	200002a4 	.word	0x200002a4

08001938 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001938:	e7fe      	b.n	8001938 <ADC1_2_IRQHandler>
	...

0800193c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001940:	4b08      	ldr	r3, [pc, #32]	; (8001964 <HAL_Init+0x28>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a07      	ldr	r2, [pc, #28]	; (8001964 <HAL_Init+0x28>)
 8001946:	f043 0310 	orr.w	r3, r3, #16
 800194a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800194c:	2003      	movs	r0, #3
 800194e:	f000 f923 	bl	8001b98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001952:	200f      	movs	r0, #15
 8001954:	f000 f808 	bl	8001968 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001958:	f7ff fe52 	bl	8001600 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800195c:	2300      	movs	r3, #0
}
 800195e:	4618      	mov	r0, r3
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	40022000 	.word	0x40022000

08001968 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001970:	4b12      	ldr	r3, [pc, #72]	; (80019bc <HAL_InitTick+0x54>)
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	4b12      	ldr	r3, [pc, #72]	; (80019c0 <HAL_InitTick+0x58>)
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	4619      	mov	r1, r3
 800197a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800197e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001982:	fbb2 f3f3 	udiv	r3, r2, r3
 8001986:	4618      	mov	r0, r3
 8001988:	f000 f93b 	bl	8001c02 <HAL_SYSTICK_Config>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d001      	beq.n	8001996 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001992:	2301      	movs	r3, #1
 8001994:	e00e      	b.n	80019b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2b0f      	cmp	r3, #15
 800199a:	d80a      	bhi.n	80019b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800199c:	2200      	movs	r2, #0
 800199e:	6879      	ldr	r1, [r7, #4]
 80019a0:	f04f 30ff 	mov.w	r0, #4294967295
 80019a4:	f000 f903 	bl	8001bae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019a8:	4a06      	ldr	r2, [pc, #24]	; (80019c4 <HAL_InitTick+0x5c>)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019ae:	2300      	movs	r3, #0
 80019b0:	e000      	b.n	80019b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	3708      	adds	r7, #8
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	200000a8 	.word	0x200000a8
 80019c0:	200000b0 	.word	0x200000b0
 80019c4:	200000ac 	.word	0x200000ac

080019c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019cc:	4b05      	ldr	r3, [pc, #20]	; (80019e4 <HAL_IncTick+0x1c>)
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	461a      	mov	r2, r3
 80019d2:	4b05      	ldr	r3, [pc, #20]	; (80019e8 <HAL_IncTick+0x20>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4413      	add	r3, r2
 80019d8:	4a03      	ldr	r2, [pc, #12]	; (80019e8 <HAL_IncTick+0x20>)
 80019da:	6013      	str	r3, [r2, #0]
}
 80019dc:	bf00      	nop
 80019de:	46bd      	mov	sp, r7
 80019e0:	bc80      	pop	{r7}
 80019e2:	4770      	bx	lr
 80019e4:	200000b0 	.word	0x200000b0
 80019e8:	20000290 	.word	0x20000290

080019ec <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
  return uwTick;
 80019f0:	4b02      	ldr	r3, [pc, #8]	; (80019fc <HAL_GetTick+0x10>)
 80019f2:	681b      	ldr	r3, [r3, #0]
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bc80      	pop	{r7}
 80019fa:	4770      	bx	lr
 80019fc:	20000290 	.word	0x20000290

08001a00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b085      	sub	sp, #20
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	f003 0307 	and.w	r3, r3, #7
 8001a0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a10:	4b0c      	ldr	r3, [pc, #48]	; (8001a44 <__NVIC_SetPriorityGrouping+0x44>)
 8001a12:	68db      	ldr	r3, [r3, #12]
 8001a14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a16:	68ba      	ldr	r2, [r7, #8]
 8001a18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a32:	4a04      	ldr	r2, [pc, #16]	; (8001a44 <__NVIC_SetPriorityGrouping+0x44>)
 8001a34:	68bb      	ldr	r3, [r7, #8]
 8001a36:	60d3      	str	r3, [r2, #12]
}
 8001a38:	bf00      	nop
 8001a3a:	3714      	adds	r7, #20
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bc80      	pop	{r7}
 8001a40:	4770      	bx	lr
 8001a42:	bf00      	nop
 8001a44:	e000ed00 	.word	0xe000ed00

08001a48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a4c:	4b04      	ldr	r3, [pc, #16]	; (8001a60 <__NVIC_GetPriorityGrouping+0x18>)
 8001a4e:	68db      	ldr	r3, [r3, #12]
 8001a50:	0a1b      	lsrs	r3, r3, #8
 8001a52:	f003 0307 	and.w	r3, r3, #7
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bc80      	pop	{r7}
 8001a5c:	4770      	bx	lr
 8001a5e:	bf00      	nop
 8001a60:	e000ed00 	.word	0xe000ed00

08001a64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b083      	sub	sp, #12
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	db0b      	blt.n	8001a8e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a76:	79fb      	ldrb	r3, [r7, #7]
 8001a78:	f003 021f 	and.w	r2, r3, #31
 8001a7c:	4906      	ldr	r1, [pc, #24]	; (8001a98 <__NVIC_EnableIRQ+0x34>)
 8001a7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a82:	095b      	lsrs	r3, r3, #5
 8001a84:	2001      	movs	r0, #1
 8001a86:	fa00 f202 	lsl.w	r2, r0, r2
 8001a8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a8e:	bf00      	nop
 8001a90:	370c      	adds	r7, #12
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bc80      	pop	{r7}
 8001a96:	4770      	bx	lr
 8001a98:	e000e100 	.word	0xe000e100

08001a9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b083      	sub	sp, #12
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	6039      	str	r1, [r7, #0]
 8001aa6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001aa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	db0a      	blt.n	8001ac6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	b2da      	uxtb	r2, r3
 8001ab4:	490c      	ldr	r1, [pc, #48]	; (8001ae8 <__NVIC_SetPriority+0x4c>)
 8001ab6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aba:	0112      	lsls	r2, r2, #4
 8001abc:	b2d2      	uxtb	r2, r2
 8001abe:	440b      	add	r3, r1
 8001ac0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ac4:	e00a      	b.n	8001adc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	b2da      	uxtb	r2, r3
 8001aca:	4908      	ldr	r1, [pc, #32]	; (8001aec <__NVIC_SetPriority+0x50>)
 8001acc:	79fb      	ldrb	r3, [r7, #7]
 8001ace:	f003 030f 	and.w	r3, r3, #15
 8001ad2:	3b04      	subs	r3, #4
 8001ad4:	0112      	lsls	r2, r2, #4
 8001ad6:	b2d2      	uxtb	r2, r2
 8001ad8:	440b      	add	r3, r1
 8001ada:	761a      	strb	r2, [r3, #24]
}
 8001adc:	bf00      	nop
 8001ade:	370c      	adds	r7, #12
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bc80      	pop	{r7}
 8001ae4:	4770      	bx	lr
 8001ae6:	bf00      	nop
 8001ae8:	e000e100 	.word	0xe000e100
 8001aec:	e000ed00 	.word	0xe000ed00

08001af0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b089      	sub	sp, #36	; 0x24
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	60f8      	str	r0, [r7, #12]
 8001af8:	60b9      	str	r1, [r7, #8]
 8001afa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	f003 0307 	and.w	r3, r3, #7
 8001b02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b04:	69fb      	ldr	r3, [r7, #28]
 8001b06:	f1c3 0307 	rsb	r3, r3, #7
 8001b0a:	2b04      	cmp	r3, #4
 8001b0c:	bf28      	it	cs
 8001b0e:	2304      	movcs	r3, #4
 8001b10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b12:	69fb      	ldr	r3, [r7, #28]
 8001b14:	3304      	adds	r3, #4
 8001b16:	2b06      	cmp	r3, #6
 8001b18:	d902      	bls.n	8001b20 <NVIC_EncodePriority+0x30>
 8001b1a:	69fb      	ldr	r3, [r7, #28]
 8001b1c:	3b03      	subs	r3, #3
 8001b1e:	e000      	b.n	8001b22 <NVIC_EncodePriority+0x32>
 8001b20:	2300      	movs	r3, #0
 8001b22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b24:	f04f 32ff 	mov.w	r2, #4294967295
 8001b28:	69bb      	ldr	r3, [r7, #24]
 8001b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2e:	43da      	mvns	r2, r3
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	401a      	ands	r2, r3
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b38:	f04f 31ff 	mov.w	r1, #4294967295
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b42:	43d9      	mvns	r1, r3
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b48:	4313      	orrs	r3, r2
         );
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3724      	adds	r7, #36	; 0x24
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bc80      	pop	{r7}
 8001b52:	4770      	bx	lr

08001b54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	3b01      	subs	r3, #1
 8001b60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b64:	d301      	bcc.n	8001b6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b66:	2301      	movs	r3, #1
 8001b68:	e00f      	b.n	8001b8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b6a:	4a0a      	ldr	r2, [pc, #40]	; (8001b94 <SysTick_Config+0x40>)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	3b01      	subs	r3, #1
 8001b70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b72:	210f      	movs	r1, #15
 8001b74:	f04f 30ff 	mov.w	r0, #4294967295
 8001b78:	f7ff ff90 	bl	8001a9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b7c:	4b05      	ldr	r3, [pc, #20]	; (8001b94 <SysTick_Config+0x40>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b82:	4b04      	ldr	r3, [pc, #16]	; (8001b94 <SysTick_Config+0x40>)
 8001b84:	2207      	movs	r2, #7
 8001b86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b88:	2300      	movs	r3, #0
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3708      	adds	r7, #8
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	e000e010 	.word	0xe000e010

08001b98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ba0:	6878      	ldr	r0, [r7, #4]
 8001ba2:	f7ff ff2d 	bl	8001a00 <__NVIC_SetPriorityGrouping>
}
 8001ba6:	bf00      	nop
 8001ba8:	3708      	adds	r7, #8
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}

08001bae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bae:	b580      	push	{r7, lr}
 8001bb0:	b086      	sub	sp, #24
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	60b9      	str	r1, [r7, #8]
 8001bb8:	607a      	str	r2, [r7, #4]
 8001bba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bc0:	f7ff ff42 	bl	8001a48 <__NVIC_GetPriorityGrouping>
 8001bc4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bc6:	687a      	ldr	r2, [r7, #4]
 8001bc8:	68b9      	ldr	r1, [r7, #8]
 8001bca:	6978      	ldr	r0, [r7, #20]
 8001bcc:	f7ff ff90 	bl	8001af0 <NVIC_EncodePriority>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bd6:	4611      	mov	r1, r2
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f7ff ff5f 	bl	8001a9c <__NVIC_SetPriority>
}
 8001bde:	bf00      	nop
 8001be0:	3718      	adds	r7, #24
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}

08001be6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001be6:	b580      	push	{r7, lr}
 8001be8:	b082      	sub	sp, #8
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	4603      	mov	r3, r0
 8001bee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f7ff ff35 	bl	8001a64 <__NVIC_EnableIRQ>
}
 8001bfa:	bf00      	nop
 8001bfc:	3708      	adds	r7, #8
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}

08001c02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c02:	b580      	push	{r7, lr}
 8001c04:	b082      	sub	sp, #8
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c0a:	6878      	ldr	r0, [r7, #4]
 8001c0c:	f7ff ffa2 	bl	8001b54 <SysTick_Config>
 8001c10:	4603      	mov	r3, r0
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	3708      	adds	r7, #8
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}

08001c1a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c1a:	b480      	push	{r7}
 8001c1c:	b085      	sub	sp, #20
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c22:	2300      	movs	r3, #0
 8001c24:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001c2c:	2b02      	cmp	r3, #2
 8001c2e:	d008      	beq.n	8001c42 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2204      	movs	r2, #4
 8001c34:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e020      	b.n	8001c84 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f022 020e 	bic.w	r2, r2, #14
 8001c50:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f022 0201 	bic.w	r2, r2, #1
 8001c60:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c6a:	2101      	movs	r1, #1
 8001c6c:	fa01 f202 	lsl.w	r2, r1, r2
 8001c70:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2201      	movs	r2, #1
 8001c76:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001c82:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	3714      	adds	r7, #20
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bc80      	pop	{r7}
 8001c8c:	4770      	bx	lr
	...

08001c90 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b084      	sub	sp, #16
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001ca2:	2b02      	cmp	r3, #2
 8001ca4:	d005      	beq.n	8001cb2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2204      	movs	r2, #4
 8001caa:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001cac:	2301      	movs	r3, #1
 8001cae:	73fb      	strb	r3, [r7, #15]
 8001cb0:	e051      	b.n	8001d56 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f022 020e 	bic.w	r2, r2, #14
 8001cc0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f022 0201 	bic.w	r2, r2, #1
 8001cd0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a22      	ldr	r2, [pc, #136]	; (8001d60 <HAL_DMA_Abort_IT+0xd0>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d029      	beq.n	8001d30 <HAL_DMA_Abort_IT+0xa0>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a20      	ldr	r2, [pc, #128]	; (8001d64 <HAL_DMA_Abort_IT+0xd4>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d022      	beq.n	8001d2c <HAL_DMA_Abort_IT+0x9c>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a1f      	ldr	r2, [pc, #124]	; (8001d68 <HAL_DMA_Abort_IT+0xd8>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d01a      	beq.n	8001d26 <HAL_DMA_Abort_IT+0x96>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a1d      	ldr	r2, [pc, #116]	; (8001d6c <HAL_DMA_Abort_IT+0xdc>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d012      	beq.n	8001d20 <HAL_DMA_Abort_IT+0x90>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a1c      	ldr	r2, [pc, #112]	; (8001d70 <HAL_DMA_Abort_IT+0xe0>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d00a      	beq.n	8001d1a <HAL_DMA_Abort_IT+0x8a>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a1a      	ldr	r2, [pc, #104]	; (8001d74 <HAL_DMA_Abort_IT+0xe4>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d102      	bne.n	8001d14 <HAL_DMA_Abort_IT+0x84>
 8001d0e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001d12:	e00e      	b.n	8001d32 <HAL_DMA_Abort_IT+0xa2>
 8001d14:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001d18:	e00b      	b.n	8001d32 <HAL_DMA_Abort_IT+0xa2>
 8001d1a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d1e:	e008      	b.n	8001d32 <HAL_DMA_Abort_IT+0xa2>
 8001d20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d24:	e005      	b.n	8001d32 <HAL_DMA_Abort_IT+0xa2>
 8001d26:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d2a:	e002      	b.n	8001d32 <HAL_DMA_Abort_IT+0xa2>
 8001d2c:	2310      	movs	r3, #16
 8001d2e:	e000      	b.n	8001d32 <HAL_DMA_Abort_IT+0xa2>
 8001d30:	2301      	movs	r3, #1
 8001d32:	4a11      	ldr	r2, [pc, #68]	; (8001d78 <HAL_DMA_Abort_IT+0xe8>)
 8001d34:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2201      	movs	r2, #1
 8001d3a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2200      	movs	r2, #0
 8001d42:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d003      	beq.n	8001d56 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	4798      	blx	r3
    } 
  }
  return status;
 8001d56:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	3710      	adds	r7, #16
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	40020008 	.word	0x40020008
 8001d64:	4002001c 	.word	0x4002001c
 8001d68:	40020030 	.word	0x40020030
 8001d6c:	40020044 	.word	0x40020044
 8001d70:	40020058 	.word	0x40020058
 8001d74:	4002006c 	.word	0x4002006c
 8001d78:	40020000 	.word	0x40020000

08001d7c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b08b      	sub	sp, #44	; 0x2c
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d86:	2300      	movs	r3, #0
 8001d88:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d8e:	e169      	b.n	8002064 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001d90:	2201      	movs	r2, #1
 8001d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d94:	fa02 f303 	lsl.w	r3, r2, r3
 8001d98:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	69fa      	ldr	r2, [r7, #28]
 8001da0:	4013      	ands	r3, r2
 8001da2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001da4:	69ba      	ldr	r2, [r7, #24]
 8001da6:	69fb      	ldr	r3, [r7, #28]
 8001da8:	429a      	cmp	r2, r3
 8001daa:	f040 8158 	bne.w	800205e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	4a9a      	ldr	r2, [pc, #616]	; (800201c <HAL_GPIO_Init+0x2a0>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d05e      	beq.n	8001e76 <HAL_GPIO_Init+0xfa>
 8001db8:	4a98      	ldr	r2, [pc, #608]	; (800201c <HAL_GPIO_Init+0x2a0>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d875      	bhi.n	8001eaa <HAL_GPIO_Init+0x12e>
 8001dbe:	4a98      	ldr	r2, [pc, #608]	; (8002020 <HAL_GPIO_Init+0x2a4>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d058      	beq.n	8001e76 <HAL_GPIO_Init+0xfa>
 8001dc4:	4a96      	ldr	r2, [pc, #600]	; (8002020 <HAL_GPIO_Init+0x2a4>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d86f      	bhi.n	8001eaa <HAL_GPIO_Init+0x12e>
 8001dca:	4a96      	ldr	r2, [pc, #600]	; (8002024 <HAL_GPIO_Init+0x2a8>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d052      	beq.n	8001e76 <HAL_GPIO_Init+0xfa>
 8001dd0:	4a94      	ldr	r2, [pc, #592]	; (8002024 <HAL_GPIO_Init+0x2a8>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d869      	bhi.n	8001eaa <HAL_GPIO_Init+0x12e>
 8001dd6:	4a94      	ldr	r2, [pc, #592]	; (8002028 <HAL_GPIO_Init+0x2ac>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d04c      	beq.n	8001e76 <HAL_GPIO_Init+0xfa>
 8001ddc:	4a92      	ldr	r2, [pc, #584]	; (8002028 <HAL_GPIO_Init+0x2ac>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d863      	bhi.n	8001eaa <HAL_GPIO_Init+0x12e>
 8001de2:	4a92      	ldr	r2, [pc, #584]	; (800202c <HAL_GPIO_Init+0x2b0>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d046      	beq.n	8001e76 <HAL_GPIO_Init+0xfa>
 8001de8:	4a90      	ldr	r2, [pc, #576]	; (800202c <HAL_GPIO_Init+0x2b0>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d85d      	bhi.n	8001eaa <HAL_GPIO_Init+0x12e>
 8001dee:	2b12      	cmp	r3, #18
 8001df0:	d82a      	bhi.n	8001e48 <HAL_GPIO_Init+0xcc>
 8001df2:	2b12      	cmp	r3, #18
 8001df4:	d859      	bhi.n	8001eaa <HAL_GPIO_Init+0x12e>
 8001df6:	a201      	add	r2, pc, #4	; (adr r2, 8001dfc <HAL_GPIO_Init+0x80>)
 8001df8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dfc:	08001e77 	.word	0x08001e77
 8001e00:	08001e51 	.word	0x08001e51
 8001e04:	08001e63 	.word	0x08001e63
 8001e08:	08001ea5 	.word	0x08001ea5
 8001e0c:	08001eab 	.word	0x08001eab
 8001e10:	08001eab 	.word	0x08001eab
 8001e14:	08001eab 	.word	0x08001eab
 8001e18:	08001eab 	.word	0x08001eab
 8001e1c:	08001eab 	.word	0x08001eab
 8001e20:	08001eab 	.word	0x08001eab
 8001e24:	08001eab 	.word	0x08001eab
 8001e28:	08001eab 	.word	0x08001eab
 8001e2c:	08001eab 	.word	0x08001eab
 8001e30:	08001eab 	.word	0x08001eab
 8001e34:	08001eab 	.word	0x08001eab
 8001e38:	08001eab 	.word	0x08001eab
 8001e3c:	08001eab 	.word	0x08001eab
 8001e40:	08001e59 	.word	0x08001e59
 8001e44:	08001e6d 	.word	0x08001e6d
 8001e48:	4a79      	ldr	r2, [pc, #484]	; (8002030 <HAL_GPIO_Init+0x2b4>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d013      	beq.n	8001e76 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001e4e:	e02c      	b.n	8001eaa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	68db      	ldr	r3, [r3, #12]
 8001e54:	623b      	str	r3, [r7, #32]
          break;
 8001e56:	e029      	b.n	8001eac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	68db      	ldr	r3, [r3, #12]
 8001e5c:	3304      	adds	r3, #4
 8001e5e:	623b      	str	r3, [r7, #32]
          break;
 8001e60:	e024      	b.n	8001eac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	68db      	ldr	r3, [r3, #12]
 8001e66:	3308      	adds	r3, #8
 8001e68:	623b      	str	r3, [r7, #32]
          break;
 8001e6a:	e01f      	b.n	8001eac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	68db      	ldr	r3, [r3, #12]
 8001e70:	330c      	adds	r3, #12
 8001e72:	623b      	str	r3, [r7, #32]
          break;
 8001e74:	e01a      	b.n	8001eac <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d102      	bne.n	8001e84 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001e7e:	2304      	movs	r3, #4
 8001e80:	623b      	str	r3, [r7, #32]
          break;
 8001e82:	e013      	b.n	8001eac <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	d105      	bne.n	8001e98 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e8c:	2308      	movs	r3, #8
 8001e8e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	69fa      	ldr	r2, [r7, #28]
 8001e94:	611a      	str	r2, [r3, #16]
          break;
 8001e96:	e009      	b.n	8001eac <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e98:	2308      	movs	r3, #8
 8001e9a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	69fa      	ldr	r2, [r7, #28]
 8001ea0:	615a      	str	r2, [r3, #20]
          break;
 8001ea2:	e003      	b.n	8001eac <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	623b      	str	r3, [r7, #32]
          break;
 8001ea8:	e000      	b.n	8001eac <HAL_GPIO_Init+0x130>
          break;
 8001eaa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001eac:	69bb      	ldr	r3, [r7, #24]
 8001eae:	2bff      	cmp	r3, #255	; 0xff
 8001eb0:	d801      	bhi.n	8001eb6 <HAL_GPIO_Init+0x13a>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	e001      	b.n	8001eba <HAL_GPIO_Init+0x13e>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	3304      	adds	r3, #4
 8001eba:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001ebc:	69bb      	ldr	r3, [r7, #24]
 8001ebe:	2bff      	cmp	r3, #255	; 0xff
 8001ec0:	d802      	bhi.n	8001ec8 <HAL_GPIO_Init+0x14c>
 8001ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec4:	009b      	lsls	r3, r3, #2
 8001ec6:	e002      	b.n	8001ece <HAL_GPIO_Init+0x152>
 8001ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eca:	3b08      	subs	r3, #8
 8001ecc:	009b      	lsls	r3, r3, #2
 8001ece:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	210f      	movs	r1, #15
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	fa01 f303 	lsl.w	r3, r1, r3
 8001edc:	43db      	mvns	r3, r3
 8001ede:	401a      	ands	r2, r3
 8001ee0:	6a39      	ldr	r1, [r7, #32]
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ee8:	431a      	orrs	r2, r3
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	f000 80b1 	beq.w	800205e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001efc:	4b4d      	ldr	r3, [pc, #308]	; (8002034 <HAL_GPIO_Init+0x2b8>)
 8001efe:	699b      	ldr	r3, [r3, #24]
 8001f00:	4a4c      	ldr	r2, [pc, #304]	; (8002034 <HAL_GPIO_Init+0x2b8>)
 8001f02:	f043 0301 	orr.w	r3, r3, #1
 8001f06:	6193      	str	r3, [r2, #24]
 8001f08:	4b4a      	ldr	r3, [pc, #296]	; (8002034 <HAL_GPIO_Init+0x2b8>)
 8001f0a:	699b      	ldr	r3, [r3, #24]
 8001f0c:	f003 0301 	and.w	r3, r3, #1
 8001f10:	60bb      	str	r3, [r7, #8]
 8001f12:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001f14:	4a48      	ldr	r2, [pc, #288]	; (8002038 <HAL_GPIO_Init+0x2bc>)
 8001f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f18:	089b      	lsrs	r3, r3, #2
 8001f1a:	3302      	adds	r3, #2
 8001f1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f20:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f24:	f003 0303 	and.w	r3, r3, #3
 8001f28:	009b      	lsls	r3, r3, #2
 8001f2a:	220f      	movs	r2, #15
 8001f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f30:	43db      	mvns	r3, r3
 8001f32:	68fa      	ldr	r2, [r7, #12]
 8001f34:	4013      	ands	r3, r2
 8001f36:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	4a40      	ldr	r2, [pc, #256]	; (800203c <HAL_GPIO_Init+0x2c0>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d013      	beq.n	8001f68 <HAL_GPIO_Init+0x1ec>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	4a3f      	ldr	r2, [pc, #252]	; (8002040 <HAL_GPIO_Init+0x2c4>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d00d      	beq.n	8001f64 <HAL_GPIO_Init+0x1e8>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	4a3e      	ldr	r2, [pc, #248]	; (8002044 <HAL_GPIO_Init+0x2c8>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d007      	beq.n	8001f60 <HAL_GPIO_Init+0x1e4>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	4a3d      	ldr	r2, [pc, #244]	; (8002048 <HAL_GPIO_Init+0x2cc>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d101      	bne.n	8001f5c <HAL_GPIO_Init+0x1e0>
 8001f58:	2303      	movs	r3, #3
 8001f5a:	e006      	b.n	8001f6a <HAL_GPIO_Init+0x1ee>
 8001f5c:	2304      	movs	r3, #4
 8001f5e:	e004      	b.n	8001f6a <HAL_GPIO_Init+0x1ee>
 8001f60:	2302      	movs	r3, #2
 8001f62:	e002      	b.n	8001f6a <HAL_GPIO_Init+0x1ee>
 8001f64:	2301      	movs	r3, #1
 8001f66:	e000      	b.n	8001f6a <HAL_GPIO_Init+0x1ee>
 8001f68:	2300      	movs	r3, #0
 8001f6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f6c:	f002 0203 	and.w	r2, r2, #3
 8001f70:	0092      	lsls	r2, r2, #2
 8001f72:	4093      	lsls	r3, r2
 8001f74:	68fa      	ldr	r2, [r7, #12]
 8001f76:	4313      	orrs	r3, r2
 8001f78:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001f7a:	492f      	ldr	r1, [pc, #188]	; (8002038 <HAL_GPIO_Init+0x2bc>)
 8001f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f7e:	089b      	lsrs	r3, r3, #2
 8001f80:	3302      	adds	r3, #2
 8001f82:	68fa      	ldr	r2, [r7, #12]
 8001f84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d006      	beq.n	8001fa2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001f94:	4b2d      	ldr	r3, [pc, #180]	; (800204c <HAL_GPIO_Init+0x2d0>)
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	492c      	ldr	r1, [pc, #176]	; (800204c <HAL_GPIO_Init+0x2d0>)
 8001f9a:	69bb      	ldr	r3, [r7, #24]
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	600b      	str	r3, [r1, #0]
 8001fa0:	e006      	b.n	8001fb0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001fa2:	4b2a      	ldr	r3, [pc, #168]	; (800204c <HAL_GPIO_Init+0x2d0>)
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	69bb      	ldr	r3, [r7, #24]
 8001fa8:	43db      	mvns	r3, r3
 8001faa:	4928      	ldr	r1, [pc, #160]	; (800204c <HAL_GPIO_Init+0x2d0>)
 8001fac:	4013      	ands	r3, r2
 8001fae:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d006      	beq.n	8001fca <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001fbc:	4b23      	ldr	r3, [pc, #140]	; (800204c <HAL_GPIO_Init+0x2d0>)
 8001fbe:	685a      	ldr	r2, [r3, #4]
 8001fc0:	4922      	ldr	r1, [pc, #136]	; (800204c <HAL_GPIO_Init+0x2d0>)
 8001fc2:	69bb      	ldr	r3, [r7, #24]
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	604b      	str	r3, [r1, #4]
 8001fc8:	e006      	b.n	8001fd8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001fca:	4b20      	ldr	r3, [pc, #128]	; (800204c <HAL_GPIO_Init+0x2d0>)
 8001fcc:	685a      	ldr	r2, [r3, #4]
 8001fce:	69bb      	ldr	r3, [r7, #24]
 8001fd0:	43db      	mvns	r3, r3
 8001fd2:	491e      	ldr	r1, [pc, #120]	; (800204c <HAL_GPIO_Init+0x2d0>)
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d006      	beq.n	8001ff2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001fe4:	4b19      	ldr	r3, [pc, #100]	; (800204c <HAL_GPIO_Init+0x2d0>)
 8001fe6:	689a      	ldr	r2, [r3, #8]
 8001fe8:	4918      	ldr	r1, [pc, #96]	; (800204c <HAL_GPIO_Init+0x2d0>)
 8001fea:	69bb      	ldr	r3, [r7, #24]
 8001fec:	4313      	orrs	r3, r2
 8001fee:	608b      	str	r3, [r1, #8]
 8001ff0:	e006      	b.n	8002000 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001ff2:	4b16      	ldr	r3, [pc, #88]	; (800204c <HAL_GPIO_Init+0x2d0>)
 8001ff4:	689a      	ldr	r2, [r3, #8]
 8001ff6:	69bb      	ldr	r3, [r7, #24]
 8001ff8:	43db      	mvns	r3, r3
 8001ffa:	4914      	ldr	r1, [pc, #80]	; (800204c <HAL_GPIO_Init+0x2d0>)
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002008:	2b00      	cmp	r3, #0
 800200a:	d021      	beq.n	8002050 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800200c:	4b0f      	ldr	r3, [pc, #60]	; (800204c <HAL_GPIO_Init+0x2d0>)
 800200e:	68da      	ldr	r2, [r3, #12]
 8002010:	490e      	ldr	r1, [pc, #56]	; (800204c <HAL_GPIO_Init+0x2d0>)
 8002012:	69bb      	ldr	r3, [r7, #24]
 8002014:	4313      	orrs	r3, r2
 8002016:	60cb      	str	r3, [r1, #12]
 8002018:	e021      	b.n	800205e <HAL_GPIO_Init+0x2e2>
 800201a:	bf00      	nop
 800201c:	10320000 	.word	0x10320000
 8002020:	10310000 	.word	0x10310000
 8002024:	10220000 	.word	0x10220000
 8002028:	10210000 	.word	0x10210000
 800202c:	10120000 	.word	0x10120000
 8002030:	10110000 	.word	0x10110000
 8002034:	40021000 	.word	0x40021000
 8002038:	40010000 	.word	0x40010000
 800203c:	40010800 	.word	0x40010800
 8002040:	40010c00 	.word	0x40010c00
 8002044:	40011000 	.word	0x40011000
 8002048:	40011400 	.word	0x40011400
 800204c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002050:	4b0b      	ldr	r3, [pc, #44]	; (8002080 <HAL_GPIO_Init+0x304>)
 8002052:	68da      	ldr	r2, [r3, #12]
 8002054:	69bb      	ldr	r3, [r7, #24]
 8002056:	43db      	mvns	r3, r3
 8002058:	4909      	ldr	r1, [pc, #36]	; (8002080 <HAL_GPIO_Init+0x304>)
 800205a:	4013      	ands	r3, r2
 800205c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800205e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002060:	3301      	adds	r3, #1
 8002062:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800206a:	fa22 f303 	lsr.w	r3, r2, r3
 800206e:	2b00      	cmp	r3, #0
 8002070:	f47f ae8e 	bne.w	8001d90 <HAL_GPIO_Init+0x14>
  }
}
 8002074:	bf00      	nop
 8002076:	bf00      	nop
 8002078:	372c      	adds	r7, #44	; 0x2c
 800207a:	46bd      	mov	sp, r7
 800207c:	bc80      	pop	{r7}
 800207e:	4770      	bx	lr
 8002080:	40010400 	.word	0x40010400

08002084 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002084:	b480      	push	{r7}
 8002086:	b085      	sub	sp, #20
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
 800208c:	460b      	mov	r3, r1
 800208e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	689a      	ldr	r2, [r3, #8]
 8002094:	887b      	ldrh	r3, [r7, #2]
 8002096:	4013      	ands	r3, r2
 8002098:	2b00      	cmp	r3, #0
 800209a:	d002      	beq.n	80020a2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800209c:	2301      	movs	r3, #1
 800209e:	73fb      	strb	r3, [r7, #15]
 80020a0:	e001      	b.n	80020a6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80020a2:	2300      	movs	r3, #0
 80020a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80020a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	3714      	adds	r7, #20
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bc80      	pop	{r7}
 80020b0:	4770      	bx	lr

080020b2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020b2:	b480      	push	{r7}
 80020b4:	b083      	sub	sp, #12
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	6078      	str	r0, [r7, #4]
 80020ba:	460b      	mov	r3, r1
 80020bc:	807b      	strh	r3, [r7, #2]
 80020be:	4613      	mov	r3, r2
 80020c0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80020c2:	787b      	ldrb	r3, [r7, #1]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d003      	beq.n	80020d0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020c8:	887a      	ldrh	r2, [r7, #2]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80020ce:	e003      	b.n	80020d8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80020d0:	887b      	ldrh	r3, [r7, #2]
 80020d2:	041a      	lsls	r2, r3, #16
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	611a      	str	r2, [r3, #16]
}
 80020d8:	bf00      	nop
 80020da:	370c      	adds	r7, #12
 80020dc:	46bd      	mov	sp, r7
 80020de:	bc80      	pop	{r7}
 80020e0:	4770      	bx	lr
	...

080020e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b086      	sub	sp, #24
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d101      	bne.n	80020f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e26c      	b.n	80025d0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f003 0301 	and.w	r3, r3, #1
 80020fe:	2b00      	cmp	r3, #0
 8002100:	f000 8087 	beq.w	8002212 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002104:	4b92      	ldr	r3, [pc, #584]	; (8002350 <HAL_RCC_OscConfig+0x26c>)
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	f003 030c 	and.w	r3, r3, #12
 800210c:	2b04      	cmp	r3, #4
 800210e:	d00c      	beq.n	800212a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002110:	4b8f      	ldr	r3, [pc, #572]	; (8002350 <HAL_RCC_OscConfig+0x26c>)
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	f003 030c 	and.w	r3, r3, #12
 8002118:	2b08      	cmp	r3, #8
 800211a:	d112      	bne.n	8002142 <HAL_RCC_OscConfig+0x5e>
 800211c:	4b8c      	ldr	r3, [pc, #560]	; (8002350 <HAL_RCC_OscConfig+0x26c>)
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002124:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002128:	d10b      	bne.n	8002142 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800212a:	4b89      	ldr	r3, [pc, #548]	; (8002350 <HAL_RCC_OscConfig+0x26c>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002132:	2b00      	cmp	r3, #0
 8002134:	d06c      	beq.n	8002210 <HAL_RCC_OscConfig+0x12c>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d168      	bne.n	8002210 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	e246      	b.n	80025d0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800214a:	d106      	bne.n	800215a <HAL_RCC_OscConfig+0x76>
 800214c:	4b80      	ldr	r3, [pc, #512]	; (8002350 <HAL_RCC_OscConfig+0x26c>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a7f      	ldr	r2, [pc, #508]	; (8002350 <HAL_RCC_OscConfig+0x26c>)
 8002152:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002156:	6013      	str	r3, [r2, #0]
 8002158:	e02e      	b.n	80021b8 <HAL_RCC_OscConfig+0xd4>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d10c      	bne.n	800217c <HAL_RCC_OscConfig+0x98>
 8002162:	4b7b      	ldr	r3, [pc, #492]	; (8002350 <HAL_RCC_OscConfig+0x26c>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a7a      	ldr	r2, [pc, #488]	; (8002350 <HAL_RCC_OscConfig+0x26c>)
 8002168:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800216c:	6013      	str	r3, [r2, #0]
 800216e:	4b78      	ldr	r3, [pc, #480]	; (8002350 <HAL_RCC_OscConfig+0x26c>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a77      	ldr	r2, [pc, #476]	; (8002350 <HAL_RCC_OscConfig+0x26c>)
 8002174:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002178:	6013      	str	r3, [r2, #0]
 800217a:	e01d      	b.n	80021b8 <HAL_RCC_OscConfig+0xd4>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002184:	d10c      	bne.n	80021a0 <HAL_RCC_OscConfig+0xbc>
 8002186:	4b72      	ldr	r3, [pc, #456]	; (8002350 <HAL_RCC_OscConfig+0x26c>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a71      	ldr	r2, [pc, #452]	; (8002350 <HAL_RCC_OscConfig+0x26c>)
 800218c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002190:	6013      	str	r3, [r2, #0]
 8002192:	4b6f      	ldr	r3, [pc, #444]	; (8002350 <HAL_RCC_OscConfig+0x26c>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a6e      	ldr	r2, [pc, #440]	; (8002350 <HAL_RCC_OscConfig+0x26c>)
 8002198:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800219c:	6013      	str	r3, [r2, #0]
 800219e:	e00b      	b.n	80021b8 <HAL_RCC_OscConfig+0xd4>
 80021a0:	4b6b      	ldr	r3, [pc, #428]	; (8002350 <HAL_RCC_OscConfig+0x26c>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a6a      	ldr	r2, [pc, #424]	; (8002350 <HAL_RCC_OscConfig+0x26c>)
 80021a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021aa:	6013      	str	r3, [r2, #0]
 80021ac:	4b68      	ldr	r3, [pc, #416]	; (8002350 <HAL_RCC_OscConfig+0x26c>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a67      	ldr	r2, [pc, #412]	; (8002350 <HAL_RCC_OscConfig+0x26c>)
 80021b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021b6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d013      	beq.n	80021e8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021c0:	f7ff fc14 	bl	80019ec <HAL_GetTick>
 80021c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021c6:	e008      	b.n	80021da <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021c8:	f7ff fc10 	bl	80019ec <HAL_GetTick>
 80021cc:	4602      	mov	r2, r0
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	1ad3      	subs	r3, r2, r3
 80021d2:	2b64      	cmp	r3, #100	; 0x64
 80021d4:	d901      	bls.n	80021da <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80021d6:	2303      	movs	r3, #3
 80021d8:	e1fa      	b.n	80025d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021da:	4b5d      	ldr	r3, [pc, #372]	; (8002350 <HAL_RCC_OscConfig+0x26c>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d0f0      	beq.n	80021c8 <HAL_RCC_OscConfig+0xe4>
 80021e6:	e014      	b.n	8002212 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021e8:	f7ff fc00 	bl	80019ec <HAL_GetTick>
 80021ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021ee:	e008      	b.n	8002202 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021f0:	f7ff fbfc 	bl	80019ec <HAL_GetTick>
 80021f4:	4602      	mov	r2, r0
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	1ad3      	subs	r3, r2, r3
 80021fa:	2b64      	cmp	r3, #100	; 0x64
 80021fc:	d901      	bls.n	8002202 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80021fe:	2303      	movs	r3, #3
 8002200:	e1e6      	b.n	80025d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002202:	4b53      	ldr	r3, [pc, #332]	; (8002350 <HAL_RCC_OscConfig+0x26c>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800220a:	2b00      	cmp	r3, #0
 800220c:	d1f0      	bne.n	80021f0 <HAL_RCC_OscConfig+0x10c>
 800220e:	e000      	b.n	8002212 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002210:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f003 0302 	and.w	r3, r3, #2
 800221a:	2b00      	cmp	r3, #0
 800221c:	d063      	beq.n	80022e6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800221e:	4b4c      	ldr	r3, [pc, #304]	; (8002350 <HAL_RCC_OscConfig+0x26c>)
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	f003 030c 	and.w	r3, r3, #12
 8002226:	2b00      	cmp	r3, #0
 8002228:	d00b      	beq.n	8002242 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800222a:	4b49      	ldr	r3, [pc, #292]	; (8002350 <HAL_RCC_OscConfig+0x26c>)
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	f003 030c 	and.w	r3, r3, #12
 8002232:	2b08      	cmp	r3, #8
 8002234:	d11c      	bne.n	8002270 <HAL_RCC_OscConfig+0x18c>
 8002236:	4b46      	ldr	r3, [pc, #280]	; (8002350 <HAL_RCC_OscConfig+0x26c>)
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800223e:	2b00      	cmp	r3, #0
 8002240:	d116      	bne.n	8002270 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002242:	4b43      	ldr	r3, [pc, #268]	; (8002350 <HAL_RCC_OscConfig+0x26c>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 0302 	and.w	r3, r3, #2
 800224a:	2b00      	cmp	r3, #0
 800224c:	d005      	beq.n	800225a <HAL_RCC_OscConfig+0x176>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	691b      	ldr	r3, [r3, #16]
 8002252:	2b01      	cmp	r3, #1
 8002254:	d001      	beq.n	800225a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e1ba      	b.n	80025d0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800225a:	4b3d      	ldr	r3, [pc, #244]	; (8002350 <HAL_RCC_OscConfig+0x26c>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	695b      	ldr	r3, [r3, #20]
 8002266:	00db      	lsls	r3, r3, #3
 8002268:	4939      	ldr	r1, [pc, #228]	; (8002350 <HAL_RCC_OscConfig+0x26c>)
 800226a:	4313      	orrs	r3, r2
 800226c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800226e:	e03a      	b.n	80022e6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	691b      	ldr	r3, [r3, #16]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d020      	beq.n	80022ba <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002278:	4b36      	ldr	r3, [pc, #216]	; (8002354 <HAL_RCC_OscConfig+0x270>)
 800227a:	2201      	movs	r2, #1
 800227c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800227e:	f7ff fbb5 	bl	80019ec <HAL_GetTick>
 8002282:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002284:	e008      	b.n	8002298 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002286:	f7ff fbb1 	bl	80019ec <HAL_GetTick>
 800228a:	4602      	mov	r2, r0
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	1ad3      	subs	r3, r2, r3
 8002290:	2b02      	cmp	r3, #2
 8002292:	d901      	bls.n	8002298 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002294:	2303      	movs	r3, #3
 8002296:	e19b      	b.n	80025d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002298:	4b2d      	ldr	r3, [pc, #180]	; (8002350 <HAL_RCC_OscConfig+0x26c>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f003 0302 	and.w	r3, r3, #2
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d0f0      	beq.n	8002286 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022a4:	4b2a      	ldr	r3, [pc, #168]	; (8002350 <HAL_RCC_OscConfig+0x26c>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	695b      	ldr	r3, [r3, #20]
 80022b0:	00db      	lsls	r3, r3, #3
 80022b2:	4927      	ldr	r1, [pc, #156]	; (8002350 <HAL_RCC_OscConfig+0x26c>)
 80022b4:	4313      	orrs	r3, r2
 80022b6:	600b      	str	r3, [r1, #0]
 80022b8:	e015      	b.n	80022e6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022ba:	4b26      	ldr	r3, [pc, #152]	; (8002354 <HAL_RCC_OscConfig+0x270>)
 80022bc:	2200      	movs	r2, #0
 80022be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022c0:	f7ff fb94 	bl	80019ec <HAL_GetTick>
 80022c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022c6:	e008      	b.n	80022da <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022c8:	f7ff fb90 	bl	80019ec <HAL_GetTick>
 80022cc:	4602      	mov	r2, r0
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	2b02      	cmp	r3, #2
 80022d4:	d901      	bls.n	80022da <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80022d6:	2303      	movs	r3, #3
 80022d8:	e17a      	b.n	80025d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022da:	4b1d      	ldr	r3, [pc, #116]	; (8002350 <HAL_RCC_OscConfig+0x26c>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 0302 	and.w	r3, r3, #2
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d1f0      	bne.n	80022c8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 0308 	and.w	r3, r3, #8
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d03a      	beq.n	8002368 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	699b      	ldr	r3, [r3, #24]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d019      	beq.n	800232e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022fa:	4b17      	ldr	r3, [pc, #92]	; (8002358 <HAL_RCC_OscConfig+0x274>)
 80022fc:	2201      	movs	r2, #1
 80022fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002300:	f7ff fb74 	bl	80019ec <HAL_GetTick>
 8002304:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002306:	e008      	b.n	800231a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002308:	f7ff fb70 	bl	80019ec <HAL_GetTick>
 800230c:	4602      	mov	r2, r0
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	1ad3      	subs	r3, r2, r3
 8002312:	2b02      	cmp	r3, #2
 8002314:	d901      	bls.n	800231a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002316:	2303      	movs	r3, #3
 8002318:	e15a      	b.n	80025d0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800231a:	4b0d      	ldr	r3, [pc, #52]	; (8002350 <HAL_RCC_OscConfig+0x26c>)
 800231c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800231e:	f003 0302 	and.w	r3, r3, #2
 8002322:	2b00      	cmp	r3, #0
 8002324:	d0f0      	beq.n	8002308 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002326:	2001      	movs	r0, #1
 8002328:	f000 fad8 	bl	80028dc <RCC_Delay>
 800232c:	e01c      	b.n	8002368 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800232e:	4b0a      	ldr	r3, [pc, #40]	; (8002358 <HAL_RCC_OscConfig+0x274>)
 8002330:	2200      	movs	r2, #0
 8002332:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002334:	f7ff fb5a 	bl	80019ec <HAL_GetTick>
 8002338:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800233a:	e00f      	b.n	800235c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800233c:	f7ff fb56 	bl	80019ec <HAL_GetTick>
 8002340:	4602      	mov	r2, r0
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	1ad3      	subs	r3, r2, r3
 8002346:	2b02      	cmp	r3, #2
 8002348:	d908      	bls.n	800235c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800234a:	2303      	movs	r3, #3
 800234c:	e140      	b.n	80025d0 <HAL_RCC_OscConfig+0x4ec>
 800234e:	bf00      	nop
 8002350:	40021000 	.word	0x40021000
 8002354:	42420000 	.word	0x42420000
 8002358:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800235c:	4b9e      	ldr	r3, [pc, #632]	; (80025d8 <HAL_RCC_OscConfig+0x4f4>)
 800235e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002360:	f003 0302 	and.w	r3, r3, #2
 8002364:	2b00      	cmp	r3, #0
 8002366:	d1e9      	bne.n	800233c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f003 0304 	and.w	r3, r3, #4
 8002370:	2b00      	cmp	r3, #0
 8002372:	f000 80a6 	beq.w	80024c2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002376:	2300      	movs	r3, #0
 8002378:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800237a:	4b97      	ldr	r3, [pc, #604]	; (80025d8 <HAL_RCC_OscConfig+0x4f4>)
 800237c:	69db      	ldr	r3, [r3, #28]
 800237e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002382:	2b00      	cmp	r3, #0
 8002384:	d10d      	bne.n	80023a2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002386:	4b94      	ldr	r3, [pc, #592]	; (80025d8 <HAL_RCC_OscConfig+0x4f4>)
 8002388:	69db      	ldr	r3, [r3, #28]
 800238a:	4a93      	ldr	r2, [pc, #588]	; (80025d8 <HAL_RCC_OscConfig+0x4f4>)
 800238c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002390:	61d3      	str	r3, [r2, #28]
 8002392:	4b91      	ldr	r3, [pc, #580]	; (80025d8 <HAL_RCC_OscConfig+0x4f4>)
 8002394:	69db      	ldr	r3, [r3, #28]
 8002396:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800239a:	60bb      	str	r3, [r7, #8]
 800239c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800239e:	2301      	movs	r3, #1
 80023a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023a2:	4b8e      	ldr	r3, [pc, #568]	; (80025dc <HAL_RCC_OscConfig+0x4f8>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d118      	bne.n	80023e0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023ae:	4b8b      	ldr	r3, [pc, #556]	; (80025dc <HAL_RCC_OscConfig+0x4f8>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a8a      	ldr	r2, [pc, #552]	; (80025dc <HAL_RCC_OscConfig+0x4f8>)
 80023b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023ba:	f7ff fb17 	bl	80019ec <HAL_GetTick>
 80023be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023c0:	e008      	b.n	80023d4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023c2:	f7ff fb13 	bl	80019ec <HAL_GetTick>
 80023c6:	4602      	mov	r2, r0
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	1ad3      	subs	r3, r2, r3
 80023cc:	2b64      	cmp	r3, #100	; 0x64
 80023ce:	d901      	bls.n	80023d4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80023d0:	2303      	movs	r3, #3
 80023d2:	e0fd      	b.n	80025d0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023d4:	4b81      	ldr	r3, [pc, #516]	; (80025dc <HAL_RCC_OscConfig+0x4f8>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d0f0      	beq.n	80023c2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	68db      	ldr	r3, [r3, #12]
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d106      	bne.n	80023f6 <HAL_RCC_OscConfig+0x312>
 80023e8:	4b7b      	ldr	r3, [pc, #492]	; (80025d8 <HAL_RCC_OscConfig+0x4f4>)
 80023ea:	6a1b      	ldr	r3, [r3, #32]
 80023ec:	4a7a      	ldr	r2, [pc, #488]	; (80025d8 <HAL_RCC_OscConfig+0x4f4>)
 80023ee:	f043 0301 	orr.w	r3, r3, #1
 80023f2:	6213      	str	r3, [r2, #32]
 80023f4:	e02d      	b.n	8002452 <HAL_RCC_OscConfig+0x36e>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	68db      	ldr	r3, [r3, #12]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d10c      	bne.n	8002418 <HAL_RCC_OscConfig+0x334>
 80023fe:	4b76      	ldr	r3, [pc, #472]	; (80025d8 <HAL_RCC_OscConfig+0x4f4>)
 8002400:	6a1b      	ldr	r3, [r3, #32]
 8002402:	4a75      	ldr	r2, [pc, #468]	; (80025d8 <HAL_RCC_OscConfig+0x4f4>)
 8002404:	f023 0301 	bic.w	r3, r3, #1
 8002408:	6213      	str	r3, [r2, #32]
 800240a:	4b73      	ldr	r3, [pc, #460]	; (80025d8 <HAL_RCC_OscConfig+0x4f4>)
 800240c:	6a1b      	ldr	r3, [r3, #32]
 800240e:	4a72      	ldr	r2, [pc, #456]	; (80025d8 <HAL_RCC_OscConfig+0x4f4>)
 8002410:	f023 0304 	bic.w	r3, r3, #4
 8002414:	6213      	str	r3, [r2, #32]
 8002416:	e01c      	b.n	8002452 <HAL_RCC_OscConfig+0x36e>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	2b05      	cmp	r3, #5
 800241e:	d10c      	bne.n	800243a <HAL_RCC_OscConfig+0x356>
 8002420:	4b6d      	ldr	r3, [pc, #436]	; (80025d8 <HAL_RCC_OscConfig+0x4f4>)
 8002422:	6a1b      	ldr	r3, [r3, #32]
 8002424:	4a6c      	ldr	r2, [pc, #432]	; (80025d8 <HAL_RCC_OscConfig+0x4f4>)
 8002426:	f043 0304 	orr.w	r3, r3, #4
 800242a:	6213      	str	r3, [r2, #32]
 800242c:	4b6a      	ldr	r3, [pc, #424]	; (80025d8 <HAL_RCC_OscConfig+0x4f4>)
 800242e:	6a1b      	ldr	r3, [r3, #32]
 8002430:	4a69      	ldr	r2, [pc, #420]	; (80025d8 <HAL_RCC_OscConfig+0x4f4>)
 8002432:	f043 0301 	orr.w	r3, r3, #1
 8002436:	6213      	str	r3, [r2, #32]
 8002438:	e00b      	b.n	8002452 <HAL_RCC_OscConfig+0x36e>
 800243a:	4b67      	ldr	r3, [pc, #412]	; (80025d8 <HAL_RCC_OscConfig+0x4f4>)
 800243c:	6a1b      	ldr	r3, [r3, #32]
 800243e:	4a66      	ldr	r2, [pc, #408]	; (80025d8 <HAL_RCC_OscConfig+0x4f4>)
 8002440:	f023 0301 	bic.w	r3, r3, #1
 8002444:	6213      	str	r3, [r2, #32]
 8002446:	4b64      	ldr	r3, [pc, #400]	; (80025d8 <HAL_RCC_OscConfig+0x4f4>)
 8002448:	6a1b      	ldr	r3, [r3, #32]
 800244a:	4a63      	ldr	r2, [pc, #396]	; (80025d8 <HAL_RCC_OscConfig+0x4f4>)
 800244c:	f023 0304 	bic.w	r3, r3, #4
 8002450:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	68db      	ldr	r3, [r3, #12]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d015      	beq.n	8002486 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800245a:	f7ff fac7 	bl	80019ec <HAL_GetTick>
 800245e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002460:	e00a      	b.n	8002478 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002462:	f7ff fac3 	bl	80019ec <HAL_GetTick>
 8002466:	4602      	mov	r2, r0
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	1ad3      	subs	r3, r2, r3
 800246c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002470:	4293      	cmp	r3, r2
 8002472:	d901      	bls.n	8002478 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002474:	2303      	movs	r3, #3
 8002476:	e0ab      	b.n	80025d0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002478:	4b57      	ldr	r3, [pc, #348]	; (80025d8 <HAL_RCC_OscConfig+0x4f4>)
 800247a:	6a1b      	ldr	r3, [r3, #32]
 800247c:	f003 0302 	and.w	r3, r3, #2
 8002480:	2b00      	cmp	r3, #0
 8002482:	d0ee      	beq.n	8002462 <HAL_RCC_OscConfig+0x37e>
 8002484:	e014      	b.n	80024b0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002486:	f7ff fab1 	bl	80019ec <HAL_GetTick>
 800248a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800248c:	e00a      	b.n	80024a4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800248e:	f7ff faad 	bl	80019ec <HAL_GetTick>
 8002492:	4602      	mov	r2, r0
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	1ad3      	subs	r3, r2, r3
 8002498:	f241 3288 	movw	r2, #5000	; 0x1388
 800249c:	4293      	cmp	r3, r2
 800249e:	d901      	bls.n	80024a4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80024a0:	2303      	movs	r3, #3
 80024a2:	e095      	b.n	80025d0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024a4:	4b4c      	ldr	r3, [pc, #304]	; (80025d8 <HAL_RCC_OscConfig+0x4f4>)
 80024a6:	6a1b      	ldr	r3, [r3, #32]
 80024a8:	f003 0302 	and.w	r3, r3, #2
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d1ee      	bne.n	800248e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80024b0:	7dfb      	ldrb	r3, [r7, #23]
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	d105      	bne.n	80024c2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024b6:	4b48      	ldr	r3, [pc, #288]	; (80025d8 <HAL_RCC_OscConfig+0x4f4>)
 80024b8:	69db      	ldr	r3, [r3, #28]
 80024ba:	4a47      	ldr	r2, [pc, #284]	; (80025d8 <HAL_RCC_OscConfig+0x4f4>)
 80024bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024c0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	69db      	ldr	r3, [r3, #28]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	f000 8081 	beq.w	80025ce <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024cc:	4b42      	ldr	r3, [pc, #264]	; (80025d8 <HAL_RCC_OscConfig+0x4f4>)
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	f003 030c 	and.w	r3, r3, #12
 80024d4:	2b08      	cmp	r3, #8
 80024d6:	d061      	beq.n	800259c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	69db      	ldr	r3, [r3, #28]
 80024dc:	2b02      	cmp	r3, #2
 80024de:	d146      	bne.n	800256e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024e0:	4b3f      	ldr	r3, [pc, #252]	; (80025e0 <HAL_RCC_OscConfig+0x4fc>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024e6:	f7ff fa81 	bl	80019ec <HAL_GetTick>
 80024ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024ec:	e008      	b.n	8002500 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024ee:	f7ff fa7d 	bl	80019ec <HAL_GetTick>
 80024f2:	4602      	mov	r2, r0
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	1ad3      	subs	r3, r2, r3
 80024f8:	2b02      	cmp	r3, #2
 80024fa:	d901      	bls.n	8002500 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80024fc:	2303      	movs	r3, #3
 80024fe:	e067      	b.n	80025d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002500:	4b35      	ldr	r3, [pc, #212]	; (80025d8 <HAL_RCC_OscConfig+0x4f4>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002508:	2b00      	cmp	r3, #0
 800250a:	d1f0      	bne.n	80024ee <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6a1b      	ldr	r3, [r3, #32]
 8002510:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002514:	d108      	bne.n	8002528 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002516:	4b30      	ldr	r3, [pc, #192]	; (80025d8 <HAL_RCC_OscConfig+0x4f4>)
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	492d      	ldr	r1, [pc, #180]	; (80025d8 <HAL_RCC_OscConfig+0x4f4>)
 8002524:	4313      	orrs	r3, r2
 8002526:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002528:	4b2b      	ldr	r3, [pc, #172]	; (80025d8 <HAL_RCC_OscConfig+0x4f4>)
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6a19      	ldr	r1, [r3, #32]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002538:	430b      	orrs	r3, r1
 800253a:	4927      	ldr	r1, [pc, #156]	; (80025d8 <HAL_RCC_OscConfig+0x4f4>)
 800253c:	4313      	orrs	r3, r2
 800253e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002540:	4b27      	ldr	r3, [pc, #156]	; (80025e0 <HAL_RCC_OscConfig+0x4fc>)
 8002542:	2201      	movs	r2, #1
 8002544:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002546:	f7ff fa51 	bl	80019ec <HAL_GetTick>
 800254a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800254c:	e008      	b.n	8002560 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800254e:	f7ff fa4d 	bl	80019ec <HAL_GetTick>
 8002552:	4602      	mov	r2, r0
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	1ad3      	subs	r3, r2, r3
 8002558:	2b02      	cmp	r3, #2
 800255a:	d901      	bls.n	8002560 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800255c:	2303      	movs	r3, #3
 800255e:	e037      	b.n	80025d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002560:	4b1d      	ldr	r3, [pc, #116]	; (80025d8 <HAL_RCC_OscConfig+0x4f4>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002568:	2b00      	cmp	r3, #0
 800256a:	d0f0      	beq.n	800254e <HAL_RCC_OscConfig+0x46a>
 800256c:	e02f      	b.n	80025ce <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800256e:	4b1c      	ldr	r3, [pc, #112]	; (80025e0 <HAL_RCC_OscConfig+0x4fc>)
 8002570:	2200      	movs	r2, #0
 8002572:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002574:	f7ff fa3a 	bl	80019ec <HAL_GetTick>
 8002578:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800257a:	e008      	b.n	800258e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800257c:	f7ff fa36 	bl	80019ec <HAL_GetTick>
 8002580:	4602      	mov	r2, r0
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	2b02      	cmp	r3, #2
 8002588:	d901      	bls.n	800258e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800258a:	2303      	movs	r3, #3
 800258c:	e020      	b.n	80025d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800258e:	4b12      	ldr	r3, [pc, #72]	; (80025d8 <HAL_RCC_OscConfig+0x4f4>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002596:	2b00      	cmp	r3, #0
 8002598:	d1f0      	bne.n	800257c <HAL_RCC_OscConfig+0x498>
 800259a:	e018      	b.n	80025ce <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	69db      	ldr	r3, [r3, #28]
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d101      	bne.n	80025a8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80025a4:	2301      	movs	r3, #1
 80025a6:	e013      	b.n	80025d0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80025a8:	4b0b      	ldr	r3, [pc, #44]	; (80025d8 <HAL_RCC_OscConfig+0x4f4>)
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6a1b      	ldr	r3, [r3, #32]
 80025b8:	429a      	cmp	r2, r3
 80025ba:	d106      	bne.n	80025ca <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025c6:	429a      	cmp	r2, r3
 80025c8:	d001      	beq.n	80025ce <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
 80025cc:	e000      	b.n	80025d0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80025ce:	2300      	movs	r3, #0
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	3718      	adds	r7, #24
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}
 80025d8:	40021000 	.word	0x40021000
 80025dc:	40007000 	.word	0x40007000
 80025e0:	42420060 	.word	0x42420060

080025e4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b084      	sub	sp, #16
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
 80025ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d101      	bne.n	80025f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	e0d0      	b.n	800279a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025f8:	4b6a      	ldr	r3, [pc, #424]	; (80027a4 <HAL_RCC_ClockConfig+0x1c0>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f003 0307 	and.w	r3, r3, #7
 8002600:	683a      	ldr	r2, [r7, #0]
 8002602:	429a      	cmp	r2, r3
 8002604:	d910      	bls.n	8002628 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002606:	4b67      	ldr	r3, [pc, #412]	; (80027a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f023 0207 	bic.w	r2, r3, #7
 800260e:	4965      	ldr	r1, [pc, #404]	; (80027a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	4313      	orrs	r3, r2
 8002614:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002616:	4b63      	ldr	r3, [pc, #396]	; (80027a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 0307 	and.w	r3, r3, #7
 800261e:	683a      	ldr	r2, [r7, #0]
 8002620:	429a      	cmp	r2, r3
 8002622:	d001      	beq.n	8002628 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	e0b8      	b.n	800279a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 0302 	and.w	r3, r3, #2
 8002630:	2b00      	cmp	r3, #0
 8002632:	d020      	beq.n	8002676 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 0304 	and.w	r3, r3, #4
 800263c:	2b00      	cmp	r3, #0
 800263e:	d005      	beq.n	800264c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002640:	4b59      	ldr	r3, [pc, #356]	; (80027a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	4a58      	ldr	r2, [pc, #352]	; (80027a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002646:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800264a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 0308 	and.w	r3, r3, #8
 8002654:	2b00      	cmp	r3, #0
 8002656:	d005      	beq.n	8002664 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002658:	4b53      	ldr	r3, [pc, #332]	; (80027a8 <HAL_RCC_ClockConfig+0x1c4>)
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	4a52      	ldr	r2, [pc, #328]	; (80027a8 <HAL_RCC_ClockConfig+0x1c4>)
 800265e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002662:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002664:	4b50      	ldr	r3, [pc, #320]	; (80027a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	494d      	ldr	r1, [pc, #308]	; (80027a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002672:	4313      	orrs	r3, r2
 8002674:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 0301 	and.w	r3, r3, #1
 800267e:	2b00      	cmp	r3, #0
 8002680:	d040      	beq.n	8002704 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	2b01      	cmp	r3, #1
 8002688:	d107      	bne.n	800269a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800268a:	4b47      	ldr	r3, [pc, #284]	; (80027a8 <HAL_RCC_ClockConfig+0x1c4>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002692:	2b00      	cmp	r3, #0
 8002694:	d115      	bne.n	80026c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	e07f      	b.n	800279a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	2b02      	cmp	r3, #2
 80026a0:	d107      	bne.n	80026b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026a2:	4b41      	ldr	r3, [pc, #260]	; (80027a8 <HAL_RCC_ClockConfig+0x1c4>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d109      	bne.n	80026c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e073      	b.n	800279a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026b2:	4b3d      	ldr	r3, [pc, #244]	; (80027a8 <HAL_RCC_ClockConfig+0x1c4>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 0302 	and.w	r3, r3, #2
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d101      	bne.n	80026c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e06b      	b.n	800279a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026c2:	4b39      	ldr	r3, [pc, #228]	; (80027a8 <HAL_RCC_ClockConfig+0x1c4>)
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	f023 0203 	bic.w	r2, r3, #3
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	4936      	ldr	r1, [pc, #216]	; (80027a8 <HAL_RCC_ClockConfig+0x1c4>)
 80026d0:	4313      	orrs	r3, r2
 80026d2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026d4:	f7ff f98a 	bl	80019ec <HAL_GetTick>
 80026d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026da:	e00a      	b.n	80026f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026dc:	f7ff f986 	bl	80019ec <HAL_GetTick>
 80026e0:	4602      	mov	r2, r0
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d901      	bls.n	80026f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026ee:	2303      	movs	r3, #3
 80026f0:	e053      	b.n	800279a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026f2:	4b2d      	ldr	r3, [pc, #180]	; (80027a8 <HAL_RCC_ClockConfig+0x1c4>)
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	f003 020c 	and.w	r2, r3, #12
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	009b      	lsls	r3, r3, #2
 8002700:	429a      	cmp	r2, r3
 8002702:	d1eb      	bne.n	80026dc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002704:	4b27      	ldr	r3, [pc, #156]	; (80027a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 0307 	and.w	r3, r3, #7
 800270c:	683a      	ldr	r2, [r7, #0]
 800270e:	429a      	cmp	r2, r3
 8002710:	d210      	bcs.n	8002734 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002712:	4b24      	ldr	r3, [pc, #144]	; (80027a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f023 0207 	bic.w	r2, r3, #7
 800271a:	4922      	ldr	r1, [pc, #136]	; (80027a4 <HAL_RCC_ClockConfig+0x1c0>)
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	4313      	orrs	r3, r2
 8002720:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002722:	4b20      	ldr	r3, [pc, #128]	; (80027a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 0307 	and.w	r3, r3, #7
 800272a:	683a      	ldr	r2, [r7, #0]
 800272c:	429a      	cmp	r2, r3
 800272e:	d001      	beq.n	8002734 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002730:	2301      	movs	r3, #1
 8002732:	e032      	b.n	800279a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f003 0304 	and.w	r3, r3, #4
 800273c:	2b00      	cmp	r3, #0
 800273e:	d008      	beq.n	8002752 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002740:	4b19      	ldr	r3, [pc, #100]	; (80027a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	4916      	ldr	r1, [pc, #88]	; (80027a8 <HAL_RCC_ClockConfig+0x1c4>)
 800274e:	4313      	orrs	r3, r2
 8002750:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 0308 	and.w	r3, r3, #8
 800275a:	2b00      	cmp	r3, #0
 800275c:	d009      	beq.n	8002772 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800275e:	4b12      	ldr	r3, [pc, #72]	; (80027a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	691b      	ldr	r3, [r3, #16]
 800276a:	00db      	lsls	r3, r3, #3
 800276c:	490e      	ldr	r1, [pc, #56]	; (80027a8 <HAL_RCC_ClockConfig+0x1c4>)
 800276e:	4313      	orrs	r3, r2
 8002770:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002772:	f000 f821 	bl	80027b8 <HAL_RCC_GetSysClockFreq>
 8002776:	4602      	mov	r2, r0
 8002778:	4b0b      	ldr	r3, [pc, #44]	; (80027a8 <HAL_RCC_ClockConfig+0x1c4>)
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	091b      	lsrs	r3, r3, #4
 800277e:	f003 030f 	and.w	r3, r3, #15
 8002782:	490a      	ldr	r1, [pc, #40]	; (80027ac <HAL_RCC_ClockConfig+0x1c8>)
 8002784:	5ccb      	ldrb	r3, [r1, r3]
 8002786:	fa22 f303 	lsr.w	r3, r2, r3
 800278a:	4a09      	ldr	r2, [pc, #36]	; (80027b0 <HAL_RCC_ClockConfig+0x1cc>)
 800278c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800278e:	4b09      	ldr	r3, [pc, #36]	; (80027b4 <HAL_RCC_ClockConfig+0x1d0>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4618      	mov	r0, r3
 8002794:	f7ff f8e8 	bl	8001968 <HAL_InitTick>

  return HAL_OK;
 8002798:	2300      	movs	r3, #0
}
 800279a:	4618      	mov	r0, r3
 800279c:	3710      	adds	r7, #16
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	40022000 	.word	0x40022000
 80027a8:	40021000 	.word	0x40021000
 80027ac:	0800489c 	.word	0x0800489c
 80027b0:	200000a8 	.word	0x200000a8
 80027b4:	200000ac 	.word	0x200000ac

080027b8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027b8:	b490      	push	{r4, r7}
 80027ba:	b08a      	sub	sp, #40	; 0x28
 80027bc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80027be:	4b2a      	ldr	r3, [pc, #168]	; (8002868 <HAL_RCC_GetSysClockFreq+0xb0>)
 80027c0:	1d3c      	adds	r4, r7, #4
 80027c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80027c4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80027c8:	f240 2301 	movw	r3, #513	; 0x201
 80027cc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80027ce:	2300      	movs	r3, #0
 80027d0:	61fb      	str	r3, [r7, #28]
 80027d2:	2300      	movs	r3, #0
 80027d4:	61bb      	str	r3, [r7, #24]
 80027d6:	2300      	movs	r3, #0
 80027d8:	627b      	str	r3, [r7, #36]	; 0x24
 80027da:	2300      	movs	r3, #0
 80027dc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80027de:	2300      	movs	r3, #0
 80027e0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80027e2:	4b22      	ldr	r3, [pc, #136]	; (800286c <HAL_RCC_GetSysClockFreq+0xb4>)
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80027e8:	69fb      	ldr	r3, [r7, #28]
 80027ea:	f003 030c 	and.w	r3, r3, #12
 80027ee:	2b04      	cmp	r3, #4
 80027f0:	d002      	beq.n	80027f8 <HAL_RCC_GetSysClockFreq+0x40>
 80027f2:	2b08      	cmp	r3, #8
 80027f4:	d003      	beq.n	80027fe <HAL_RCC_GetSysClockFreq+0x46>
 80027f6:	e02d      	b.n	8002854 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80027f8:	4b1d      	ldr	r3, [pc, #116]	; (8002870 <HAL_RCC_GetSysClockFreq+0xb8>)
 80027fa:	623b      	str	r3, [r7, #32]
      break;
 80027fc:	e02d      	b.n	800285a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80027fe:	69fb      	ldr	r3, [r7, #28]
 8002800:	0c9b      	lsrs	r3, r3, #18
 8002802:	f003 030f 	and.w	r3, r3, #15
 8002806:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800280a:	4413      	add	r3, r2
 800280c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002810:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002812:	69fb      	ldr	r3, [r7, #28]
 8002814:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002818:	2b00      	cmp	r3, #0
 800281a:	d013      	beq.n	8002844 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800281c:	4b13      	ldr	r3, [pc, #76]	; (800286c <HAL_RCC_GetSysClockFreq+0xb4>)
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	0c5b      	lsrs	r3, r3, #17
 8002822:	f003 0301 	and.w	r3, r3, #1
 8002826:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800282a:	4413      	add	r3, r2
 800282c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002830:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	4a0e      	ldr	r2, [pc, #56]	; (8002870 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002836:	fb02 f203 	mul.w	r2, r2, r3
 800283a:	69bb      	ldr	r3, [r7, #24]
 800283c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002840:	627b      	str	r3, [r7, #36]	; 0x24
 8002842:	e004      	b.n	800284e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	4a0b      	ldr	r2, [pc, #44]	; (8002874 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002848:	fb02 f303 	mul.w	r3, r2, r3
 800284c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800284e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002850:	623b      	str	r3, [r7, #32]
      break;
 8002852:	e002      	b.n	800285a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002854:	4b06      	ldr	r3, [pc, #24]	; (8002870 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002856:	623b      	str	r3, [r7, #32]
      break;
 8002858:	bf00      	nop
    }
  }
  return sysclockfreq;
 800285a:	6a3b      	ldr	r3, [r7, #32]
}
 800285c:	4618      	mov	r0, r3
 800285e:	3728      	adds	r7, #40	; 0x28
 8002860:	46bd      	mov	sp, r7
 8002862:	bc90      	pop	{r4, r7}
 8002864:	4770      	bx	lr
 8002866:	bf00      	nop
 8002868:	0800488c 	.word	0x0800488c
 800286c:	40021000 	.word	0x40021000
 8002870:	007a1200 	.word	0x007a1200
 8002874:	003d0900 	.word	0x003d0900

08002878 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002878:	b480      	push	{r7}
 800287a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800287c:	4b02      	ldr	r3, [pc, #8]	; (8002888 <HAL_RCC_GetHCLKFreq+0x10>)
 800287e:	681b      	ldr	r3, [r3, #0]
}
 8002880:	4618      	mov	r0, r3
 8002882:	46bd      	mov	sp, r7
 8002884:	bc80      	pop	{r7}
 8002886:	4770      	bx	lr
 8002888:	200000a8 	.word	0x200000a8

0800288c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002890:	f7ff fff2 	bl	8002878 <HAL_RCC_GetHCLKFreq>
 8002894:	4602      	mov	r2, r0
 8002896:	4b05      	ldr	r3, [pc, #20]	; (80028ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	0a1b      	lsrs	r3, r3, #8
 800289c:	f003 0307 	and.w	r3, r3, #7
 80028a0:	4903      	ldr	r1, [pc, #12]	; (80028b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80028a2:	5ccb      	ldrb	r3, [r1, r3]
 80028a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	bd80      	pop	{r7, pc}
 80028ac:	40021000 	.word	0x40021000
 80028b0:	080048ac 	.word	0x080048ac

080028b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80028b8:	f7ff ffde 	bl	8002878 <HAL_RCC_GetHCLKFreq>
 80028bc:	4602      	mov	r2, r0
 80028be:	4b05      	ldr	r3, [pc, #20]	; (80028d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	0adb      	lsrs	r3, r3, #11
 80028c4:	f003 0307 	and.w	r3, r3, #7
 80028c8:	4903      	ldr	r1, [pc, #12]	; (80028d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80028ca:	5ccb      	ldrb	r3, [r1, r3]
 80028cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	bd80      	pop	{r7, pc}
 80028d4:	40021000 	.word	0x40021000
 80028d8:	080048ac 	.word	0x080048ac

080028dc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80028dc:	b480      	push	{r7}
 80028de:	b085      	sub	sp, #20
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80028e4:	4b0a      	ldr	r3, [pc, #40]	; (8002910 <RCC_Delay+0x34>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a0a      	ldr	r2, [pc, #40]	; (8002914 <RCC_Delay+0x38>)
 80028ea:	fba2 2303 	umull	r2, r3, r2, r3
 80028ee:	0a5b      	lsrs	r3, r3, #9
 80028f0:	687a      	ldr	r2, [r7, #4]
 80028f2:	fb02 f303 	mul.w	r3, r2, r3
 80028f6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80028f8:	bf00      	nop
  }
  while (Delay --);
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	1e5a      	subs	r2, r3, #1
 80028fe:	60fa      	str	r2, [r7, #12]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d1f9      	bne.n	80028f8 <RCC_Delay+0x1c>
}
 8002904:	bf00      	nop
 8002906:	bf00      	nop
 8002908:	3714      	adds	r7, #20
 800290a:	46bd      	mov	sp, r7
 800290c:	bc80      	pop	{r7}
 800290e:	4770      	bx	lr
 8002910:	200000a8 	.word	0x200000a8
 8002914:	10624dd3 	.word	0x10624dd3

08002918 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b082      	sub	sp, #8
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d101      	bne.n	800292a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	e041      	b.n	80029ae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002930:	b2db      	uxtb	r3, r3
 8002932:	2b00      	cmp	r3, #0
 8002934:	d106      	bne.n	8002944 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2200      	movs	r2, #0
 800293a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	f7fe fe90 	bl	8001664 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2202      	movs	r2, #2
 8002948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	3304      	adds	r3, #4
 8002954:	4619      	mov	r1, r3
 8002956:	4610      	mov	r0, r2
 8002958:	f000 fbc2 	bl	80030e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2201      	movs	r2, #1
 8002960:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2201      	movs	r2, #1
 8002968:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2201      	movs	r2, #1
 8002970:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2201      	movs	r2, #1
 8002978:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2201      	movs	r2, #1
 8002980:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2201      	movs	r2, #1
 8002988:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2201      	movs	r2, #1
 8002990:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2201      	movs	r2, #1
 8002998:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2201      	movs	r2, #1
 80029a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2201      	movs	r2, #1
 80029a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80029ac:	2300      	movs	r3, #0
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3708      	adds	r7, #8
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}
	...

080029b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b085      	sub	sp, #20
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029c6:	b2db      	uxtb	r3, r3
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d001      	beq.n	80029d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	e03a      	b.n	8002a46 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2202      	movs	r2, #2
 80029d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	68da      	ldr	r2, [r3, #12]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f042 0201 	orr.w	r2, r2, #1
 80029e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a18      	ldr	r2, [pc, #96]	; (8002a50 <HAL_TIM_Base_Start_IT+0x98>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d00e      	beq.n	8002a10 <HAL_TIM_Base_Start_IT+0x58>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029fa:	d009      	beq.n	8002a10 <HAL_TIM_Base_Start_IT+0x58>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a14      	ldr	r2, [pc, #80]	; (8002a54 <HAL_TIM_Base_Start_IT+0x9c>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d004      	beq.n	8002a10 <HAL_TIM_Base_Start_IT+0x58>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a13      	ldr	r2, [pc, #76]	; (8002a58 <HAL_TIM_Base_Start_IT+0xa0>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d111      	bne.n	8002a34 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	f003 0307 	and.w	r3, r3, #7
 8002a1a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	2b06      	cmp	r3, #6
 8002a20:	d010      	beq.n	8002a44 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f042 0201 	orr.w	r2, r2, #1
 8002a30:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a32:	e007      	b.n	8002a44 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f042 0201 	orr.w	r2, r2, #1
 8002a42:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a44:	2300      	movs	r3, #0
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	3714      	adds	r7, #20
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bc80      	pop	{r7}
 8002a4e:	4770      	bx	lr
 8002a50:	40012c00 	.word	0x40012c00
 8002a54:	40000400 	.word	0x40000400
 8002a58:	40000800 	.word	0x40000800

08002a5c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b082      	sub	sp, #8
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d101      	bne.n	8002a6e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e041      	b.n	8002af2 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d106      	bne.n	8002a88 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f000 f839 	bl	8002afa <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2202      	movs	r2, #2
 8002a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	3304      	adds	r3, #4
 8002a98:	4619      	mov	r1, r3
 8002a9a:	4610      	mov	r0, r2
 8002a9c:	f000 fb20 	bl	80030e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2201      	movs	r2, #1
 8002aac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2201      	movs	r2, #1
 8002abc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2201      	movs	r2, #1
 8002acc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2201      	movs	r2, #1
 8002adc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2201      	movs	r2, #1
 8002aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002af0:	2300      	movs	r3, #0
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3708      	adds	r7, #8
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}

08002afa <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8002afa:	b480      	push	{r7}
 8002afc:	b083      	sub	sp, #12
 8002afe:	af00      	add	r7, sp, #0
 8002b00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8002b02:	bf00      	nop
 8002b04:	370c      	adds	r7, #12
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bc80      	pop	{r7}
 8002b0a:	4770      	bx	lr

08002b0c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b084      	sub	sp, #16
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
 8002b14:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d109      	bne.n	8002b30 <HAL_TIM_PWM_Start+0x24>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	bf14      	ite	ne
 8002b28:	2301      	movne	r3, #1
 8002b2a:	2300      	moveq	r3, #0
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	e022      	b.n	8002b76 <HAL_TIM_PWM_Start+0x6a>
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	2b04      	cmp	r3, #4
 8002b34:	d109      	bne.n	8002b4a <HAL_TIM_PWM_Start+0x3e>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	2b01      	cmp	r3, #1
 8002b40:	bf14      	ite	ne
 8002b42:	2301      	movne	r3, #1
 8002b44:	2300      	moveq	r3, #0
 8002b46:	b2db      	uxtb	r3, r3
 8002b48:	e015      	b.n	8002b76 <HAL_TIM_PWM_Start+0x6a>
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	2b08      	cmp	r3, #8
 8002b4e:	d109      	bne.n	8002b64 <HAL_TIM_PWM_Start+0x58>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b56:	b2db      	uxtb	r3, r3
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	bf14      	ite	ne
 8002b5c:	2301      	movne	r3, #1
 8002b5e:	2300      	moveq	r3, #0
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	e008      	b.n	8002b76 <HAL_TIM_PWM_Start+0x6a>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	bf14      	ite	ne
 8002b70:	2301      	movne	r3, #1
 8002b72:	2300      	moveq	r3, #0
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d001      	beq.n	8002b7e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e05e      	b.n	8002c3c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d104      	bne.n	8002b8e <HAL_TIM_PWM_Start+0x82>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2202      	movs	r2, #2
 8002b88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b8c:	e013      	b.n	8002bb6 <HAL_TIM_PWM_Start+0xaa>
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	2b04      	cmp	r3, #4
 8002b92:	d104      	bne.n	8002b9e <HAL_TIM_PWM_Start+0x92>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2202      	movs	r2, #2
 8002b98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b9c:	e00b      	b.n	8002bb6 <HAL_TIM_PWM_Start+0xaa>
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	2b08      	cmp	r3, #8
 8002ba2:	d104      	bne.n	8002bae <HAL_TIM_PWM_Start+0xa2>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2202      	movs	r2, #2
 8002ba8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002bac:	e003      	b.n	8002bb6 <HAL_TIM_PWM_Start+0xaa>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2202      	movs	r2, #2
 8002bb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	2201      	movs	r2, #1
 8002bbc:	6839      	ldr	r1, [r7, #0]
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f000 fd0e 	bl	80035e0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a1e      	ldr	r2, [pc, #120]	; (8002c44 <HAL_TIM_PWM_Start+0x138>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d107      	bne.n	8002bde <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002bdc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a18      	ldr	r2, [pc, #96]	; (8002c44 <HAL_TIM_PWM_Start+0x138>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d00e      	beq.n	8002c06 <HAL_TIM_PWM_Start+0xfa>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bf0:	d009      	beq.n	8002c06 <HAL_TIM_PWM_Start+0xfa>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a14      	ldr	r2, [pc, #80]	; (8002c48 <HAL_TIM_PWM_Start+0x13c>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d004      	beq.n	8002c06 <HAL_TIM_PWM_Start+0xfa>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a12      	ldr	r2, [pc, #72]	; (8002c4c <HAL_TIM_PWM_Start+0x140>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d111      	bne.n	8002c2a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	f003 0307 	and.w	r3, r3, #7
 8002c10:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	2b06      	cmp	r3, #6
 8002c16:	d010      	beq.n	8002c3a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	681a      	ldr	r2, [r3, #0]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f042 0201 	orr.w	r2, r2, #1
 8002c26:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c28:	e007      	b.n	8002c3a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	681a      	ldr	r2, [r3, #0]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f042 0201 	orr.w	r2, r2, #1
 8002c38:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c3a:	2300      	movs	r3, #0
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	3710      	adds	r7, #16
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}
 8002c44:	40012c00 	.word	0x40012c00
 8002c48:	40000400 	.word	0x40000400
 8002c4c:	40000800 	.word	0x40000800

08002c50 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b082      	sub	sp, #8
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	691b      	ldr	r3, [r3, #16]
 8002c5e:	f003 0302 	and.w	r3, r3, #2
 8002c62:	2b02      	cmp	r3, #2
 8002c64:	d122      	bne.n	8002cac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	f003 0302 	and.w	r3, r3, #2
 8002c70:	2b02      	cmp	r3, #2
 8002c72:	d11b      	bne.n	8002cac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f06f 0202 	mvn.w	r2, #2
 8002c7c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2201      	movs	r2, #1
 8002c82:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	699b      	ldr	r3, [r3, #24]
 8002c8a:	f003 0303 	and.w	r3, r3, #3
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d003      	beq.n	8002c9a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	f000 fa09 	bl	80030aa <HAL_TIM_IC_CaptureCallback>
 8002c98:	e005      	b.n	8002ca6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	f000 f9fc 	bl	8003098 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ca0:	6878      	ldr	r0, [r7, #4]
 8002ca2:	f000 fa0b 	bl	80030bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	691b      	ldr	r3, [r3, #16]
 8002cb2:	f003 0304 	and.w	r3, r3, #4
 8002cb6:	2b04      	cmp	r3, #4
 8002cb8:	d122      	bne.n	8002d00 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	f003 0304 	and.w	r3, r3, #4
 8002cc4:	2b04      	cmp	r3, #4
 8002cc6:	d11b      	bne.n	8002d00 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f06f 0204 	mvn.w	r2, #4
 8002cd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2202      	movs	r2, #2
 8002cd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	699b      	ldr	r3, [r3, #24]
 8002cde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d003      	beq.n	8002cee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	f000 f9df 	bl	80030aa <HAL_TIM_IC_CaptureCallback>
 8002cec:	e005      	b.n	8002cfa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	f000 f9d2 	bl	8003098 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cf4:	6878      	ldr	r0, [r7, #4]
 8002cf6:	f000 f9e1 	bl	80030bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	691b      	ldr	r3, [r3, #16]
 8002d06:	f003 0308 	and.w	r3, r3, #8
 8002d0a:	2b08      	cmp	r3, #8
 8002d0c:	d122      	bne.n	8002d54 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	68db      	ldr	r3, [r3, #12]
 8002d14:	f003 0308 	and.w	r3, r3, #8
 8002d18:	2b08      	cmp	r3, #8
 8002d1a:	d11b      	bne.n	8002d54 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f06f 0208 	mvn.w	r2, #8
 8002d24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2204      	movs	r2, #4
 8002d2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	69db      	ldr	r3, [r3, #28]
 8002d32:	f003 0303 	and.w	r3, r3, #3
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d003      	beq.n	8002d42 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	f000 f9b5 	bl	80030aa <HAL_TIM_IC_CaptureCallback>
 8002d40:	e005      	b.n	8002d4e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d42:	6878      	ldr	r0, [r7, #4]
 8002d44:	f000 f9a8 	bl	8003098 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d48:	6878      	ldr	r0, [r7, #4]
 8002d4a:	f000 f9b7 	bl	80030bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2200      	movs	r2, #0
 8002d52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	691b      	ldr	r3, [r3, #16]
 8002d5a:	f003 0310 	and.w	r3, r3, #16
 8002d5e:	2b10      	cmp	r3, #16
 8002d60:	d122      	bne.n	8002da8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	68db      	ldr	r3, [r3, #12]
 8002d68:	f003 0310 	and.w	r3, r3, #16
 8002d6c:	2b10      	cmp	r3, #16
 8002d6e:	d11b      	bne.n	8002da8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f06f 0210 	mvn.w	r2, #16
 8002d78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2208      	movs	r2, #8
 8002d7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	69db      	ldr	r3, [r3, #28]
 8002d86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d003      	beq.n	8002d96 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	f000 f98b 	bl	80030aa <HAL_TIM_IC_CaptureCallback>
 8002d94:	e005      	b.n	8002da2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d96:	6878      	ldr	r0, [r7, #4]
 8002d98:	f000 f97e 	bl	8003098 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d9c:	6878      	ldr	r0, [r7, #4]
 8002d9e:	f000 f98d 	bl	80030bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2200      	movs	r2, #0
 8002da6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	691b      	ldr	r3, [r3, #16]
 8002dae:	f003 0301 	and.w	r3, r3, #1
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d10e      	bne.n	8002dd4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	68db      	ldr	r3, [r3, #12]
 8002dbc:	f003 0301 	and.w	r3, r3, #1
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	d107      	bne.n	8002dd4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f06f 0201 	mvn.w	r2, #1
 8002dcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	f7fe fbb8 	bl	8001544 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	691b      	ldr	r3, [r3, #16]
 8002dda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dde:	2b80      	cmp	r3, #128	; 0x80
 8002de0:	d10e      	bne.n	8002e00 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	68db      	ldr	r3, [r3, #12]
 8002de8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dec:	2b80      	cmp	r3, #128	; 0x80
 8002dee:	d107      	bne.n	8002e00 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002df8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	f000 fc7b 	bl	80036f6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	691b      	ldr	r3, [r3, #16]
 8002e06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e0a:	2b40      	cmp	r3, #64	; 0x40
 8002e0c:	d10e      	bne.n	8002e2c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	68db      	ldr	r3, [r3, #12]
 8002e14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e18:	2b40      	cmp	r3, #64	; 0x40
 8002e1a:	d107      	bne.n	8002e2c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002e24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	f000 f951 	bl	80030ce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	691b      	ldr	r3, [r3, #16]
 8002e32:	f003 0320 	and.w	r3, r3, #32
 8002e36:	2b20      	cmp	r3, #32
 8002e38:	d10e      	bne.n	8002e58 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	f003 0320 	and.w	r3, r3, #32
 8002e44:	2b20      	cmp	r3, #32
 8002e46:	d107      	bne.n	8002e58 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f06f 0220 	mvn.w	r2, #32
 8002e50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	f000 fc46 	bl	80036e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e58:	bf00      	nop
 8002e5a:	3708      	adds	r7, #8
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}

08002e60 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b084      	sub	sp, #16
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	60f8      	str	r0, [r7, #12]
 8002e68:	60b9      	str	r1, [r7, #8]
 8002e6a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	d101      	bne.n	8002e7a <HAL_TIM_OC_ConfigChannel+0x1a>
 8002e76:	2302      	movs	r3, #2
 8002e78:	e046      	b.n	8002f08 <HAL_TIM_OC_ConfigChannel+0xa8>
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2b0c      	cmp	r3, #12
 8002e86:	d839      	bhi.n	8002efc <HAL_TIM_OC_ConfigChannel+0x9c>
 8002e88:	a201      	add	r2, pc, #4	; (adr r2, 8002e90 <HAL_TIM_OC_ConfigChannel+0x30>)
 8002e8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e8e:	bf00      	nop
 8002e90:	08002ec5 	.word	0x08002ec5
 8002e94:	08002efd 	.word	0x08002efd
 8002e98:	08002efd 	.word	0x08002efd
 8002e9c:	08002efd 	.word	0x08002efd
 8002ea0:	08002ed3 	.word	0x08002ed3
 8002ea4:	08002efd 	.word	0x08002efd
 8002ea8:	08002efd 	.word	0x08002efd
 8002eac:	08002efd 	.word	0x08002efd
 8002eb0:	08002ee1 	.word	0x08002ee1
 8002eb4:	08002efd 	.word	0x08002efd
 8002eb8:	08002efd 	.word	0x08002efd
 8002ebc:	08002efd 	.word	0x08002efd
 8002ec0:	08002eef 	.word	0x08002eef
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	68b9      	ldr	r1, [r7, #8]
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f000 f96a 	bl	80031a4 <TIM_OC1_SetConfig>
      break;
 8002ed0:	e015      	b.n	8002efe <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	68b9      	ldr	r1, [r7, #8]
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f000 f9c9 	bl	8003270 <TIM_OC2_SetConfig>
      break;
 8002ede:	e00e      	b.n	8002efe <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	68b9      	ldr	r1, [r7, #8]
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f000 fa2c 	bl	8003344 <TIM_OC3_SetConfig>
      break;
 8002eec:	e007      	b.n	8002efe <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	68b9      	ldr	r1, [r7, #8]
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f000 fa8f 	bl	8003418 <TIM_OC4_SetConfig>
      break;
 8002efa:	e000      	b.n	8002efe <HAL_TIM_OC_ConfigChannel+0x9e>
    }

    default:
      break;
 8002efc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2200      	movs	r2, #0
 8002f02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f06:	2300      	movs	r3, #0
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	3710      	adds	r7, #16
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}

08002f10 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b084      	sub	sp, #16
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
 8002f18:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f20:	2b01      	cmp	r3, #1
 8002f22:	d101      	bne.n	8002f28 <HAL_TIM_ConfigClockSource+0x18>
 8002f24:	2302      	movs	r3, #2
 8002f26:	e0b3      	b.n	8003090 <HAL_TIM_ConfigClockSource+0x180>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2202      	movs	r2, #2
 8002f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002f46:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f4e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	68fa      	ldr	r2, [r7, #12]
 8002f56:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f60:	d03e      	beq.n	8002fe0 <HAL_TIM_ConfigClockSource+0xd0>
 8002f62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f66:	f200 8087 	bhi.w	8003078 <HAL_TIM_ConfigClockSource+0x168>
 8002f6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f6e:	f000 8085 	beq.w	800307c <HAL_TIM_ConfigClockSource+0x16c>
 8002f72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f76:	d87f      	bhi.n	8003078 <HAL_TIM_ConfigClockSource+0x168>
 8002f78:	2b70      	cmp	r3, #112	; 0x70
 8002f7a:	d01a      	beq.n	8002fb2 <HAL_TIM_ConfigClockSource+0xa2>
 8002f7c:	2b70      	cmp	r3, #112	; 0x70
 8002f7e:	d87b      	bhi.n	8003078 <HAL_TIM_ConfigClockSource+0x168>
 8002f80:	2b60      	cmp	r3, #96	; 0x60
 8002f82:	d050      	beq.n	8003026 <HAL_TIM_ConfigClockSource+0x116>
 8002f84:	2b60      	cmp	r3, #96	; 0x60
 8002f86:	d877      	bhi.n	8003078 <HAL_TIM_ConfigClockSource+0x168>
 8002f88:	2b50      	cmp	r3, #80	; 0x50
 8002f8a:	d03c      	beq.n	8003006 <HAL_TIM_ConfigClockSource+0xf6>
 8002f8c:	2b50      	cmp	r3, #80	; 0x50
 8002f8e:	d873      	bhi.n	8003078 <HAL_TIM_ConfigClockSource+0x168>
 8002f90:	2b40      	cmp	r3, #64	; 0x40
 8002f92:	d058      	beq.n	8003046 <HAL_TIM_ConfigClockSource+0x136>
 8002f94:	2b40      	cmp	r3, #64	; 0x40
 8002f96:	d86f      	bhi.n	8003078 <HAL_TIM_ConfigClockSource+0x168>
 8002f98:	2b30      	cmp	r3, #48	; 0x30
 8002f9a:	d064      	beq.n	8003066 <HAL_TIM_ConfigClockSource+0x156>
 8002f9c:	2b30      	cmp	r3, #48	; 0x30
 8002f9e:	d86b      	bhi.n	8003078 <HAL_TIM_ConfigClockSource+0x168>
 8002fa0:	2b20      	cmp	r3, #32
 8002fa2:	d060      	beq.n	8003066 <HAL_TIM_ConfigClockSource+0x156>
 8002fa4:	2b20      	cmp	r3, #32
 8002fa6:	d867      	bhi.n	8003078 <HAL_TIM_ConfigClockSource+0x168>
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d05c      	beq.n	8003066 <HAL_TIM_ConfigClockSource+0x156>
 8002fac:	2b10      	cmp	r3, #16
 8002fae:	d05a      	beq.n	8003066 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002fb0:	e062      	b.n	8003078 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6818      	ldr	r0, [r3, #0]
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	6899      	ldr	r1, [r3, #8]
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	685a      	ldr	r2, [r3, #4]
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	68db      	ldr	r3, [r3, #12]
 8002fc2:	f000 faee 	bl	80035a2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002fd4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	68fa      	ldr	r2, [r7, #12]
 8002fdc:	609a      	str	r2, [r3, #8]
      break;
 8002fde:	e04e      	b.n	800307e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6818      	ldr	r0, [r3, #0]
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	6899      	ldr	r1, [r3, #8]
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	685a      	ldr	r2, [r3, #4]
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	f000 fad7 	bl	80035a2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	689a      	ldr	r2, [r3, #8]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003002:	609a      	str	r2, [r3, #8]
      break;
 8003004:	e03b      	b.n	800307e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6818      	ldr	r0, [r3, #0]
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	6859      	ldr	r1, [r3, #4]
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	68db      	ldr	r3, [r3, #12]
 8003012:	461a      	mov	r2, r3
 8003014:	f000 fa4e 	bl	80034b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	2150      	movs	r1, #80	; 0x50
 800301e:	4618      	mov	r0, r3
 8003020:	f000 faa5 	bl	800356e <TIM_ITRx_SetConfig>
      break;
 8003024:	e02b      	b.n	800307e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6818      	ldr	r0, [r3, #0]
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	6859      	ldr	r1, [r3, #4]
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	68db      	ldr	r3, [r3, #12]
 8003032:	461a      	mov	r2, r3
 8003034:	f000 fa6c 	bl	8003510 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	2160      	movs	r1, #96	; 0x60
 800303e:	4618      	mov	r0, r3
 8003040:	f000 fa95 	bl	800356e <TIM_ITRx_SetConfig>
      break;
 8003044:	e01b      	b.n	800307e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6818      	ldr	r0, [r3, #0]
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	6859      	ldr	r1, [r3, #4]
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	68db      	ldr	r3, [r3, #12]
 8003052:	461a      	mov	r2, r3
 8003054:	f000 fa2e 	bl	80034b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	2140      	movs	r1, #64	; 0x40
 800305e:	4618      	mov	r0, r3
 8003060:	f000 fa85 	bl	800356e <TIM_ITRx_SetConfig>
      break;
 8003064:	e00b      	b.n	800307e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4619      	mov	r1, r3
 8003070:	4610      	mov	r0, r2
 8003072:	f000 fa7c 	bl	800356e <TIM_ITRx_SetConfig>
        break;
 8003076:	e002      	b.n	800307e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003078:	bf00      	nop
 800307a:	e000      	b.n	800307e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800307c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2201      	movs	r2, #1
 8003082:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2200      	movs	r2, #0
 800308a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800308e:	2300      	movs	r3, #0
}
 8003090:	4618      	mov	r0, r3
 8003092:	3710      	adds	r7, #16
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}

08003098 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003098:	b480      	push	{r7}
 800309a:	b083      	sub	sp, #12
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80030a0:	bf00      	nop
 80030a2:	370c      	adds	r7, #12
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bc80      	pop	{r7}
 80030a8:	4770      	bx	lr

080030aa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80030aa:	b480      	push	{r7}
 80030ac:	b083      	sub	sp, #12
 80030ae:	af00      	add	r7, sp, #0
 80030b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80030b2:	bf00      	nop
 80030b4:	370c      	adds	r7, #12
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bc80      	pop	{r7}
 80030ba:	4770      	bx	lr

080030bc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80030bc:	b480      	push	{r7}
 80030be:	b083      	sub	sp, #12
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80030c4:	bf00      	nop
 80030c6:	370c      	adds	r7, #12
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bc80      	pop	{r7}
 80030cc:	4770      	bx	lr

080030ce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80030ce:	b480      	push	{r7}
 80030d0:	b083      	sub	sp, #12
 80030d2:	af00      	add	r7, sp, #0
 80030d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80030d6:	bf00      	nop
 80030d8:	370c      	adds	r7, #12
 80030da:	46bd      	mov	sp, r7
 80030dc:	bc80      	pop	{r7}
 80030de:	4770      	bx	lr

080030e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b085      	sub	sp, #20
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
 80030e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	4a29      	ldr	r2, [pc, #164]	; (8003198 <TIM_Base_SetConfig+0xb8>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d00b      	beq.n	8003110 <TIM_Base_SetConfig+0x30>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030fe:	d007      	beq.n	8003110 <TIM_Base_SetConfig+0x30>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	4a26      	ldr	r2, [pc, #152]	; (800319c <TIM_Base_SetConfig+0xbc>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d003      	beq.n	8003110 <TIM_Base_SetConfig+0x30>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	4a25      	ldr	r2, [pc, #148]	; (80031a0 <TIM_Base_SetConfig+0xc0>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d108      	bne.n	8003122 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003116:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	68fa      	ldr	r2, [r7, #12]
 800311e:	4313      	orrs	r3, r2
 8003120:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	4a1c      	ldr	r2, [pc, #112]	; (8003198 <TIM_Base_SetConfig+0xb8>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d00b      	beq.n	8003142 <TIM_Base_SetConfig+0x62>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003130:	d007      	beq.n	8003142 <TIM_Base_SetConfig+0x62>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	4a19      	ldr	r2, [pc, #100]	; (800319c <TIM_Base_SetConfig+0xbc>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d003      	beq.n	8003142 <TIM_Base_SetConfig+0x62>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	4a18      	ldr	r2, [pc, #96]	; (80031a0 <TIM_Base_SetConfig+0xc0>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d108      	bne.n	8003154 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003148:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	68db      	ldr	r3, [r3, #12]
 800314e:	68fa      	ldr	r2, [r7, #12]
 8003150:	4313      	orrs	r3, r2
 8003152:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	695b      	ldr	r3, [r3, #20]
 800315e:	4313      	orrs	r3, r2
 8003160:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	68fa      	ldr	r2, [r7, #12]
 8003166:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	689a      	ldr	r2, [r3, #8]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	4a07      	ldr	r2, [pc, #28]	; (8003198 <TIM_Base_SetConfig+0xb8>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d103      	bne.n	8003188 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	691a      	ldr	r2, [r3, #16]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2201      	movs	r2, #1
 800318c:	615a      	str	r2, [r3, #20]
}
 800318e:	bf00      	nop
 8003190:	3714      	adds	r7, #20
 8003192:	46bd      	mov	sp, r7
 8003194:	bc80      	pop	{r7}
 8003196:	4770      	bx	lr
 8003198:	40012c00 	.word	0x40012c00
 800319c:	40000400 	.word	0x40000400
 80031a0:	40000800 	.word	0x40000800

080031a4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b087      	sub	sp, #28
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
 80031ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6a1b      	ldr	r3, [r3, #32]
 80031b2:	f023 0201 	bic.w	r2, r3, #1
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6a1b      	ldr	r3, [r3, #32]
 80031be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	699b      	ldr	r3, [r3, #24]
 80031ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	f023 0303 	bic.w	r3, r3, #3
 80031da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	68fa      	ldr	r2, [r7, #12]
 80031e2:	4313      	orrs	r3, r2
 80031e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	f023 0302 	bic.w	r3, r3, #2
 80031ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	697a      	ldr	r2, [r7, #20]
 80031f4:	4313      	orrs	r3, r2
 80031f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	4a1c      	ldr	r2, [pc, #112]	; (800326c <TIM_OC1_SetConfig+0xc8>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d10c      	bne.n	800321a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	f023 0308 	bic.w	r3, r3, #8
 8003206:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	68db      	ldr	r3, [r3, #12]
 800320c:	697a      	ldr	r2, [r7, #20]
 800320e:	4313      	orrs	r3, r2
 8003210:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	f023 0304 	bic.w	r3, r3, #4
 8003218:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	4a13      	ldr	r2, [pc, #76]	; (800326c <TIM_OC1_SetConfig+0xc8>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d111      	bne.n	8003246 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003228:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003230:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	695b      	ldr	r3, [r3, #20]
 8003236:	693a      	ldr	r2, [r7, #16]
 8003238:	4313      	orrs	r3, r2
 800323a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	699b      	ldr	r3, [r3, #24]
 8003240:	693a      	ldr	r2, [r7, #16]
 8003242:	4313      	orrs	r3, r2
 8003244:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	693a      	ldr	r2, [r7, #16]
 800324a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	68fa      	ldr	r2, [r7, #12]
 8003250:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	685a      	ldr	r2, [r3, #4]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	697a      	ldr	r2, [r7, #20]
 800325e:	621a      	str	r2, [r3, #32]
}
 8003260:	bf00      	nop
 8003262:	371c      	adds	r7, #28
 8003264:	46bd      	mov	sp, r7
 8003266:	bc80      	pop	{r7}
 8003268:	4770      	bx	lr
 800326a:	bf00      	nop
 800326c:	40012c00 	.word	0x40012c00

08003270 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003270:	b480      	push	{r7}
 8003272:	b087      	sub	sp, #28
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
 8003278:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6a1b      	ldr	r3, [r3, #32]
 800327e:	f023 0210 	bic.w	r2, r3, #16
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6a1b      	ldr	r3, [r3, #32]
 800328a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	699b      	ldr	r3, [r3, #24]
 8003296:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800329e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	021b      	lsls	r3, r3, #8
 80032ae:	68fa      	ldr	r2, [r7, #12]
 80032b0:	4313      	orrs	r3, r2
 80032b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	f023 0320 	bic.w	r3, r3, #32
 80032ba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	011b      	lsls	r3, r3, #4
 80032c2:	697a      	ldr	r2, [r7, #20]
 80032c4:	4313      	orrs	r3, r2
 80032c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	4a1d      	ldr	r2, [pc, #116]	; (8003340 <TIM_OC2_SetConfig+0xd0>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d10d      	bne.n	80032ec <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80032d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	68db      	ldr	r3, [r3, #12]
 80032dc:	011b      	lsls	r3, r3, #4
 80032de:	697a      	ldr	r2, [r7, #20]
 80032e0:	4313      	orrs	r3, r2
 80032e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80032ea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	4a14      	ldr	r2, [pc, #80]	; (8003340 <TIM_OC2_SetConfig+0xd0>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d113      	bne.n	800331c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80032f4:	693b      	ldr	r3, [r7, #16]
 80032f6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80032fa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003302:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	695b      	ldr	r3, [r3, #20]
 8003308:	009b      	lsls	r3, r3, #2
 800330a:	693a      	ldr	r2, [r7, #16]
 800330c:	4313      	orrs	r3, r2
 800330e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	699b      	ldr	r3, [r3, #24]
 8003314:	009b      	lsls	r3, r3, #2
 8003316:	693a      	ldr	r2, [r7, #16]
 8003318:	4313      	orrs	r3, r2
 800331a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	693a      	ldr	r2, [r7, #16]
 8003320:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	68fa      	ldr	r2, [r7, #12]
 8003326:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	685a      	ldr	r2, [r3, #4]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	697a      	ldr	r2, [r7, #20]
 8003334:	621a      	str	r2, [r3, #32]
}
 8003336:	bf00      	nop
 8003338:	371c      	adds	r7, #28
 800333a:	46bd      	mov	sp, r7
 800333c:	bc80      	pop	{r7}
 800333e:	4770      	bx	lr
 8003340:	40012c00 	.word	0x40012c00

08003344 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003344:	b480      	push	{r7}
 8003346:	b087      	sub	sp, #28
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
 800334c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6a1b      	ldr	r3, [r3, #32]
 8003352:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6a1b      	ldr	r3, [r3, #32]
 800335e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	69db      	ldr	r3, [r3, #28]
 800336a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003372:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	f023 0303 	bic.w	r3, r3, #3
 800337a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	68fa      	ldr	r2, [r7, #12]
 8003382:	4313      	orrs	r3, r2
 8003384:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800338c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	021b      	lsls	r3, r3, #8
 8003394:	697a      	ldr	r2, [r7, #20]
 8003396:	4313      	orrs	r3, r2
 8003398:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	4a1d      	ldr	r2, [pc, #116]	; (8003414 <TIM_OC3_SetConfig+0xd0>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d10d      	bne.n	80033be <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80033a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	68db      	ldr	r3, [r3, #12]
 80033ae:	021b      	lsls	r3, r3, #8
 80033b0:	697a      	ldr	r2, [r7, #20]
 80033b2:	4313      	orrs	r3, r2
 80033b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80033bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	4a14      	ldr	r2, [pc, #80]	; (8003414 <TIM_OC3_SetConfig+0xd0>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d113      	bne.n	80033ee <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80033cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80033d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	695b      	ldr	r3, [r3, #20]
 80033da:	011b      	lsls	r3, r3, #4
 80033dc:	693a      	ldr	r2, [r7, #16]
 80033de:	4313      	orrs	r3, r2
 80033e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	699b      	ldr	r3, [r3, #24]
 80033e6:	011b      	lsls	r3, r3, #4
 80033e8:	693a      	ldr	r2, [r7, #16]
 80033ea:	4313      	orrs	r3, r2
 80033ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	693a      	ldr	r2, [r7, #16]
 80033f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	68fa      	ldr	r2, [r7, #12]
 80033f8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	685a      	ldr	r2, [r3, #4]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	697a      	ldr	r2, [r7, #20]
 8003406:	621a      	str	r2, [r3, #32]
}
 8003408:	bf00      	nop
 800340a:	371c      	adds	r7, #28
 800340c:	46bd      	mov	sp, r7
 800340e:	bc80      	pop	{r7}
 8003410:	4770      	bx	lr
 8003412:	bf00      	nop
 8003414:	40012c00 	.word	0x40012c00

08003418 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003418:	b480      	push	{r7}
 800341a:	b087      	sub	sp, #28
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
 8003420:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6a1b      	ldr	r3, [r3, #32]
 8003426:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6a1b      	ldr	r3, [r3, #32]
 8003432:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	69db      	ldr	r3, [r3, #28]
 800343e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003446:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800344e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	021b      	lsls	r3, r3, #8
 8003456:	68fa      	ldr	r2, [r7, #12]
 8003458:	4313      	orrs	r3, r2
 800345a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003462:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	031b      	lsls	r3, r3, #12
 800346a:	693a      	ldr	r2, [r7, #16]
 800346c:	4313      	orrs	r3, r2
 800346e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	4a0f      	ldr	r2, [pc, #60]	; (80034b0 <TIM_OC4_SetConfig+0x98>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d109      	bne.n	800348c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800347e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	695b      	ldr	r3, [r3, #20]
 8003484:	019b      	lsls	r3, r3, #6
 8003486:	697a      	ldr	r2, [r7, #20]
 8003488:	4313      	orrs	r3, r2
 800348a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	697a      	ldr	r2, [r7, #20]
 8003490:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	68fa      	ldr	r2, [r7, #12]
 8003496:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	685a      	ldr	r2, [r3, #4]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	693a      	ldr	r2, [r7, #16]
 80034a4:	621a      	str	r2, [r3, #32]
}
 80034a6:	bf00      	nop
 80034a8:	371c      	adds	r7, #28
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bc80      	pop	{r7}
 80034ae:	4770      	bx	lr
 80034b0:	40012c00 	.word	0x40012c00

080034b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b087      	sub	sp, #28
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	60f8      	str	r0, [r7, #12]
 80034bc:	60b9      	str	r1, [r7, #8]
 80034be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	6a1b      	ldr	r3, [r3, #32]
 80034c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	6a1b      	ldr	r3, [r3, #32]
 80034ca:	f023 0201 	bic.w	r2, r3, #1
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	699b      	ldr	r3, [r3, #24]
 80034d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80034d8:	693b      	ldr	r3, [r7, #16]
 80034da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80034de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	011b      	lsls	r3, r3, #4
 80034e4:	693a      	ldr	r2, [r7, #16]
 80034e6:	4313      	orrs	r3, r2
 80034e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	f023 030a 	bic.w	r3, r3, #10
 80034f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80034f2:	697a      	ldr	r2, [r7, #20]
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	4313      	orrs	r3, r2
 80034f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	693a      	ldr	r2, [r7, #16]
 80034fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	697a      	ldr	r2, [r7, #20]
 8003504:	621a      	str	r2, [r3, #32]
}
 8003506:	bf00      	nop
 8003508:	371c      	adds	r7, #28
 800350a:	46bd      	mov	sp, r7
 800350c:	bc80      	pop	{r7}
 800350e:	4770      	bx	lr

08003510 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003510:	b480      	push	{r7}
 8003512:	b087      	sub	sp, #28
 8003514:	af00      	add	r7, sp, #0
 8003516:	60f8      	str	r0, [r7, #12]
 8003518:	60b9      	str	r1, [r7, #8]
 800351a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	6a1b      	ldr	r3, [r3, #32]
 8003520:	f023 0210 	bic.w	r2, r3, #16
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	699b      	ldr	r3, [r3, #24]
 800352c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	6a1b      	ldr	r3, [r3, #32]
 8003532:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800353a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	031b      	lsls	r3, r3, #12
 8003540:	697a      	ldr	r2, [r7, #20]
 8003542:	4313      	orrs	r3, r2
 8003544:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800354c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	011b      	lsls	r3, r3, #4
 8003552:	693a      	ldr	r2, [r7, #16]
 8003554:	4313      	orrs	r3, r2
 8003556:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	697a      	ldr	r2, [r7, #20]
 800355c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	693a      	ldr	r2, [r7, #16]
 8003562:	621a      	str	r2, [r3, #32]
}
 8003564:	bf00      	nop
 8003566:	371c      	adds	r7, #28
 8003568:	46bd      	mov	sp, r7
 800356a:	bc80      	pop	{r7}
 800356c:	4770      	bx	lr

0800356e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800356e:	b480      	push	{r7}
 8003570:	b085      	sub	sp, #20
 8003572:	af00      	add	r7, sp, #0
 8003574:	6078      	str	r0, [r7, #4]
 8003576:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003584:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003586:	683a      	ldr	r2, [r7, #0]
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	4313      	orrs	r3, r2
 800358c:	f043 0307 	orr.w	r3, r3, #7
 8003590:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	68fa      	ldr	r2, [r7, #12]
 8003596:	609a      	str	r2, [r3, #8]
}
 8003598:	bf00      	nop
 800359a:	3714      	adds	r7, #20
 800359c:	46bd      	mov	sp, r7
 800359e:	bc80      	pop	{r7}
 80035a0:	4770      	bx	lr

080035a2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80035a2:	b480      	push	{r7}
 80035a4:	b087      	sub	sp, #28
 80035a6:	af00      	add	r7, sp, #0
 80035a8:	60f8      	str	r0, [r7, #12]
 80035aa:	60b9      	str	r1, [r7, #8]
 80035ac:	607a      	str	r2, [r7, #4]
 80035ae:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80035bc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	021a      	lsls	r2, r3, #8
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	431a      	orrs	r2, r3
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	4313      	orrs	r3, r2
 80035ca:	697a      	ldr	r2, [r7, #20]
 80035cc:	4313      	orrs	r3, r2
 80035ce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	697a      	ldr	r2, [r7, #20]
 80035d4:	609a      	str	r2, [r3, #8]
}
 80035d6:	bf00      	nop
 80035d8:	371c      	adds	r7, #28
 80035da:	46bd      	mov	sp, r7
 80035dc:	bc80      	pop	{r7}
 80035de:	4770      	bx	lr

080035e0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b087      	sub	sp, #28
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	60f8      	str	r0, [r7, #12]
 80035e8:	60b9      	str	r1, [r7, #8]
 80035ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	f003 031f 	and.w	r3, r3, #31
 80035f2:	2201      	movs	r2, #1
 80035f4:	fa02 f303 	lsl.w	r3, r2, r3
 80035f8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	6a1a      	ldr	r2, [r3, #32]
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	43db      	mvns	r3, r3
 8003602:	401a      	ands	r2, r3
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	6a1a      	ldr	r2, [r3, #32]
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	f003 031f 	and.w	r3, r3, #31
 8003612:	6879      	ldr	r1, [r7, #4]
 8003614:	fa01 f303 	lsl.w	r3, r1, r3
 8003618:	431a      	orrs	r2, r3
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	621a      	str	r2, [r3, #32]
}
 800361e:	bf00      	nop
 8003620:	371c      	adds	r7, #28
 8003622:	46bd      	mov	sp, r7
 8003624:	bc80      	pop	{r7}
 8003626:	4770      	bx	lr

08003628 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003628:	b480      	push	{r7}
 800362a:	b085      	sub	sp, #20
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
 8003630:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003638:	2b01      	cmp	r3, #1
 800363a:	d101      	bne.n	8003640 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800363c:	2302      	movs	r3, #2
 800363e:	e046      	b.n	80036ce <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2201      	movs	r2, #1
 8003644:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2202      	movs	r2, #2
 800364c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003666:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	68fa      	ldr	r2, [r7, #12]
 800366e:	4313      	orrs	r3, r2
 8003670:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	68fa      	ldr	r2, [r7, #12]
 8003678:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a16      	ldr	r2, [pc, #88]	; (80036d8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d00e      	beq.n	80036a2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800368c:	d009      	beq.n	80036a2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a12      	ldr	r2, [pc, #72]	; (80036dc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d004      	beq.n	80036a2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a10      	ldr	r2, [pc, #64]	; (80036e0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d10c      	bne.n	80036bc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80036a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	68ba      	ldr	r2, [r7, #8]
 80036b0:	4313      	orrs	r3, r2
 80036b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	68ba      	ldr	r2, [r7, #8]
 80036ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2201      	movs	r2, #1
 80036c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2200      	movs	r2, #0
 80036c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80036cc:	2300      	movs	r3, #0
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	3714      	adds	r7, #20
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bc80      	pop	{r7}
 80036d6:	4770      	bx	lr
 80036d8:	40012c00 	.word	0x40012c00
 80036dc:	40000400 	.word	0x40000400
 80036e0:	40000800 	.word	0x40000800

080036e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b083      	sub	sp, #12
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80036ec:	bf00      	nop
 80036ee:	370c      	adds	r7, #12
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bc80      	pop	{r7}
 80036f4:	4770      	bx	lr

080036f6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80036f6:	b480      	push	{r7}
 80036f8:	b083      	sub	sp, #12
 80036fa:	af00      	add	r7, sp, #0
 80036fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80036fe:	bf00      	nop
 8003700:	370c      	adds	r7, #12
 8003702:	46bd      	mov	sp, r7
 8003704:	bc80      	pop	{r7}
 8003706:	4770      	bx	lr

08003708 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b082      	sub	sp, #8
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d101      	bne.n	800371a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	e03f      	b.n	800379a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003720:	b2db      	uxtb	r3, r3
 8003722:	2b00      	cmp	r3, #0
 8003724:	d106      	bne.n	8003734 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2200      	movs	r2, #0
 800372a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	f7fe f80a 	bl	8001748 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2224      	movs	r2, #36	; 0x24
 8003738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	68da      	ldr	r2, [r3, #12]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800374a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800374c:	6878      	ldr	r0, [r7, #4]
 800374e:	f000 fb85 	bl	8003e5c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	691a      	ldr	r2, [r3, #16]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003760:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	695a      	ldr	r2, [r3, #20]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003770:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	68da      	ldr	r2, [r3, #12]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003780:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2200      	movs	r2, #0
 8003786:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2220      	movs	r2, #32
 800378c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2220      	movs	r2, #32
 8003794:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003798:	2300      	movs	r3, #0
}
 800379a:	4618      	mov	r0, r3
 800379c:	3708      	adds	r7, #8
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}

080037a2 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80037a2:	b480      	push	{r7}
 80037a4:	b085      	sub	sp, #20
 80037a6:	af00      	add	r7, sp, #0
 80037a8:	60f8      	str	r0, [r7, #12]
 80037aa:	60b9      	str	r1, [r7, #8]
 80037ac:	4613      	mov	r3, r2
 80037ae:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037b6:	b2db      	uxtb	r3, r3
 80037b8:	2b20      	cmp	r3, #32
 80037ba:	d130      	bne.n	800381e <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d002      	beq.n	80037c8 <HAL_UART_Transmit_IT+0x26>
 80037c2:	88fb      	ldrh	r3, [r7, #6]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d101      	bne.n	80037cc <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	e029      	b.n	8003820 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	d101      	bne.n	80037da <HAL_UART_Transmit_IT+0x38>
 80037d6:	2302      	movs	r3, #2
 80037d8:	e022      	b.n	8003820 <HAL_UART_Transmit_IT+0x7e>
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	2201      	movs	r2, #1
 80037de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	68ba      	ldr	r2, [r7, #8]
 80037e6:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	88fa      	ldrh	r2, [r7, #6]
 80037ec:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	88fa      	ldrh	r2, [r7, #6]
 80037f2:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2200      	movs	r2, #0
 80037f8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	2221      	movs	r2, #33	; 0x21
 80037fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	2200      	movs	r2, #0
 8003806:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	68da      	ldr	r2, [r3, #12]
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003818:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800381a:	2300      	movs	r3, #0
 800381c:	e000      	b.n	8003820 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800381e:	2302      	movs	r3, #2
  }
}
 8003820:	4618      	mov	r0, r3
 8003822:	3714      	adds	r7, #20
 8003824:	46bd      	mov	sp, r7
 8003826:	bc80      	pop	{r7}
 8003828:	4770      	bx	lr
	...

0800382c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b08a      	sub	sp, #40	; 0x28
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	68db      	ldr	r3, [r3, #12]
 8003842:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	695b      	ldr	r3, [r3, #20]
 800384a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 800384c:	2300      	movs	r3, #0
 800384e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8003850:	2300      	movs	r3, #0
 8003852:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003856:	f003 030f 	and.w	r3, r3, #15
 800385a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 800385c:	69bb      	ldr	r3, [r7, #24]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d10d      	bne.n	800387e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003864:	f003 0320 	and.w	r3, r3, #32
 8003868:	2b00      	cmp	r3, #0
 800386a:	d008      	beq.n	800387e <HAL_UART_IRQHandler+0x52>
 800386c:	6a3b      	ldr	r3, [r7, #32]
 800386e:	f003 0320 	and.w	r3, r3, #32
 8003872:	2b00      	cmp	r3, #0
 8003874:	d003      	beq.n	800387e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	f000 fa46 	bl	8003d08 <UART_Receive_IT>
      return;
 800387c:	e17b      	b.n	8003b76 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800387e:	69bb      	ldr	r3, [r7, #24]
 8003880:	2b00      	cmp	r3, #0
 8003882:	f000 80b1 	beq.w	80039e8 <HAL_UART_IRQHandler+0x1bc>
 8003886:	69fb      	ldr	r3, [r7, #28]
 8003888:	f003 0301 	and.w	r3, r3, #1
 800388c:	2b00      	cmp	r3, #0
 800388e:	d105      	bne.n	800389c <HAL_UART_IRQHandler+0x70>
 8003890:	6a3b      	ldr	r3, [r7, #32]
 8003892:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003896:	2b00      	cmp	r3, #0
 8003898:	f000 80a6 	beq.w	80039e8 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800389c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800389e:	f003 0301 	and.w	r3, r3, #1
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d00a      	beq.n	80038bc <HAL_UART_IRQHandler+0x90>
 80038a6:	6a3b      	ldr	r3, [r7, #32]
 80038a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d005      	beq.n	80038bc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b4:	f043 0201 	orr.w	r2, r3, #1
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80038bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038be:	f003 0304 	and.w	r3, r3, #4
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d00a      	beq.n	80038dc <HAL_UART_IRQHandler+0xb0>
 80038c6:	69fb      	ldr	r3, [r7, #28]
 80038c8:	f003 0301 	and.w	r3, r3, #1
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d005      	beq.n	80038dc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d4:	f043 0202 	orr.w	r2, r3, #2
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80038dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038de:	f003 0302 	and.w	r3, r3, #2
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d00a      	beq.n	80038fc <HAL_UART_IRQHandler+0xd0>
 80038e6:	69fb      	ldr	r3, [r7, #28]
 80038e8:	f003 0301 	and.w	r3, r3, #1
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d005      	beq.n	80038fc <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f4:	f043 0204 	orr.w	r2, r3, #4
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80038fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038fe:	f003 0308 	and.w	r3, r3, #8
 8003902:	2b00      	cmp	r3, #0
 8003904:	d00f      	beq.n	8003926 <HAL_UART_IRQHandler+0xfa>
 8003906:	6a3b      	ldr	r3, [r7, #32]
 8003908:	f003 0320 	and.w	r3, r3, #32
 800390c:	2b00      	cmp	r3, #0
 800390e:	d104      	bne.n	800391a <HAL_UART_IRQHandler+0xee>
 8003910:	69fb      	ldr	r3, [r7, #28]
 8003912:	f003 0301 	and.w	r3, r3, #1
 8003916:	2b00      	cmp	r3, #0
 8003918:	d005      	beq.n	8003926 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800391e:	f043 0208 	orr.w	r2, r3, #8
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800392a:	2b00      	cmp	r3, #0
 800392c:	f000 811e 	beq.w	8003b6c <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003932:	f003 0320 	and.w	r3, r3, #32
 8003936:	2b00      	cmp	r3, #0
 8003938:	d007      	beq.n	800394a <HAL_UART_IRQHandler+0x11e>
 800393a:	6a3b      	ldr	r3, [r7, #32]
 800393c:	f003 0320 	and.w	r3, r3, #32
 8003940:	2b00      	cmp	r3, #0
 8003942:	d002      	beq.n	800394a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003944:	6878      	ldr	r0, [r7, #4]
 8003946:	f000 f9df 	bl	8003d08 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	695b      	ldr	r3, [r3, #20]
 8003950:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003954:	2b00      	cmp	r3, #0
 8003956:	bf14      	ite	ne
 8003958:	2301      	movne	r3, #1
 800395a:	2300      	moveq	r3, #0
 800395c:	b2db      	uxtb	r3, r3
 800395e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003964:	f003 0308 	and.w	r3, r3, #8
 8003968:	2b00      	cmp	r3, #0
 800396a:	d102      	bne.n	8003972 <HAL_UART_IRQHandler+0x146>
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d031      	beq.n	80039d6 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	f000 f921 	bl	8003bba <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	695b      	ldr	r3, [r3, #20]
 800397e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003982:	2b00      	cmp	r3, #0
 8003984:	d023      	beq.n	80039ce <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	695a      	ldr	r2, [r3, #20]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003994:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800399a:	2b00      	cmp	r3, #0
 800399c:	d013      	beq.n	80039c6 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039a2:	4a76      	ldr	r2, [pc, #472]	; (8003b7c <HAL_UART_IRQHandler+0x350>)
 80039a4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039aa:	4618      	mov	r0, r3
 80039ac:	f7fe f970 	bl	8001c90 <HAL_DMA_Abort_IT>
 80039b0:	4603      	mov	r3, r0
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d016      	beq.n	80039e4 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039bc:	687a      	ldr	r2, [r7, #4]
 80039be:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80039c0:	4610      	mov	r0, r2
 80039c2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039c4:	e00e      	b.n	80039e4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80039c6:	6878      	ldr	r0, [r7, #4]
 80039c8:	f000 f8e3 	bl	8003b92 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039cc:	e00a      	b.n	80039e4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	f000 f8df 	bl	8003b92 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039d4:	e006      	b.n	80039e4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f000 f8db 	bl	8003b92 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2200      	movs	r2, #0
 80039e0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80039e2:	e0c3      	b.n	8003b6c <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039e4:	bf00      	nop
    return;
 80039e6:	e0c1      	b.n	8003b6c <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ec:	2b01      	cmp	r3, #1
 80039ee:	f040 80a1 	bne.w	8003b34 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80039f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f4:	f003 0310 	and.w	r3, r3, #16
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	f000 809b 	beq.w	8003b34 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80039fe:	6a3b      	ldr	r3, [r7, #32]
 8003a00:	f003 0310 	and.w	r3, r3, #16
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	f000 8095 	beq.w	8003b34 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	60fb      	str	r3, [r7, #12]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	60fb      	str	r3, [r7, #12]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	60fb      	str	r3, [r7, #12]
 8003a1e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	695b      	ldr	r3, [r3, #20]
 8003a26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d04e      	beq.n	8003acc <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003a38:	8a3b      	ldrh	r3, [r7, #16]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	f000 8098 	beq.w	8003b70 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003a44:	8a3a      	ldrh	r2, [r7, #16]
 8003a46:	429a      	cmp	r2, r3
 8003a48:	f080 8092 	bcs.w	8003b70 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	8a3a      	ldrh	r2, [r7, #16]
 8003a50:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a56:	699b      	ldr	r3, [r3, #24]
 8003a58:	2b20      	cmp	r3, #32
 8003a5a:	d02b      	beq.n	8003ab4 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	68da      	ldr	r2, [r3, #12]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a6a:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	695a      	ldr	r2, [r3, #20]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f022 0201 	bic.w	r2, r2, #1
 8003a7a:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	695a      	ldr	r2, [r3, #20]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a8a:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2220      	movs	r2, #32
 8003a90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2200      	movs	r2, #0
 8003a98:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	68da      	ldr	r2, [r3, #12]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f022 0210 	bic.w	r2, r2, #16
 8003aa8:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f7fe f8b3 	bl	8001c1a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003abc:	b29b      	uxth	r3, r3
 8003abe:	1ad3      	subs	r3, r2, r3
 8003ac0:	b29b      	uxth	r3, r3
 8003ac2:	4619      	mov	r1, r3
 8003ac4:	6878      	ldr	r0, [r7, #4]
 8003ac6:	f000 f86d 	bl	8003ba4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003aca:	e051      	b.n	8003b70 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ad4:	b29b      	uxth	r3, r3
 8003ad6:	1ad3      	subs	r3, r2, r3
 8003ad8:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ade:	b29b      	uxth	r3, r3
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d047      	beq.n	8003b74 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8003ae4:	8a7b      	ldrh	r3, [r7, #18]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d044      	beq.n	8003b74 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	68da      	ldr	r2, [r3, #12]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003af8:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	695a      	ldr	r2, [r3, #20]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f022 0201 	bic.w	r2, r2, #1
 8003b08:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2220      	movs	r2, #32
 8003b0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2200      	movs	r2, #0
 8003b16:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	68da      	ldr	r2, [r3, #12]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f022 0210 	bic.w	r2, r2, #16
 8003b26:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003b28:	8a7b      	ldrh	r3, [r7, #18]
 8003b2a:	4619      	mov	r1, r3
 8003b2c:	6878      	ldr	r0, [r7, #4]
 8003b2e:	f000 f839 	bl	8003ba4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003b32:	e01f      	b.n	8003b74 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d008      	beq.n	8003b50 <HAL_UART_IRQHandler+0x324>
 8003b3e:	6a3b      	ldr	r3, [r7, #32]
 8003b40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d003      	beq.n	8003b50 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8003b48:	6878      	ldr	r0, [r7, #4]
 8003b4a:	f000 f876 	bl	8003c3a <UART_Transmit_IT>
    return;
 8003b4e:	e012      	b.n	8003b76 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d00d      	beq.n	8003b76 <HAL_UART_IRQHandler+0x34a>
 8003b5a:	6a3b      	ldr	r3, [r7, #32]
 8003b5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d008      	beq.n	8003b76 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8003b64:	6878      	ldr	r0, [r7, #4]
 8003b66:	f000 f8b7 	bl	8003cd8 <UART_EndTransmit_IT>
    return;
 8003b6a:	e004      	b.n	8003b76 <HAL_UART_IRQHandler+0x34a>
    return;
 8003b6c:	bf00      	nop
 8003b6e:	e002      	b.n	8003b76 <HAL_UART_IRQHandler+0x34a>
      return;
 8003b70:	bf00      	nop
 8003b72:	e000      	b.n	8003b76 <HAL_UART_IRQHandler+0x34a>
      return;
 8003b74:	bf00      	nop
  }
}
 8003b76:	3728      	adds	r7, #40	; 0x28
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd80      	pop	{r7, pc}
 8003b7c:	08003c13 	.word	0x08003c13

08003b80 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b083      	sub	sp, #12
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003b88:	bf00      	nop
 8003b8a:	370c      	adds	r7, #12
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bc80      	pop	{r7}
 8003b90:	4770      	bx	lr

08003b92 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003b92:	b480      	push	{r7}
 8003b94:	b083      	sub	sp, #12
 8003b96:	af00      	add	r7, sp, #0
 8003b98:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003b9a:	bf00      	nop
 8003b9c:	370c      	adds	r7, #12
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bc80      	pop	{r7}
 8003ba2:	4770      	bx	lr

08003ba4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b083      	sub	sp, #12
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
 8003bac:	460b      	mov	r3, r1
 8003bae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003bb0:	bf00      	nop
 8003bb2:	370c      	adds	r7, #12
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bc80      	pop	{r7}
 8003bb8:	4770      	bx	lr

08003bba <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003bba:	b480      	push	{r7}
 8003bbc:	b083      	sub	sp, #12
 8003bbe:	af00      	add	r7, sp, #0
 8003bc0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	68da      	ldr	r2, [r3, #12]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003bd0:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	695a      	ldr	r2, [r3, #20]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f022 0201 	bic.w	r2, r2, #1
 8003be0:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003be6:	2b01      	cmp	r3, #1
 8003be8:	d107      	bne.n	8003bfa <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	68da      	ldr	r2, [r3, #12]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f022 0210 	bic.w	r2, r2, #16
 8003bf8:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2220      	movs	r2, #32
 8003bfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2200      	movs	r2, #0
 8003c06:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003c08:	bf00      	nop
 8003c0a:	370c      	adds	r7, #12
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bc80      	pop	{r7}
 8003c10:	4770      	bx	lr

08003c12 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003c12:	b580      	push	{r7, lr}
 8003c14:	b084      	sub	sp, #16
 8003c16:	af00      	add	r7, sp, #0
 8003c18:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c1e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	2200      	movs	r2, #0
 8003c24:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003c2c:	68f8      	ldr	r0, [r7, #12]
 8003c2e:	f7ff ffb0 	bl	8003b92 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c32:	bf00      	nop
 8003c34:	3710      	adds	r7, #16
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}

08003c3a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003c3a:	b480      	push	{r7}
 8003c3c:	b085      	sub	sp, #20
 8003c3e:	af00      	add	r7, sp, #0
 8003c40:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	2b21      	cmp	r3, #33	; 0x21
 8003c4c:	d13e      	bne.n	8003ccc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	689b      	ldr	r3, [r3, #8]
 8003c52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c56:	d114      	bne.n	8003c82 <UART_Transmit_IT+0x48>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	691b      	ldr	r3, [r3, #16]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d110      	bne.n	8003c82 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6a1b      	ldr	r3, [r3, #32]
 8003c64:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	881b      	ldrh	r3, [r3, #0]
 8003c6a:	461a      	mov	r2, r3
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c74:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6a1b      	ldr	r3, [r3, #32]
 8003c7a:	1c9a      	adds	r2, r3, #2
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	621a      	str	r2, [r3, #32]
 8003c80:	e008      	b.n	8003c94 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6a1b      	ldr	r3, [r3, #32]
 8003c86:	1c59      	adds	r1, r3, #1
 8003c88:	687a      	ldr	r2, [r7, #4]
 8003c8a:	6211      	str	r1, [r2, #32]
 8003c8c:	781a      	ldrb	r2, [r3, #0]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c98:	b29b      	uxth	r3, r3
 8003c9a:	3b01      	subs	r3, #1
 8003c9c:	b29b      	uxth	r3, r3
 8003c9e:	687a      	ldr	r2, [r7, #4]
 8003ca0:	4619      	mov	r1, r3
 8003ca2:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d10f      	bne.n	8003cc8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	68da      	ldr	r2, [r3, #12]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003cb6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	68da      	ldr	r2, [r3, #12]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003cc6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	e000      	b.n	8003cce <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003ccc:	2302      	movs	r3, #2
  }
}
 8003cce:	4618      	mov	r0, r3
 8003cd0:	3714      	adds	r7, #20
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bc80      	pop	{r7}
 8003cd6:	4770      	bx	lr

08003cd8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b082      	sub	sp, #8
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	68da      	ldr	r2, [r3, #12]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003cee:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2220      	movs	r2, #32
 8003cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003cf8:	6878      	ldr	r0, [r7, #4]
 8003cfa:	f7ff ff41 	bl	8003b80 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003cfe:	2300      	movs	r3, #0
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	3708      	adds	r7, #8
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}

08003d08 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b086      	sub	sp, #24
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d16:	b2db      	uxtb	r3, r3
 8003d18:	2b22      	cmp	r3, #34	; 0x22
 8003d1a:	f040 8099 	bne.w	8003e50 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d26:	d117      	bne.n	8003d58 <UART_Receive_IT+0x50>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	691b      	ldr	r3, [r3, #16]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d113      	bne.n	8003d58 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003d30:	2300      	movs	r3, #0
 8003d32:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d38:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	b29b      	uxth	r3, r3
 8003d42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d46:	b29a      	uxth	r2, r3
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d50:	1c9a      	adds	r2, r3, #2
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	629a      	str	r2, [r3, #40]	; 0x28
 8003d56:	e026      	b.n	8003da6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d5c:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d6a:	d007      	beq.n	8003d7c <UART_Receive_IT+0x74>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d10a      	bne.n	8003d8a <UART_Receive_IT+0x82>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	691b      	ldr	r3, [r3, #16]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d106      	bne.n	8003d8a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	b2da      	uxtb	r2, r3
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	701a      	strb	r2, [r3, #0]
 8003d88:	e008      	b.n	8003d9c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	b2db      	uxtb	r3, r3
 8003d92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d96:	b2da      	uxtb	r2, r3
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003da0:	1c5a      	adds	r2, r3, #1
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003daa:	b29b      	uxth	r3, r3
 8003dac:	3b01      	subs	r3, #1
 8003dae:	b29b      	uxth	r3, r3
 8003db0:	687a      	ldr	r2, [r7, #4]
 8003db2:	4619      	mov	r1, r3
 8003db4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d148      	bne.n	8003e4c <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	68da      	ldr	r2, [r3, #12]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f022 0220 	bic.w	r2, r2, #32
 8003dc8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	68da      	ldr	r2, [r3, #12]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003dd8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	695a      	ldr	r2, [r3, #20]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f022 0201 	bic.w	r2, r2, #1
 8003de8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2220      	movs	r2, #32
 8003dee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003df6:	2b01      	cmp	r3, #1
 8003df8:	d123      	bne.n	8003e42 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	68da      	ldr	r2, [r3, #12]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f022 0210 	bic.w	r2, r2, #16
 8003e0e:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f003 0310 	and.w	r3, r3, #16
 8003e1a:	2b10      	cmp	r3, #16
 8003e1c:	d10a      	bne.n	8003e34 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003e1e:	2300      	movs	r3, #0
 8003e20:	60fb      	str	r3, [r7, #12]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	60fb      	str	r3, [r7, #12]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	60fb      	str	r3, [r7, #12]
 8003e32:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003e38:	4619      	mov	r1, r3
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f7ff feb2 	bl	8003ba4 <HAL_UARTEx_RxEventCallback>
 8003e40:	e002      	b.n	8003e48 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8003e42:	6878      	ldr	r0, [r7, #4]
 8003e44:	f7fd f9ba 	bl	80011bc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003e48:	2300      	movs	r3, #0
 8003e4a:	e002      	b.n	8003e52 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	e000      	b.n	8003e52 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003e50:	2302      	movs	r3, #2
  }
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	3718      	adds	r7, #24
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}
	...

08003e5c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b084      	sub	sp, #16
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	691b      	ldr	r3, [r3, #16]
 8003e6a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	68da      	ldr	r2, [r3, #12]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	430a      	orrs	r2, r1
 8003e78:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	689a      	ldr	r2, [r3, #8]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	691b      	ldr	r3, [r3, #16]
 8003e82:	431a      	orrs	r2, r3
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	695b      	ldr	r3, [r3, #20]
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	68db      	ldr	r3, [r3, #12]
 8003e92:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003e96:	f023 030c 	bic.w	r3, r3, #12
 8003e9a:	687a      	ldr	r2, [r7, #4]
 8003e9c:	6812      	ldr	r2, [r2, #0]
 8003e9e:	68b9      	ldr	r1, [r7, #8]
 8003ea0:	430b      	orrs	r3, r1
 8003ea2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	695b      	ldr	r3, [r3, #20]
 8003eaa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	699a      	ldr	r2, [r3, #24]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	430a      	orrs	r2, r1
 8003eb8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a2c      	ldr	r2, [pc, #176]	; (8003f70 <UART_SetConfig+0x114>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d103      	bne.n	8003ecc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003ec4:	f7fe fcf6 	bl	80028b4 <HAL_RCC_GetPCLK2Freq>
 8003ec8:	60f8      	str	r0, [r7, #12]
 8003eca:	e002      	b.n	8003ed2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003ecc:	f7fe fcde 	bl	800288c <HAL_RCC_GetPCLK1Freq>
 8003ed0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ed2:	68fa      	ldr	r2, [r7, #12]
 8003ed4:	4613      	mov	r3, r2
 8003ed6:	009b      	lsls	r3, r3, #2
 8003ed8:	4413      	add	r3, r2
 8003eda:	009a      	lsls	r2, r3, #2
 8003edc:	441a      	add	r2, r3
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	009b      	lsls	r3, r3, #2
 8003ee4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ee8:	4a22      	ldr	r2, [pc, #136]	; (8003f74 <UART_SetConfig+0x118>)
 8003eea:	fba2 2303 	umull	r2, r3, r2, r3
 8003eee:	095b      	lsrs	r3, r3, #5
 8003ef0:	0119      	lsls	r1, r3, #4
 8003ef2:	68fa      	ldr	r2, [r7, #12]
 8003ef4:	4613      	mov	r3, r2
 8003ef6:	009b      	lsls	r3, r3, #2
 8003ef8:	4413      	add	r3, r2
 8003efa:	009a      	lsls	r2, r3, #2
 8003efc:	441a      	add	r2, r3
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	009b      	lsls	r3, r3, #2
 8003f04:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f08:	4b1a      	ldr	r3, [pc, #104]	; (8003f74 <UART_SetConfig+0x118>)
 8003f0a:	fba3 0302 	umull	r0, r3, r3, r2
 8003f0e:	095b      	lsrs	r3, r3, #5
 8003f10:	2064      	movs	r0, #100	; 0x64
 8003f12:	fb00 f303 	mul.w	r3, r0, r3
 8003f16:	1ad3      	subs	r3, r2, r3
 8003f18:	011b      	lsls	r3, r3, #4
 8003f1a:	3332      	adds	r3, #50	; 0x32
 8003f1c:	4a15      	ldr	r2, [pc, #84]	; (8003f74 <UART_SetConfig+0x118>)
 8003f1e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f22:	095b      	lsrs	r3, r3, #5
 8003f24:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f28:	4419      	add	r1, r3
 8003f2a:	68fa      	ldr	r2, [r7, #12]
 8003f2c:	4613      	mov	r3, r2
 8003f2e:	009b      	lsls	r3, r3, #2
 8003f30:	4413      	add	r3, r2
 8003f32:	009a      	lsls	r2, r3, #2
 8003f34:	441a      	add	r2, r3
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	009b      	lsls	r3, r3, #2
 8003f3c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f40:	4b0c      	ldr	r3, [pc, #48]	; (8003f74 <UART_SetConfig+0x118>)
 8003f42:	fba3 0302 	umull	r0, r3, r3, r2
 8003f46:	095b      	lsrs	r3, r3, #5
 8003f48:	2064      	movs	r0, #100	; 0x64
 8003f4a:	fb00 f303 	mul.w	r3, r0, r3
 8003f4e:	1ad3      	subs	r3, r2, r3
 8003f50:	011b      	lsls	r3, r3, #4
 8003f52:	3332      	adds	r3, #50	; 0x32
 8003f54:	4a07      	ldr	r2, [pc, #28]	; (8003f74 <UART_SetConfig+0x118>)
 8003f56:	fba2 2303 	umull	r2, r3, r2, r3
 8003f5a:	095b      	lsrs	r3, r3, #5
 8003f5c:	f003 020f 	and.w	r2, r3, #15
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	440a      	add	r2, r1
 8003f66:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003f68:	bf00      	nop
 8003f6a:	3710      	adds	r7, #16
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}
 8003f70:	40013800 	.word	0x40013800
 8003f74:	51eb851f 	.word	0x51eb851f

08003f78 <__errno>:
 8003f78:	4b01      	ldr	r3, [pc, #4]	; (8003f80 <__errno+0x8>)
 8003f7a:	6818      	ldr	r0, [r3, #0]
 8003f7c:	4770      	bx	lr
 8003f7e:	bf00      	nop
 8003f80:	200000b4 	.word	0x200000b4

08003f84 <__libc_init_array>:
 8003f84:	b570      	push	{r4, r5, r6, lr}
 8003f86:	2600      	movs	r6, #0
 8003f88:	4d0c      	ldr	r5, [pc, #48]	; (8003fbc <__libc_init_array+0x38>)
 8003f8a:	4c0d      	ldr	r4, [pc, #52]	; (8003fc0 <__libc_init_array+0x3c>)
 8003f8c:	1b64      	subs	r4, r4, r5
 8003f8e:	10a4      	asrs	r4, r4, #2
 8003f90:	42a6      	cmp	r6, r4
 8003f92:	d109      	bne.n	8003fa8 <__libc_init_array+0x24>
 8003f94:	f000 fc5c 	bl	8004850 <_init>
 8003f98:	2600      	movs	r6, #0
 8003f9a:	4d0a      	ldr	r5, [pc, #40]	; (8003fc4 <__libc_init_array+0x40>)
 8003f9c:	4c0a      	ldr	r4, [pc, #40]	; (8003fc8 <__libc_init_array+0x44>)
 8003f9e:	1b64      	subs	r4, r4, r5
 8003fa0:	10a4      	asrs	r4, r4, #2
 8003fa2:	42a6      	cmp	r6, r4
 8003fa4:	d105      	bne.n	8003fb2 <__libc_init_array+0x2e>
 8003fa6:	bd70      	pop	{r4, r5, r6, pc}
 8003fa8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fac:	4798      	blx	r3
 8003fae:	3601      	adds	r6, #1
 8003fb0:	e7ee      	b.n	8003f90 <__libc_init_array+0xc>
 8003fb2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fb6:	4798      	blx	r3
 8003fb8:	3601      	adds	r6, #1
 8003fba:	e7f2      	b.n	8003fa2 <__libc_init_array+0x1e>
 8003fbc:	080048e8 	.word	0x080048e8
 8003fc0:	080048e8 	.word	0x080048e8
 8003fc4:	080048e8 	.word	0x080048e8
 8003fc8:	080048ec 	.word	0x080048ec

08003fcc <memset>:
 8003fcc:	4603      	mov	r3, r0
 8003fce:	4402      	add	r2, r0
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d100      	bne.n	8003fd6 <memset+0xa>
 8003fd4:	4770      	bx	lr
 8003fd6:	f803 1b01 	strb.w	r1, [r3], #1
 8003fda:	e7f9      	b.n	8003fd0 <memset+0x4>

08003fdc <siprintf>:
 8003fdc:	b40e      	push	{r1, r2, r3}
 8003fde:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003fe2:	b500      	push	{lr}
 8003fe4:	b09c      	sub	sp, #112	; 0x70
 8003fe6:	ab1d      	add	r3, sp, #116	; 0x74
 8003fe8:	9002      	str	r0, [sp, #8]
 8003fea:	9006      	str	r0, [sp, #24]
 8003fec:	9107      	str	r1, [sp, #28]
 8003fee:	9104      	str	r1, [sp, #16]
 8003ff0:	4808      	ldr	r0, [pc, #32]	; (8004014 <siprintf+0x38>)
 8003ff2:	4909      	ldr	r1, [pc, #36]	; (8004018 <siprintf+0x3c>)
 8003ff4:	f853 2b04 	ldr.w	r2, [r3], #4
 8003ff8:	9105      	str	r1, [sp, #20]
 8003ffa:	6800      	ldr	r0, [r0, #0]
 8003ffc:	a902      	add	r1, sp, #8
 8003ffe:	9301      	str	r3, [sp, #4]
 8004000:	f000 f868 	bl	80040d4 <_svfiprintf_r>
 8004004:	2200      	movs	r2, #0
 8004006:	9b02      	ldr	r3, [sp, #8]
 8004008:	701a      	strb	r2, [r3, #0]
 800400a:	b01c      	add	sp, #112	; 0x70
 800400c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004010:	b003      	add	sp, #12
 8004012:	4770      	bx	lr
 8004014:	200000b4 	.word	0x200000b4
 8004018:	ffff0208 	.word	0xffff0208

0800401c <__ssputs_r>:
 800401c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004020:	688e      	ldr	r6, [r1, #8]
 8004022:	4682      	mov	sl, r0
 8004024:	429e      	cmp	r6, r3
 8004026:	460c      	mov	r4, r1
 8004028:	4690      	mov	r8, r2
 800402a:	461f      	mov	r7, r3
 800402c:	d838      	bhi.n	80040a0 <__ssputs_r+0x84>
 800402e:	898a      	ldrh	r2, [r1, #12]
 8004030:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004034:	d032      	beq.n	800409c <__ssputs_r+0x80>
 8004036:	6825      	ldr	r5, [r4, #0]
 8004038:	6909      	ldr	r1, [r1, #16]
 800403a:	3301      	adds	r3, #1
 800403c:	eba5 0901 	sub.w	r9, r5, r1
 8004040:	6965      	ldr	r5, [r4, #20]
 8004042:	444b      	add	r3, r9
 8004044:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004048:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800404c:	106d      	asrs	r5, r5, #1
 800404e:	429d      	cmp	r5, r3
 8004050:	bf38      	it	cc
 8004052:	461d      	movcc	r5, r3
 8004054:	0553      	lsls	r3, r2, #21
 8004056:	d531      	bpl.n	80040bc <__ssputs_r+0xa0>
 8004058:	4629      	mov	r1, r5
 800405a:	f000 fb53 	bl	8004704 <_malloc_r>
 800405e:	4606      	mov	r6, r0
 8004060:	b950      	cbnz	r0, 8004078 <__ssputs_r+0x5c>
 8004062:	230c      	movs	r3, #12
 8004064:	f04f 30ff 	mov.w	r0, #4294967295
 8004068:	f8ca 3000 	str.w	r3, [sl]
 800406c:	89a3      	ldrh	r3, [r4, #12]
 800406e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004072:	81a3      	strh	r3, [r4, #12]
 8004074:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004078:	464a      	mov	r2, r9
 800407a:	6921      	ldr	r1, [r4, #16]
 800407c:	f000 face 	bl	800461c <memcpy>
 8004080:	89a3      	ldrh	r3, [r4, #12]
 8004082:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004086:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800408a:	81a3      	strh	r3, [r4, #12]
 800408c:	6126      	str	r6, [r4, #16]
 800408e:	444e      	add	r6, r9
 8004090:	6026      	str	r6, [r4, #0]
 8004092:	463e      	mov	r6, r7
 8004094:	6165      	str	r5, [r4, #20]
 8004096:	eba5 0509 	sub.w	r5, r5, r9
 800409a:	60a5      	str	r5, [r4, #8]
 800409c:	42be      	cmp	r6, r7
 800409e:	d900      	bls.n	80040a2 <__ssputs_r+0x86>
 80040a0:	463e      	mov	r6, r7
 80040a2:	4632      	mov	r2, r6
 80040a4:	4641      	mov	r1, r8
 80040a6:	6820      	ldr	r0, [r4, #0]
 80040a8:	f000 fac6 	bl	8004638 <memmove>
 80040ac:	68a3      	ldr	r3, [r4, #8]
 80040ae:	6822      	ldr	r2, [r4, #0]
 80040b0:	1b9b      	subs	r3, r3, r6
 80040b2:	4432      	add	r2, r6
 80040b4:	2000      	movs	r0, #0
 80040b6:	60a3      	str	r3, [r4, #8]
 80040b8:	6022      	str	r2, [r4, #0]
 80040ba:	e7db      	b.n	8004074 <__ssputs_r+0x58>
 80040bc:	462a      	mov	r2, r5
 80040be:	f000 fb7b 	bl	80047b8 <_realloc_r>
 80040c2:	4606      	mov	r6, r0
 80040c4:	2800      	cmp	r0, #0
 80040c6:	d1e1      	bne.n	800408c <__ssputs_r+0x70>
 80040c8:	4650      	mov	r0, sl
 80040ca:	6921      	ldr	r1, [r4, #16]
 80040cc:	f000 face 	bl	800466c <_free_r>
 80040d0:	e7c7      	b.n	8004062 <__ssputs_r+0x46>
	...

080040d4 <_svfiprintf_r>:
 80040d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040d8:	4698      	mov	r8, r3
 80040da:	898b      	ldrh	r3, [r1, #12]
 80040dc:	4607      	mov	r7, r0
 80040de:	061b      	lsls	r3, r3, #24
 80040e0:	460d      	mov	r5, r1
 80040e2:	4614      	mov	r4, r2
 80040e4:	b09d      	sub	sp, #116	; 0x74
 80040e6:	d50e      	bpl.n	8004106 <_svfiprintf_r+0x32>
 80040e8:	690b      	ldr	r3, [r1, #16]
 80040ea:	b963      	cbnz	r3, 8004106 <_svfiprintf_r+0x32>
 80040ec:	2140      	movs	r1, #64	; 0x40
 80040ee:	f000 fb09 	bl	8004704 <_malloc_r>
 80040f2:	6028      	str	r0, [r5, #0]
 80040f4:	6128      	str	r0, [r5, #16]
 80040f6:	b920      	cbnz	r0, 8004102 <_svfiprintf_r+0x2e>
 80040f8:	230c      	movs	r3, #12
 80040fa:	603b      	str	r3, [r7, #0]
 80040fc:	f04f 30ff 	mov.w	r0, #4294967295
 8004100:	e0d1      	b.n	80042a6 <_svfiprintf_r+0x1d2>
 8004102:	2340      	movs	r3, #64	; 0x40
 8004104:	616b      	str	r3, [r5, #20]
 8004106:	2300      	movs	r3, #0
 8004108:	9309      	str	r3, [sp, #36]	; 0x24
 800410a:	2320      	movs	r3, #32
 800410c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004110:	2330      	movs	r3, #48	; 0x30
 8004112:	f04f 0901 	mov.w	r9, #1
 8004116:	f8cd 800c 	str.w	r8, [sp, #12]
 800411a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80042c0 <_svfiprintf_r+0x1ec>
 800411e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004122:	4623      	mov	r3, r4
 8004124:	469a      	mov	sl, r3
 8004126:	f813 2b01 	ldrb.w	r2, [r3], #1
 800412a:	b10a      	cbz	r2, 8004130 <_svfiprintf_r+0x5c>
 800412c:	2a25      	cmp	r2, #37	; 0x25
 800412e:	d1f9      	bne.n	8004124 <_svfiprintf_r+0x50>
 8004130:	ebba 0b04 	subs.w	fp, sl, r4
 8004134:	d00b      	beq.n	800414e <_svfiprintf_r+0x7a>
 8004136:	465b      	mov	r3, fp
 8004138:	4622      	mov	r2, r4
 800413a:	4629      	mov	r1, r5
 800413c:	4638      	mov	r0, r7
 800413e:	f7ff ff6d 	bl	800401c <__ssputs_r>
 8004142:	3001      	adds	r0, #1
 8004144:	f000 80aa 	beq.w	800429c <_svfiprintf_r+0x1c8>
 8004148:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800414a:	445a      	add	r2, fp
 800414c:	9209      	str	r2, [sp, #36]	; 0x24
 800414e:	f89a 3000 	ldrb.w	r3, [sl]
 8004152:	2b00      	cmp	r3, #0
 8004154:	f000 80a2 	beq.w	800429c <_svfiprintf_r+0x1c8>
 8004158:	2300      	movs	r3, #0
 800415a:	f04f 32ff 	mov.w	r2, #4294967295
 800415e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004162:	f10a 0a01 	add.w	sl, sl, #1
 8004166:	9304      	str	r3, [sp, #16]
 8004168:	9307      	str	r3, [sp, #28]
 800416a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800416e:	931a      	str	r3, [sp, #104]	; 0x68
 8004170:	4654      	mov	r4, sl
 8004172:	2205      	movs	r2, #5
 8004174:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004178:	4851      	ldr	r0, [pc, #324]	; (80042c0 <_svfiprintf_r+0x1ec>)
 800417a:	f000 fa41 	bl	8004600 <memchr>
 800417e:	9a04      	ldr	r2, [sp, #16]
 8004180:	b9d8      	cbnz	r0, 80041ba <_svfiprintf_r+0xe6>
 8004182:	06d0      	lsls	r0, r2, #27
 8004184:	bf44      	itt	mi
 8004186:	2320      	movmi	r3, #32
 8004188:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800418c:	0711      	lsls	r1, r2, #28
 800418e:	bf44      	itt	mi
 8004190:	232b      	movmi	r3, #43	; 0x2b
 8004192:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004196:	f89a 3000 	ldrb.w	r3, [sl]
 800419a:	2b2a      	cmp	r3, #42	; 0x2a
 800419c:	d015      	beq.n	80041ca <_svfiprintf_r+0xf6>
 800419e:	4654      	mov	r4, sl
 80041a0:	2000      	movs	r0, #0
 80041a2:	f04f 0c0a 	mov.w	ip, #10
 80041a6:	9a07      	ldr	r2, [sp, #28]
 80041a8:	4621      	mov	r1, r4
 80041aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80041ae:	3b30      	subs	r3, #48	; 0x30
 80041b0:	2b09      	cmp	r3, #9
 80041b2:	d94e      	bls.n	8004252 <_svfiprintf_r+0x17e>
 80041b4:	b1b0      	cbz	r0, 80041e4 <_svfiprintf_r+0x110>
 80041b6:	9207      	str	r2, [sp, #28]
 80041b8:	e014      	b.n	80041e4 <_svfiprintf_r+0x110>
 80041ba:	eba0 0308 	sub.w	r3, r0, r8
 80041be:	fa09 f303 	lsl.w	r3, r9, r3
 80041c2:	4313      	orrs	r3, r2
 80041c4:	46a2      	mov	sl, r4
 80041c6:	9304      	str	r3, [sp, #16]
 80041c8:	e7d2      	b.n	8004170 <_svfiprintf_r+0x9c>
 80041ca:	9b03      	ldr	r3, [sp, #12]
 80041cc:	1d19      	adds	r1, r3, #4
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	9103      	str	r1, [sp, #12]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	bfbb      	ittet	lt
 80041d6:	425b      	neglt	r3, r3
 80041d8:	f042 0202 	orrlt.w	r2, r2, #2
 80041dc:	9307      	strge	r3, [sp, #28]
 80041de:	9307      	strlt	r3, [sp, #28]
 80041e0:	bfb8      	it	lt
 80041e2:	9204      	strlt	r2, [sp, #16]
 80041e4:	7823      	ldrb	r3, [r4, #0]
 80041e6:	2b2e      	cmp	r3, #46	; 0x2e
 80041e8:	d10c      	bne.n	8004204 <_svfiprintf_r+0x130>
 80041ea:	7863      	ldrb	r3, [r4, #1]
 80041ec:	2b2a      	cmp	r3, #42	; 0x2a
 80041ee:	d135      	bne.n	800425c <_svfiprintf_r+0x188>
 80041f0:	9b03      	ldr	r3, [sp, #12]
 80041f2:	3402      	adds	r4, #2
 80041f4:	1d1a      	adds	r2, r3, #4
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	9203      	str	r2, [sp, #12]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	bfb8      	it	lt
 80041fe:	f04f 33ff 	movlt.w	r3, #4294967295
 8004202:	9305      	str	r3, [sp, #20]
 8004204:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80042d0 <_svfiprintf_r+0x1fc>
 8004208:	2203      	movs	r2, #3
 800420a:	4650      	mov	r0, sl
 800420c:	7821      	ldrb	r1, [r4, #0]
 800420e:	f000 f9f7 	bl	8004600 <memchr>
 8004212:	b140      	cbz	r0, 8004226 <_svfiprintf_r+0x152>
 8004214:	2340      	movs	r3, #64	; 0x40
 8004216:	eba0 000a 	sub.w	r0, r0, sl
 800421a:	fa03 f000 	lsl.w	r0, r3, r0
 800421e:	9b04      	ldr	r3, [sp, #16]
 8004220:	3401      	adds	r4, #1
 8004222:	4303      	orrs	r3, r0
 8004224:	9304      	str	r3, [sp, #16]
 8004226:	f814 1b01 	ldrb.w	r1, [r4], #1
 800422a:	2206      	movs	r2, #6
 800422c:	4825      	ldr	r0, [pc, #148]	; (80042c4 <_svfiprintf_r+0x1f0>)
 800422e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004232:	f000 f9e5 	bl	8004600 <memchr>
 8004236:	2800      	cmp	r0, #0
 8004238:	d038      	beq.n	80042ac <_svfiprintf_r+0x1d8>
 800423a:	4b23      	ldr	r3, [pc, #140]	; (80042c8 <_svfiprintf_r+0x1f4>)
 800423c:	bb1b      	cbnz	r3, 8004286 <_svfiprintf_r+0x1b2>
 800423e:	9b03      	ldr	r3, [sp, #12]
 8004240:	3307      	adds	r3, #7
 8004242:	f023 0307 	bic.w	r3, r3, #7
 8004246:	3308      	adds	r3, #8
 8004248:	9303      	str	r3, [sp, #12]
 800424a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800424c:	4433      	add	r3, r6
 800424e:	9309      	str	r3, [sp, #36]	; 0x24
 8004250:	e767      	b.n	8004122 <_svfiprintf_r+0x4e>
 8004252:	460c      	mov	r4, r1
 8004254:	2001      	movs	r0, #1
 8004256:	fb0c 3202 	mla	r2, ip, r2, r3
 800425a:	e7a5      	b.n	80041a8 <_svfiprintf_r+0xd4>
 800425c:	2300      	movs	r3, #0
 800425e:	f04f 0c0a 	mov.w	ip, #10
 8004262:	4619      	mov	r1, r3
 8004264:	3401      	adds	r4, #1
 8004266:	9305      	str	r3, [sp, #20]
 8004268:	4620      	mov	r0, r4
 800426a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800426e:	3a30      	subs	r2, #48	; 0x30
 8004270:	2a09      	cmp	r2, #9
 8004272:	d903      	bls.n	800427c <_svfiprintf_r+0x1a8>
 8004274:	2b00      	cmp	r3, #0
 8004276:	d0c5      	beq.n	8004204 <_svfiprintf_r+0x130>
 8004278:	9105      	str	r1, [sp, #20]
 800427a:	e7c3      	b.n	8004204 <_svfiprintf_r+0x130>
 800427c:	4604      	mov	r4, r0
 800427e:	2301      	movs	r3, #1
 8004280:	fb0c 2101 	mla	r1, ip, r1, r2
 8004284:	e7f0      	b.n	8004268 <_svfiprintf_r+0x194>
 8004286:	ab03      	add	r3, sp, #12
 8004288:	9300      	str	r3, [sp, #0]
 800428a:	462a      	mov	r2, r5
 800428c:	4638      	mov	r0, r7
 800428e:	4b0f      	ldr	r3, [pc, #60]	; (80042cc <_svfiprintf_r+0x1f8>)
 8004290:	a904      	add	r1, sp, #16
 8004292:	f3af 8000 	nop.w
 8004296:	1c42      	adds	r2, r0, #1
 8004298:	4606      	mov	r6, r0
 800429a:	d1d6      	bne.n	800424a <_svfiprintf_r+0x176>
 800429c:	89ab      	ldrh	r3, [r5, #12]
 800429e:	065b      	lsls	r3, r3, #25
 80042a0:	f53f af2c 	bmi.w	80040fc <_svfiprintf_r+0x28>
 80042a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80042a6:	b01d      	add	sp, #116	; 0x74
 80042a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042ac:	ab03      	add	r3, sp, #12
 80042ae:	9300      	str	r3, [sp, #0]
 80042b0:	462a      	mov	r2, r5
 80042b2:	4638      	mov	r0, r7
 80042b4:	4b05      	ldr	r3, [pc, #20]	; (80042cc <_svfiprintf_r+0x1f8>)
 80042b6:	a904      	add	r1, sp, #16
 80042b8:	f000 f87c 	bl	80043b4 <_printf_i>
 80042bc:	e7eb      	b.n	8004296 <_svfiprintf_r+0x1c2>
 80042be:	bf00      	nop
 80042c0:	080048b4 	.word	0x080048b4
 80042c4:	080048be 	.word	0x080048be
 80042c8:	00000000 	.word	0x00000000
 80042cc:	0800401d 	.word	0x0800401d
 80042d0:	080048ba 	.word	0x080048ba

080042d4 <_printf_common>:
 80042d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80042d8:	4616      	mov	r6, r2
 80042da:	4699      	mov	r9, r3
 80042dc:	688a      	ldr	r2, [r1, #8]
 80042de:	690b      	ldr	r3, [r1, #16]
 80042e0:	4607      	mov	r7, r0
 80042e2:	4293      	cmp	r3, r2
 80042e4:	bfb8      	it	lt
 80042e6:	4613      	movlt	r3, r2
 80042e8:	6033      	str	r3, [r6, #0]
 80042ea:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80042ee:	460c      	mov	r4, r1
 80042f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80042f4:	b10a      	cbz	r2, 80042fa <_printf_common+0x26>
 80042f6:	3301      	adds	r3, #1
 80042f8:	6033      	str	r3, [r6, #0]
 80042fa:	6823      	ldr	r3, [r4, #0]
 80042fc:	0699      	lsls	r1, r3, #26
 80042fe:	bf42      	ittt	mi
 8004300:	6833      	ldrmi	r3, [r6, #0]
 8004302:	3302      	addmi	r3, #2
 8004304:	6033      	strmi	r3, [r6, #0]
 8004306:	6825      	ldr	r5, [r4, #0]
 8004308:	f015 0506 	ands.w	r5, r5, #6
 800430c:	d106      	bne.n	800431c <_printf_common+0x48>
 800430e:	f104 0a19 	add.w	sl, r4, #25
 8004312:	68e3      	ldr	r3, [r4, #12]
 8004314:	6832      	ldr	r2, [r6, #0]
 8004316:	1a9b      	subs	r3, r3, r2
 8004318:	42ab      	cmp	r3, r5
 800431a:	dc28      	bgt.n	800436e <_printf_common+0x9a>
 800431c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004320:	1e13      	subs	r3, r2, #0
 8004322:	6822      	ldr	r2, [r4, #0]
 8004324:	bf18      	it	ne
 8004326:	2301      	movne	r3, #1
 8004328:	0692      	lsls	r2, r2, #26
 800432a:	d42d      	bmi.n	8004388 <_printf_common+0xb4>
 800432c:	4649      	mov	r1, r9
 800432e:	4638      	mov	r0, r7
 8004330:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004334:	47c0      	blx	r8
 8004336:	3001      	adds	r0, #1
 8004338:	d020      	beq.n	800437c <_printf_common+0xa8>
 800433a:	6823      	ldr	r3, [r4, #0]
 800433c:	68e5      	ldr	r5, [r4, #12]
 800433e:	f003 0306 	and.w	r3, r3, #6
 8004342:	2b04      	cmp	r3, #4
 8004344:	bf18      	it	ne
 8004346:	2500      	movne	r5, #0
 8004348:	6832      	ldr	r2, [r6, #0]
 800434a:	f04f 0600 	mov.w	r6, #0
 800434e:	68a3      	ldr	r3, [r4, #8]
 8004350:	bf08      	it	eq
 8004352:	1aad      	subeq	r5, r5, r2
 8004354:	6922      	ldr	r2, [r4, #16]
 8004356:	bf08      	it	eq
 8004358:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800435c:	4293      	cmp	r3, r2
 800435e:	bfc4      	itt	gt
 8004360:	1a9b      	subgt	r3, r3, r2
 8004362:	18ed      	addgt	r5, r5, r3
 8004364:	341a      	adds	r4, #26
 8004366:	42b5      	cmp	r5, r6
 8004368:	d11a      	bne.n	80043a0 <_printf_common+0xcc>
 800436a:	2000      	movs	r0, #0
 800436c:	e008      	b.n	8004380 <_printf_common+0xac>
 800436e:	2301      	movs	r3, #1
 8004370:	4652      	mov	r2, sl
 8004372:	4649      	mov	r1, r9
 8004374:	4638      	mov	r0, r7
 8004376:	47c0      	blx	r8
 8004378:	3001      	adds	r0, #1
 800437a:	d103      	bne.n	8004384 <_printf_common+0xb0>
 800437c:	f04f 30ff 	mov.w	r0, #4294967295
 8004380:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004384:	3501      	adds	r5, #1
 8004386:	e7c4      	b.n	8004312 <_printf_common+0x3e>
 8004388:	2030      	movs	r0, #48	; 0x30
 800438a:	18e1      	adds	r1, r4, r3
 800438c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004390:	1c5a      	adds	r2, r3, #1
 8004392:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004396:	4422      	add	r2, r4
 8004398:	3302      	adds	r3, #2
 800439a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800439e:	e7c5      	b.n	800432c <_printf_common+0x58>
 80043a0:	2301      	movs	r3, #1
 80043a2:	4622      	mov	r2, r4
 80043a4:	4649      	mov	r1, r9
 80043a6:	4638      	mov	r0, r7
 80043a8:	47c0      	blx	r8
 80043aa:	3001      	adds	r0, #1
 80043ac:	d0e6      	beq.n	800437c <_printf_common+0xa8>
 80043ae:	3601      	adds	r6, #1
 80043b0:	e7d9      	b.n	8004366 <_printf_common+0x92>
	...

080043b4 <_printf_i>:
 80043b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80043b8:	460c      	mov	r4, r1
 80043ba:	7e27      	ldrb	r7, [r4, #24]
 80043bc:	4691      	mov	r9, r2
 80043be:	2f78      	cmp	r7, #120	; 0x78
 80043c0:	4680      	mov	r8, r0
 80043c2:	469a      	mov	sl, r3
 80043c4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80043c6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80043ca:	d807      	bhi.n	80043dc <_printf_i+0x28>
 80043cc:	2f62      	cmp	r7, #98	; 0x62
 80043ce:	d80a      	bhi.n	80043e6 <_printf_i+0x32>
 80043d0:	2f00      	cmp	r7, #0
 80043d2:	f000 80d9 	beq.w	8004588 <_printf_i+0x1d4>
 80043d6:	2f58      	cmp	r7, #88	; 0x58
 80043d8:	f000 80a4 	beq.w	8004524 <_printf_i+0x170>
 80043dc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80043e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80043e4:	e03a      	b.n	800445c <_printf_i+0xa8>
 80043e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80043ea:	2b15      	cmp	r3, #21
 80043ec:	d8f6      	bhi.n	80043dc <_printf_i+0x28>
 80043ee:	a001      	add	r0, pc, #4	; (adr r0, 80043f4 <_printf_i+0x40>)
 80043f0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80043f4:	0800444d 	.word	0x0800444d
 80043f8:	08004461 	.word	0x08004461
 80043fc:	080043dd 	.word	0x080043dd
 8004400:	080043dd 	.word	0x080043dd
 8004404:	080043dd 	.word	0x080043dd
 8004408:	080043dd 	.word	0x080043dd
 800440c:	08004461 	.word	0x08004461
 8004410:	080043dd 	.word	0x080043dd
 8004414:	080043dd 	.word	0x080043dd
 8004418:	080043dd 	.word	0x080043dd
 800441c:	080043dd 	.word	0x080043dd
 8004420:	0800456f 	.word	0x0800456f
 8004424:	08004491 	.word	0x08004491
 8004428:	08004551 	.word	0x08004551
 800442c:	080043dd 	.word	0x080043dd
 8004430:	080043dd 	.word	0x080043dd
 8004434:	08004591 	.word	0x08004591
 8004438:	080043dd 	.word	0x080043dd
 800443c:	08004491 	.word	0x08004491
 8004440:	080043dd 	.word	0x080043dd
 8004444:	080043dd 	.word	0x080043dd
 8004448:	08004559 	.word	0x08004559
 800444c:	680b      	ldr	r3, [r1, #0]
 800444e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004452:	1d1a      	adds	r2, r3, #4
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	600a      	str	r2, [r1, #0]
 8004458:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800445c:	2301      	movs	r3, #1
 800445e:	e0a4      	b.n	80045aa <_printf_i+0x1f6>
 8004460:	6825      	ldr	r5, [r4, #0]
 8004462:	6808      	ldr	r0, [r1, #0]
 8004464:	062e      	lsls	r6, r5, #24
 8004466:	f100 0304 	add.w	r3, r0, #4
 800446a:	d50a      	bpl.n	8004482 <_printf_i+0xce>
 800446c:	6805      	ldr	r5, [r0, #0]
 800446e:	600b      	str	r3, [r1, #0]
 8004470:	2d00      	cmp	r5, #0
 8004472:	da03      	bge.n	800447c <_printf_i+0xc8>
 8004474:	232d      	movs	r3, #45	; 0x2d
 8004476:	426d      	negs	r5, r5
 8004478:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800447c:	230a      	movs	r3, #10
 800447e:	485e      	ldr	r0, [pc, #376]	; (80045f8 <_printf_i+0x244>)
 8004480:	e019      	b.n	80044b6 <_printf_i+0x102>
 8004482:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004486:	6805      	ldr	r5, [r0, #0]
 8004488:	600b      	str	r3, [r1, #0]
 800448a:	bf18      	it	ne
 800448c:	b22d      	sxthne	r5, r5
 800448e:	e7ef      	b.n	8004470 <_printf_i+0xbc>
 8004490:	680b      	ldr	r3, [r1, #0]
 8004492:	6825      	ldr	r5, [r4, #0]
 8004494:	1d18      	adds	r0, r3, #4
 8004496:	6008      	str	r0, [r1, #0]
 8004498:	0628      	lsls	r0, r5, #24
 800449a:	d501      	bpl.n	80044a0 <_printf_i+0xec>
 800449c:	681d      	ldr	r5, [r3, #0]
 800449e:	e002      	b.n	80044a6 <_printf_i+0xf2>
 80044a0:	0669      	lsls	r1, r5, #25
 80044a2:	d5fb      	bpl.n	800449c <_printf_i+0xe8>
 80044a4:	881d      	ldrh	r5, [r3, #0]
 80044a6:	2f6f      	cmp	r7, #111	; 0x6f
 80044a8:	bf0c      	ite	eq
 80044aa:	2308      	moveq	r3, #8
 80044ac:	230a      	movne	r3, #10
 80044ae:	4852      	ldr	r0, [pc, #328]	; (80045f8 <_printf_i+0x244>)
 80044b0:	2100      	movs	r1, #0
 80044b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80044b6:	6866      	ldr	r6, [r4, #4]
 80044b8:	2e00      	cmp	r6, #0
 80044ba:	bfa8      	it	ge
 80044bc:	6821      	ldrge	r1, [r4, #0]
 80044be:	60a6      	str	r6, [r4, #8]
 80044c0:	bfa4      	itt	ge
 80044c2:	f021 0104 	bicge.w	r1, r1, #4
 80044c6:	6021      	strge	r1, [r4, #0]
 80044c8:	b90d      	cbnz	r5, 80044ce <_printf_i+0x11a>
 80044ca:	2e00      	cmp	r6, #0
 80044cc:	d04d      	beq.n	800456a <_printf_i+0x1b6>
 80044ce:	4616      	mov	r6, r2
 80044d0:	fbb5 f1f3 	udiv	r1, r5, r3
 80044d4:	fb03 5711 	mls	r7, r3, r1, r5
 80044d8:	5dc7      	ldrb	r7, [r0, r7]
 80044da:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80044de:	462f      	mov	r7, r5
 80044e0:	42bb      	cmp	r3, r7
 80044e2:	460d      	mov	r5, r1
 80044e4:	d9f4      	bls.n	80044d0 <_printf_i+0x11c>
 80044e6:	2b08      	cmp	r3, #8
 80044e8:	d10b      	bne.n	8004502 <_printf_i+0x14e>
 80044ea:	6823      	ldr	r3, [r4, #0]
 80044ec:	07df      	lsls	r7, r3, #31
 80044ee:	d508      	bpl.n	8004502 <_printf_i+0x14e>
 80044f0:	6923      	ldr	r3, [r4, #16]
 80044f2:	6861      	ldr	r1, [r4, #4]
 80044f4:	4299      	cmp	r1, r3
 80044f6:	bfde      	ittt	le
 80044f8:	2330      	movle	r3, #48	; 0x30
 80044fa:	f806 3c01 	strble.w	r3, [r6, #-1]
 80044fe:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004502:	1b92      	subs	r2, r2, r6
 8004504:	6122      	str	r2, [r4, #16]
 8004506:	464b      	mov	r3, r9
 8004508:	4621      	mov	r1, r4
 800450a:	4640      	mov	r0, r8
 800450c:	f8cd a000 	str.w	sl, [sp]
 8004510:	aa03      	add	r2, sp, #12
 8004512:	f7ff fedf 	bl	80042d4 <_printf_common>
 8004516:	3001      	adds	r0, #1
 8004518:	d14c      	bne.n	80045b4 <_printf_i+0x200>
 800451a:	f04f 30ff 	mov.w	r0, #4294967295
 800451e:	b004      	add	sp, #16
 8004520:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004524:	4834      	ldr	r0, [pc, #208]	; (80045f8 <_printf_i+0x244>)
 8004526:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800452a:	680e      	ldr	r6, [r1, #0]
 800452c:	6823      	ldr	r3, [r4, #0]
 800452e:	f856 5b04 	ldr.w	r5, [r6], #4
 8004532:	061f      	lsls	r7, r3, #24
 8004534:	600e      	str	r6, [r1, #0]
 8004536:	d514      	bpl.n	8004562 <_printf_i+0x1ae>
 8004538:	07d9      	lsls	r1, r3, #31
 800453a:	bf44      	itt	mi
 800453c:	f043 0320 	orrmi.w	r3, r3, #32
 8004540:	6023      	strmi	r3, [r4, #0]
 8004542:	b91d      	cbnz	r5, 800454c <_printf_i+0x198>
 8004544:	6823      	ldr	r3, [r4, #0]
 8004546:	f023 0320 	bic.w	r3, r3, #32
 800454a:	6023      	str	r3, [r4, #0]
 800454c:	2310      	movs	r3, #16
 800454e:	e7af      	b.n	80044b0 <_printf_i+0xfc>
 8004550:	6823      	ldr	r3, [r4, #0]
 8004552:	f043 0320 	orr.w	r3, r3, #32
 8004556:	6023      	str	r3, [r4, #0]
 8004558:	2378      	movs	r3, #120	; 0x78
 800455a:	4828      	ldr	r0, [pc, #160]	; (80045fc <_printf_i+0x248>)
 800455c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004560:	e7e3      	b.n	800452a <_printf_i+0x176>
 8004562:	065e      	lsls	r6, r3, #25
 8004564:	bf48      	it	mi
 8004566:	b2ad      	uxthmi	r5, r5
 8004568:	e7e6      	b.n	8004538 <_printf_i+0x184>
 800456a:	4616      	mov	r6, r2
 800456c:	e7bb      	b.n	80044e6 <_printf_i+0x132>
 800456e:	680b      	ldr	r3, [r1, #0]
 8004570:	6826      	ldr	r6, [r4, #0]
 8004572:	1d1d      	adds	r5, r3, #4
 8004574:	6960      	ldr	r0, [r4, #20]
 8004576:	600d      	str	r5, [r1, #0]
 8004578:	0635      	lsls	r5, r6, #24
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	d501      	bpl.n	8004582 <_printf_i+0x1ce>
 800457e:	6018      	str	r0, [r3, #0]
 8004580:	e002      	b.n	8004588 <_printf_i+0x1d4>
 8004582:	0671      	lsls	r1, r6, #25
 8004584:	d5fb      	bpl.n	800457e <_printf_i+0x1ca>
 8004586:	8018      	strh	r0, [r3, #0]
 8004588:	2300      	movs	r3, #0
 800458a:	4616      	mov	r6, r2
 800458c:	6123      	str	r3, [r4, #16]
 800458e:	e7ba      	b.n	8004506 <_printf_i+0x152>
 8004590:	680b      	ldr	r3, [r1, #0]
 8004592:	1d1a      	adds	r2, r3, #4
 8004594:	600a      	str	r2, [r1, #0]
 8004596:	681e      	ldr	r6, [r3, #0]
 8004598:	2100      	movs	r1, #0
 800459a:	4630      	mov	r0, r6
 800459c:	6862      	ldr	r2, [r4, #4]
 800459e:	f000 f82f 	bl	8004600 <memchr>
 80045a2:	b108      	cbz	r0, 80045a8 <_printf_i+0x1f4>
 80045a4:	1b80      	subs	r0, r0, r6
 80045a6:	6060      	str	r0, [r4, #4]
 80045a8:	6863      	ldr	r3, [r4, #4]
 80045aa:	6123      	str	r3, [r4, #16]
 80045ac:	2300      	movs	r3, #0
 80045ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80045b2:	e7a8      	b.n	8004506 <_printf_i+0x152>
 80045b4:	4632      	mov	r2, r6
 80045b6:	4649      	mov	r1, r9
 80045b8:	4640      	mov	r0, r8
 80045ba:	6923      	ldr	r3, [r4, #16]
 80045bc:	47d0      	blx	sl
 80045be:	3001      	adds	r0, #1
 80045c0:	d0ab      	beq.n	800451a <_printf_i+0x166>
 80045c2:	6823      	ldr	r3, [r4, #0]
 80045c4:	079b      	lsls	r3, r3, #30
 80045c6:	d413      	bmi.n	80045f0 <_printf_i+0x23c>
 80045c8:	68e0      	ldr	r0, [r4, #12]
 80045ca:	9b03      	ldr	r3, [sp, #12]
 80045cc:	4298      	cmp	r0, r3
 80045ce:	bfb8      	it	lt
 80045d0:	4618      	movlt	r0, r3
 80045d2:	e7a4      	b.n	800451e <_printf_i+0x16a>
 80045d4:	2301      	movs	r3, #1
 80045d6:	4632      	mov	r2, r6
 80045d8:	4649      	mov	r1, r9
 80045da:	4640      	mov	r0, r8
 80045dc:	47d0      	blx	sl
 80045de:	3001      	adds	r0, #1
 80045e0:	d09b      	beq.n	800451a <_printf_i+0x166>
 80045e2:	3501      	adds	r5, #1
 80045e4:	68e3      	ldr	r3, [r4, #12]
 80045e6:	9903      	ldr	r1, [sp, #12]
 80045e8:	1a5b      	subs	r3, r3, r1
 80045ea:	42ab      	cmp	r3, r5
 80045ec:	dcf2      	bgt.n	80045d4 <_printf_i+0x220>
 80045ee:	e7eb      	b.n	80045c8 <_printf_i+0x214>
 80045f0:	2500      	movs	r5, #0
 80045f2:	f104 0619 	add.w	r6, r4, #25
 80045f6:	e7f5      	b.n	80045e4 <_printf_i+0x230>
 80045f8:	080048c5 	.word	0x080048c5
 80045fc:	080048d6 	.word	0x080048d6

08004600 <memchr>:
 8004600:	4603      	mov	r3, r0
 8004602:	b510      	push	{r4, lr}
 8004604:	b2c9      	uxtb	r1, r1
 8004606:	4402      	add	r2, r0
 8004608:	4293      	cmp	r3, r2
 800460a:	4618      	mov	r0, r3
 800460c:	d101      	bne.n	8004612 <memchr+0x12>
 800460e:	2000      	movs	r0, #0
 8004610:	e003      	b.n	800461a <memchr+0x1a>
 8004612:	7804      	ldrb	r4, [r0, #0]
 8004614:	3301      	adds	r3, #1
 8004616:	428c      	cmp	r4, r1
 8004618:	d1f6      	bne.n	8004608 <memchr+0x8>
 800461a:	bd10      	pop	{r4, pc}

0800461c <memcpy>:
 800461c:	440a      	add	r2, r1
 800461e:	4291      	cmp	r1, r2
 8004620:	f100 33ff 	add.w	r3, r0, #4294967295
 8004624:	d100      	bne.n	8004628 <memcpy+0xc>
 8004626:	4770      	bx	lr
 8004628:	b510      	push	{r4, lr}
 800462a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800462e:	4291      	cmp	r1, r2
 8004630:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004634:	d1f9      	bne.n	800462a <memcpy+0xe>
 8004636:	bd10      	pop	{r4, pc}

08004638 <memmove>:
 8004638:	4288      	cmp	r0, r1
 800463a:	b510      	push	{r4, lr}
 800463c:	eb01 0402 	add.w	r4, r1, r2
 8004640:	d902      	bls.n	8004648 <memmove+0x10>
 8004642:	4284      	cmp	r4, r0
 8004644:	4623      	mov	r3, r4
 8004646:	d807      	bhi.n	8004658 <memmove+0x20>
 8004648:	1e43      	subs	r3, r0, #1
 800464a:	42a1      	cmp	r1, r4
 800464c:	d008      	beq.n	8004660 <memmove+0x28>
 800464e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004652:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004656:	e7f8      	b.n	800464a <memmove+0x12>
 8004658:	4601      	mov	r1, r0
 800465a:	4402      	add	r2, r0
 800465c:	428a      	cmp	r2, r1
 800465e:	d100      	bne.n	8004662 <memmove+0x2a>
 8004660:	bd10      	pop	{r4, pc}
 8004662:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004666:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800466a:	e7f7      	b.n	800465c <memmove+0x24>

0800466c <_free_r>:
 800466c:	b538      	push	{r3, r4, r5, lr}
 800466e:	4605      	mov	r5, r0
 8004670:	2900      	cmp	r1, #0
 8004672:	d043      	beq.n	80046fc <_free_r+0x90>
 8004674:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004678:	1f0c      	subs	r4, r1, #4
 800467a:	2b00      	cmp	r3, #0
 800467c:	bfb8      	it	lt
 800467e:	18e4      	addlt	r4, r4, r3
 8004680:	f000 f8d0 	bl	8004824 <__malloc_lock>
 8004684:	4a1e      	ldr	r2, [pc, #120]	; (8004700 <_free_r+0x94>)
 8004686:	6813      	ldr	r3, [r2, #0]
 8004688:	4610      	mov	r0, r2
 800468a:	b933      	cbnz	r3, 800469a <_free_r+0x2e>
 800468c:	6063      	str	r3, [r4, #4]
 800468e:	6014      	str	r4, [r2, #0]
 8004690:	4628      	mov	r0, r5
 8004692:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004696:	f000 b8cb 	b.w	8004830 <__malloc_unlock>
 800469a:	42a3      	cmp	r3, r4
 800469c:	d90a      	bls.n	80046b4 <_free_r+0x48>
 800469e:	6821      	ldr	r1, [r4, #0]
 80046a0:	1862      	adds	r2, r4, r1
 80046a2:	4293      	cmp	r3, r2
 80046a4:	bf01      	itttt	eq
 80046a6:	681a      	ldreq	r2, [r3, #0]
 80046a8:	685b      	ldreq	r3, [r3, #4]
 80046aa:	1852      	addeq	r2, r2, r1
 80046ac:	6022      	streq	r2, [r4, #0]
 80046ae:	6063      	str	r3, [r4, #4]
 80046b0:	6004      	str	r4, [r0, #0]
 80046b2:	e7ed      	b.n	8004690 <_free_r+0x24>
 80046b4:	461a      	mov	r2, r3
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	b10b      	cbz	r3, 80046be <_free_r+0x52>
 80046ba:	42a3      	cmp	r3, r4
 80046bc:	d9fa      	bls.n	80046b4 <_free_r+0x48>
 80046be:	6811      	ldr	r1, [r2, #0]
 80046c0:	1850      	adds	r0, r2, r1
 80046c2:	42a0      	cmp	r0, r4
 80046c4:	d10b      	bne.n	80046de <_free_r+0x72>
 80046c6:	6820      	ldr	r0, [r4, #0]
 80046c8:	4401      	add	r1, r0
 80046ca:	1850      	adds	r0, r2, r1
 80046cc:	4283      	cmp	r3, r0
 80046ce:	6011      	str	r1, [r2, #0]
 80046d0:	d1de      	bne.n	8004690 <_free_r+0x24>
 80046d2:	6818      	ldr	r0, [r3, #0]
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	4401      	add	r1, r0
 80046d8:	6011      	str	r1, [r2, #0]
 80046da:	6053      	str	r3, [r2, #4]
 80046dc:	e7d8      	b.n	8004690 <_free_r+0x24>
 80046de:	d902      	bls.n	80046e6 <_free_r+0x7a>
 80046e0:	230c      	movs	r3, #12
 80046e2:	602b      	str	r3, [r5, #0]
 80046e4:	e7d4      	b.n	8004690 <_free_r+0x24>
 80046e6:	6820      	ldr	r0, [r4, #0]
 80046e8:	1821      	adds	r1, r4, r0
 80046ea:	428b      	cmp	r3, r1
 80046ec:	bf01      	itttt	eq
 80046ee:	6819      	ldreq	r1, [r3, #0]
 80046f0:	685b      	ldreq	r3, [r3, #4]
 80046f2:	1809      	addeq	r1, r1, r0
 80046f4:	6021      	streq	r1, [r4, #0]
 80046f6:	6063      	str	r3, [r4, #4]
 80046f8:	6054      	str	r4, [r2, #4]
 80046fa:	e7c9      	b.n	8004690 <_free_r+0x24>
 80046fc:	bd38      	pop	{r3, r4, r5, pc}
 80046fe:	bf00      	nop
 8004700:	2000017c 	.word	0x2000017c

08004704 <_malloc_r>:
 8004704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004706:	1ccd      	adds	r5, r1, #3
 8004708:	f025 0503 	bic.w	r5, r5, #3
 800470c:	3508      	adds	r5, #8
 800470e:	2d0c      	cmp	r5, #12
 8004710:	bf38      	it	cc
 8004712:	250c      	movcc	r5, #12
 8004714:	2d00      	cmp	r5, #0
 8004716:	4606      	mov	r6, r0
 8004718:	db01      	blt.n	800471e <_malloc_r+0x1a>
 800471a:	42a9      	cmp	r1, r5
 800471c:	d903      	bls.n	8004726 <_malloc_r+0x22>
 800471e:	230c      	movs	r3, #12
 8004720:	6033      	str	r3, [r6, #0]
 8004722:	2000      	movs	r0, #0
 8004724:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004726:	f000 f87d 	bl	8004824 <__malloc_lock>
 800472a:	4921      	ldr	r1, [pc, #132]	; (80047b0 <_malloc_r+0xac>)
 800472c:	680a      	ldr	r2, [r1, #0]
 800472e:	4614      	mov	r4, r2
 8004730:	b99c      	cbnz	r4, 800475a <_malloc_r+0x56>
 8004732:	4f20      	ldr	r7, [pc, #128]	; (80047b4 <_malloc_r+0xb0>)
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	b923      	cbnz	r3, 8004742 <_malloc_r+0x3e>
 8004738:	4621      	mov	r1, r4
 800473a:	4630      	mov	r0, r6
 800473c:	f000 f862 	bl	8004804 <_sbrk_r>
 8004740:	6038      	str	r0, [r7, #0]
 8004742:	4629      	mov	r1, r5
 8004744:	4630      	mov	r0, r6
 8004746:	f000 f85d 	bl	8004804 <_sbrk_r>
 800474a:	1c43      	adds	r3, r0, #1
 800474c:	d123      	bne.n	8004796 <_malloc_r+0x92>
 800474e:	230c      	movs	r3, #12
 8004750:	4630      	mov	r0, r6
 8004752:	6033      	str	r3, [r6, #0]
 8004754:	f000 f86c 	bl	8004830 <__malloc_unlock>
 8004758:	e7e3      	b.n	8004722 <_malloc_r+0x1e>
 800475a:	6823      	ldr	r3, [r4, #0]
 800475c:	1b5b      	subs	r3, r3, r5
 800475e:	d417      	bmi.n	8004790 <_malloc_r+0x8c>
 8004760:	2b0b      	cmp	r3, #11
 8004762:	d903      	bls.n	800476c <_malloc_r+0x68>
 8004764:	6023      	str	r3, [r4, #0]
 8004766:	441c      	add	r4, r3
 8004768:	6025      	str	r5, [r4, #0]
 800476a:	e004      	b.n	8004776 <_malloc_r+0x72>
 800476c:	6863      	ldr	r3, [r4, #4]
 800476e:	42a2      	cmp	r2, r4
 8004770:	bf0c      	ite	eq
 8004772:	600b      	streq	r3, [r1, #0]
 8004774:	6053      	strne	r3, [r2, #4]
 8004776:	4630      	mov	r0, r6
 8004778:	f000 f85a 	bl	8004830 <__malloc_unlock>
 800477c:	f104 000b 	add.w	r0, r4, #11
 8004780:	1d23      	adds	r3, r4, #4
 8004782:	f020 0007 	bic.w	r0, r0, #7
 8004786:	1ac2      	subs	r2, r0, r3
 8004788:	d0cc      	beq.n	8004724 <_malloc_r+0x20>
 800478a:	1a1b      	subs	r3, r3, r0
 800478c:	50a3      	str	r3, [r4, r2]
 800478e:	e7c9      	b.n	8004724 <_malloc_r+0x20>
 8004790:	4622      	mov	r2, r4
 8004792:	6864      	ldr	r4, [r4, #4]
 8004794:	e7cc      	b.n	8004730 <_malloc_r+0x2c>
 8004796:	1cc4      	adds	r4, r0, #3
 8004798:	f024 0403 	bic.w	r4, r4, #3
 800479c:	42a0      	cmp	r0, r4
 800479e:	d0e3      	beq.n	8004768 <_malloc_r+0x64>
 80047a0:	1a21      	subs	r1, r4, r0
 80047a2:	4630      	mov	r0, r6
 80047a4:	f000 f82e 	bl	8004804 <_sbrk_r>
 80047a8:	3001      	adds	r0, #1
 80047aa:	d1dd      	bne.n	8004768 <_malloc_r+0x64>
 80047ac:	e7cf      	b.n	800474e <_malloc_r+0x4a>
 80047ae:	bf00      	nop
 80047b0:	2000017c 	.word	0x2000017c
 80047b4:	20000180 	.word	0x20000180

080047b8 <_realloc_r>:
 80047b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047ba:	4607      	mov	r7, r0
 80047bc:	4614      	mov	r4, r2
 80047be:	460e      	mov	r6, r1
 80047c0:	b921      	cbnz	r1, 80047cc <_realloc_r+0x14>
 80047c2:	4611      	mov	r1, r2
 80047c4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80047c8:	f7ff bf9c 	b.w	8004704 <_malloc_r>
 80047cc:	b922      	cbnz	r2, 80047d8 <_realloc_r+0x20>
 80047ce:	f7ff ff4d 	bl	800466c <_free_r>
 80047d2:	4625      	mov	r5, r4
 80047d4:	4628      	mov	r0, r5
 80047d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80047d8:	f000 f830 	bl	800483c <_malloc_usable_size_r>
 80047dc:	42a0      	cmp	r0, r4
 80047de:	d20f      	bcs.n	8004800 <_realloc_r+0x48>
 80047e0:	4621      	mov	r1, r4
 80047e2:	4638      	mov	r0, r7
 80047e4:	f7ff ff8e 	bl	8004704 <_malloc_r>
 80047e8:	4605      	mov	r5, r0
 80047ea:	2800      	cmp	r0, #0
 80047ec:	d0f2      	beq.n	80047d4 <_realloc_r+0x1c>
 80047ee:	4631      	mov	r1, r6
 80047f0:	4622      	mov	r2, r4
 80047f2:	f7ff ff13 	bl	800461c <memcpy>
 80047f6:	4631      	mov	r1, r6
 80047f8:	4638      	mov	r0, r7
 80047fa:	f7ff ff37 	bl	800466c <_free_r>
 80047fe:	e7e9      	b.n	80047d4 <_realloc_r+0x1c>
 8004800:	4635      	mov	r5, r6
 8004802:	e7e7      	b.n	80047d4 <_realloc_r+0x1c>

08004804 <_sbrk_r>:
 8004804:	b538      	push	{r3, r4, r5, lr}
 8004806:	2300      	movs	r3, #0
 8004808:	4d05      	ldr	r5, [pc, #20]	; (8004820 <_sbrk_r+0x1c>)
 800480a:	4604      	mov	r4, r0
 800480c:	4608      	mov	r0, r1
 800480e:	602b      	str	r3, [r5, #0]
 8004810:	f7fd f832 	bl	8001878 <_sbrk>
 8004814:	1c43      	adds	r3, r0, #1
 8004816:	d102      	bne.n	800481e <_sbrk_r+0x1a>
 8004818:	682b      	ldr	r3, [r5, #0]
 800481a:	b103      	cbz	r3, 800481e <_sbrk_r+0x1a>
 800481c:	6023      	str	r3, [r4, #0]
 800481e:	bd38      	pop	{r3, r4, r5, pc}
 8004820:	20000294 	.word	0x20000294

08004824 <__malloc_lock>:
 8004824:	4801      	ldr	r0, [pc, #4]	; (800482c <__malloc_lock+0x8>)
 8004826:	f000 b811 	b.w	800484c <__retarget_lock_acquire_recursive>
 800482a:	bf00      	nop
 800482c:	2000029c 	.word	0x2000029c

08004830 <__malloc_unlock>:
 8004830:	4801      	ldr	r0, [pc, #4]	; (8004838 <__malloc_unlock+0x8>)
 8004832:	f000 b80c 	b.w	800484e <__retarget_lock_release_recursive>
 8004836:	bf00      	nop
 8004838:	2000029c 	.word	0x2000029c

0800483c <_malloc_usable_size_r>:
 800483c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004840:	1f18      	subs	r0, r3, #4
 8004842:	2b00      	cmp	r3, #0
 8004844:	bfbc      	itt	lt
 8004846:	580b      	ldrlt	r3, [r1, r0]
 8004848:	18c0      	addlt	r0, r0, r3
 800484a:	4770      	bx	lr

0800484c <__retarget_lock_acquire_recursive>:
 800484c:	4770      	bx	lr

0800484e <__retarget_lock_release_recursive>:
 800484e:	4770      	bx	lr

08004850 <_init>:
 8004850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004852:	bf00      	nop
 8004854:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004856:	bc08      	pop	{r3}
 8004858:	469e      	mov	lr, r3
 800485a:	4770      	bx	lr

0800485c <_fini>:
 800485c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800485e:	bf00      	nop
 8004860:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004862:	bc08      	pop	{r3}
 8004864:	469e      	mov	lr, r3
 8004866:	4770      	bx	lr
